
accleromteref4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f24  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080080ac  080080ac  000180ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080f8  080080f8  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  080080f8  080080f8  000180f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008100  08008100  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008100  08008100  00018100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008104  08008104  00018104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08008108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020190  2**0
                  CONTENTS
 10 .bss          00000ff8  20000190  20000190  00020190  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001188  20001188  00020190  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011d58  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003246  00000000  00000000  00031f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e88  00000000  00000000  00035160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d10  00000000  00000000  00035fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f2e  00000000  00000000  00036cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e2a  00000000  00000000  0005ac26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8cfa  00000000  00000000  0006ca50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013574a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039e4  00000000  00000000  0013579c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000190 	.word	0x20000190
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008094 	.word	0x08008094

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000194 	.word	0x20000194
 80001c4:	08008094 	.word	0x08008094

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <LIS302DL_Init>:
  * @brief  Set LIS302DL Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS302DL_Init(uint16_t InitStruct)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80004d6:	2300      	movs	r3, #0
 80004d8:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80004da:	f000 fe85 	bl	80011e8 <ACCELERO_IO_Init>

  ctrl = (uint8_t) InitStruct;
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 80004e4:	f107 030f 	add.w	r3, r7, #15
 80004e8:	2201      	movs	r2, #1
 80004ea:	2120      	movs	r1, #32
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 fed9 	bl	80012a4 <ACCELERO_IO_Write>
}
 80004f2:	bf00      	nop
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <LIS302DL_DeInit>:
  * @brief  LIS302DL De-Initialization.
  * @param  None
  * @retval None.
  */
void LIS302DL_DeInit(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
  
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <LIS302DL_ReadID>:
  * @brief  Read LIS302DL device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS302DL_ReadID(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	71fb      	strb	r3, [r7, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8000512:	f000 fe69 	bl	80011e8 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS302DL_WHO_AM_I_ADDR, 1);
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	2201      	movs	r2, #1
 800051a:	210f      	movs	r1, #15
 800051c:	4618      	mov	r0, r3
 800051e:	f000 fef3 	bl	8001308 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
 8000522:	79fb      	ldrb	r3, [r7, #7]
}
 8000524:	4618      	mov	r0, r3
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <LIS302DL_FilterConfig>:
  * @brief  Set LIS302DL Internal High Pass Filter configuration.
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LIS302DL_FilterConfig(uint8_t FilterStruct)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
  uint8_t ctrl = 0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 800053a:	f107 030f 	add.w	r3, r7, #15
 800053e:	2201      	movs	r2, #1
 8000540:	2121      	movs	r1, #33	; 0x21
 8000542:	4618      	mov	r0, r3
 8000544:	f000 fee0 	bl	8001308 <ACCELERO_IO_Read>

  /* Clear high pass filter cut-off level, interrupt and data selection bits */
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	f023 032f 	bic.w	r3, r3, #47	; 0x2f
 800054e:	b2db      	uxtb	r3, r3
 8000550:	73fb      	strb	r3, [r7, #15]
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);

  ctrl |= FilterStruct;
 8000552:	7bfa      	ldrb	r2, [r7, #15]
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	4313      	orrs	r3, r2
 8000558:	b2db      	uxtb	r3, r3
 800055a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 800055c:	f107 030f 	add.w	r3, r7, #15
 8000560:	2201      	movs	r2, #1
 8000562:	2121      	movs	r1, #33	; 0x21
 8000564:	4618      	mov	r0, r3
 8000566:	f000 fe9d 	bl	80012a4 <ACCELERO_IO_Write>
}
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <LIS302DL_InterruptConfig>:
  * @param  LIS302DL_InterruptConfig_TypeDef: pointer to a LIS302DL_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS302DL Interrupt.
  * @retval None
  */
void LIS302DL_InterruptConfig(LIS302DL_InterruptConfigTypeDef *LIS302DL_IntConfigStruct)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	b084      	sub	sp, #16
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 800057a:	2300      	movs	r3, #0
 800057c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFG register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 800057e:	f107 030f 	add.w	r3, r7, #15
 8000582:	2201      	movs	r2, #1
 8000584:	2138      	movs	r1, #56	; 0x38
 8000586:	4618      	mov	r0, r3
 8000588:	f000 febe 	bl	8001308 <ACCELERO_IO_Read>
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	781a      	ldrb	r2, [r3, #0]
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	785b      	ldrb	r3, [r3, #1]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8000594:	4313      	orrs	r3, r2
 8000596:	b2da      	uxtb	r2, r3
                   LIS302DL_IntConfigStruct->DoubleClick_Axes);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 800059c:	4313      	orrs	r3, r2
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK_CFG register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80005a2:	f107 030f 	add.w	r3, r7, #15
 80005a6:	2201      	movs	r2, #1
 80005a8:	2138      	movs	r1, #56	; 0x38
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fe7a 	bl	80012a4 <ACCELERO_IO_Write>
}
 80005b0:	bf00      	nop
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <LIS302DL_Click_IntConfig>:
  * @brief  Set LIS302DL Interrupt configuration
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntConfig(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80005be:	2300      	movs	r3, #0
 80005c0:	71fb      	strb	r3, [r7, #7]
  LIS302DL_InterruptConfigTypeDef   LIS302DL_InterruptStruct;
  
  ACCELERO_IO_ITConfig();
 80005c2:	f000 fe3f 	bl	8001244 <ACCELERO_IO_ITConfig>
  
  /* Set configuration of Internal High Pass Filter of LIS302DL */
  LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 80005c6:	2340      	movs	r3, #64	; 0x40
 80005c8:	713b      	strb	r3, [r7, #4]
  LIS302DL_InterruptStruct.SingleClick_Axes = LIS302DL_CLICKINTERRUPT_Z_ENABLE;
 80005ca:	2310      	movs	r3, #16
 80005cc:	717b      	strb	r3, [r7, #5]
  LIS302DL_InterruptStruct.DoubleClick_Axes = LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
 80005ce:	2320      	movs	r3, #32
 80005d0:	71bb      	strb	r3, [r7, #6]
  LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffcc 	bl	8000572 <LIS302DL_InterruptConfig>
  
  /* Configure Interrupt control register: enable Click interrupt on INT1 and
  INT2 on Z axis high event */
  ctrl = 0x3F;
 80005da:	233f      	movs	r3, #63	; 0x3f
 80005dc:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	2201      	movs	r2, #1
 80005e2:	2122      	movs	r1, #34	; 0x22
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fe5d 	bl	80012a4 <ACCELERO_IO_Write>
  
  /* Enable Interrupt generation on click on Z axis */
  ctrl = 0x50;
 80005ea:	2350      	movs	r3, #80	; 0x50
 80005ec:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80005ee:	1dfb      	adds	r3, r7, #7
 80005f0:	2201      	movs	r2, #1
 80005f2:	2138      	movs	r1, #56	; 0x38
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fe55 	bl	80012a4 <ACCELERO_IO_Write>
  
  /* Configure Click Threshold on X/Y axis (10 x 0.5g) */
  ctrl = 0xAA;
 80005fa:	23aa      	movs	r3, #170	; 0xaa
 80005fc:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 80005fe:	1dfb      	adds	r3, r7, #7
 8000600:	2201      	movs	r2, #1
 8000602:	213b      	movs	r1, #59	; 0x3b
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fe4d 	bl	80012a4 <ACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis (10 x 0.5g) */
  ctrl = 0x0A;
 800060a:	230a      	movs	r3, #10
 800060c:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	2201      	movs	r2, #1
 8000612:	213c      	movs	r1, #60	; 0x3c
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fe45 	bl	80012a4 <ACCELERO_IO_Write>
  
  /* Enable interrupt on Y axis high event */
  ctrl = 0x4C;
 800061a:	234c      	movs	r3, #76	; 0x4c
 800061c:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	2201      	movs	r2, #1
 8000622:	2130      	movs	r1, #48	; 0x30
 8000624:	4618      	mov	r0, r3
 8000626:	f000 fe3d 	bl	80012a4 <ACCELERO_IO_Write>
  
  /* Configure Time Limit */
  ctrl = 0x03;
 800062a:	2303      	movs	r3, #3
 800062c:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	2201      	movs	r2, #1
 8000632:	213d      	movs	r1, #61	; 0x3d
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fe35 	bl	80012a4 <ACCELERO_IO_Write>
  
  /* Configure Latency */
  ctrl = 0x7F;
 800063a:	237f      	movs	r3, #127	; 0x7f
 800063c:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	2201      	movs	r2, #1
 8000642:	213e      	movs	r1, #62	; 0x3e
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fe2d 	bl	80012a4 <ACCELERO_IO_Write>
  
  /* Configure Click Window */
  ctrl = 0x7F;
 800064a:	237f      	movs	r3, #127	; 0x7f
 800064c:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	2201      	movs	r2, #1
 8000652:	213f      	movs	r1, #63	; 0x3f
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fe25 	bl	80012a4 <ACCELERO_IO_Write>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <LIS302DL_Click_IntClear>:
  * @brief  Clear LIS302DL click Interrupt 
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntClear(void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b084      	sub	sp, #16
 8000666:	af00      	add	r7, sp, #0
  uint8_t buffer[6], clickreg = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	71fb      	strb	r3, [r7, #7]

  /* Read click and status registers if the available MEMS Accelerometer is LIS302DL */
  ACCELERO_IO_Read(&clickreg, LIS302DL_CLICK_SRC_REG_ADDR, 1); 
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	2201      	movs	r2, #1
 8000670:	2139      	movs	r1, #57	; 0x39
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fe48 	bl	8001308 <ACCELERO_IO_Read>
  ACCELERO_IO_Read(buffer, LIS302DL_STATUS_REG_ADDR, 6);
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	2206      	movs	r2, #6
 800067e:	2127      	movs	r1, #39	; 0x27
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fe41 	bl	8001308 <ACCELERO_IO_Read>
}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <LIS302DL_RebootCmd>:
  * @brief  Reboot memory content of LIS302DL.
  * @param  None
  * @retval None
  */
void LIS302DL_RebootCmd(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8000694:	1dfb      	adds	r3, r7, #7
 8000696:	2201      	movs	r2, #1
 8000698:	2121      	movs	r1, #33	; 0x21
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fe34 	bl	8001308 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	2201      	movs	r2, #1
 80006ae:	2121      	movs	r1, #33	; 0x21
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fdf7 	bl	80012a4 <ACCELERO_IO_Write>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <LIS302DL_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit rappresentation)
  * @param  pfData: Data out pointer
  * @retval None
  */
void LIS302DL_ReadACC(int16_t *pData)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b088      	sub	sp, #32
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  int16_t pnRawData[3];
  uint8_t sensitivity = LIS302DL_SENSITIVITY_2_3G;
 80006c6:	2312      	movs	r3, #18
 80006c8:	77fb      	strb	r3, [r7, #31]
  uint8_t crtl, i = 0x00;
 80006ca:	2300      	movs	r3, #0
 80006cc:	77bb      	strb	r3, [r7, #30]
  
  ACCELERO_IO_Read(&crtl, LIS302DL_CTRL_REG1_ADDR, 1);
 80006ce:	f107 030f 	add.w	r3, r7, #15
 80006d2:	2201      	movs	r2, #1
 80006d4:	2120      	movs	r1, #32
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fe16 	bl	8001308 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)buffer, LIS302DL_OUT_X_ADDR, 6);
 80006dc:	f107 0318 	add.w	r3, r7, #24
 80006e0:	2206      	movs	r2, #6
 80006e2:	2129      	movs	r1, #41	; 0x29
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fe0f 	bl	8001308 <ACCELERO_IO_Read>
  
  for(i=0; i<3; i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	77bb      	strb	r3, [r7, #30]
 80006ee:	e00f      	b.n	8000710 <LIS302DL_ReadACC+0x52>
  {
    pnRawData[i] = buffer[2*i];
 80006f0:	7fbb      	ldrb	r3, [r7, #30]
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	3320      	adds	r3, #32
 80006f6:	443b      	add	r3, r7
 80006f8:	f913 2c08 	ldrsb.w	r2, [r3, #-8]
 80006fc:	7fbb      	ldrb	r3, [r7, #30]
 80006fe:	b212      	sxth	r2, r2
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	3320      	adds	r3, #32
 8000704:	443b      	add	r3, r7
 8000706:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800070a:	7fbb      	ldrb	r3, [r7, #30]
 800070c:	3301      	adds	r3, #1
 800070e:	77bb      	strb	r3, [r7, #30]
 8000710:	7fbb      	ldrb	r3, [r7, #30]
 8000712:	2b02      	cmp	r3, #2
 8000714:	d9ec      	bls.n	80006f0 <LIS302DL_ReadACC+0x32>
  }
  
  switch(crtl & LIS302DL_FULLSCALE_9_2) 
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	f003 0320 	and.w	r3, r3, #32
 800071c:	2b00      	cmp	r3, #0
 800071e:	d002      	beq.n	8000726 <LIS302DL_ReadACC+0x68>
 8000720:	2b20      	cmp	r3, #32
 8000722:	d003      	beq.n	800072c <LIS302DL_ReadACC+0x6e>
  case LIS302DL_FULLSCALE_9_2:
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
    break;
    
  default:
    break;
 8000724:	e005      	b.n	8000732 <LIS302DL_ReadACC+0x74>
    sensitivity = LIS302DL_SENSITIVITY_2_3G;
 8000726:	2312      	movs	r3, #18
 8000728:	77fb      	strb	r3, [r7, #31]
    break;
 800072a:	e002      	b.n	8000732 <LIS302DL_ReadACC+0x74>
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
 800072c:	2348      	movs	r3, #72	; 0x48
 800072e:	77fb      	strb	r3, [r7, #31]
    break;
 8000730:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000732:	2300      	movs	r3, #0
 8000734:	77bb      	strb	r3, [r7, #30]
 8000736:	e014      	b.n	8000762 <LIS302DL_ReadACC+0xa4>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000738:	7fbb      	ldrb	r3, [r7, #30]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	3320      	adds	r3, #32
 800073e:	443b      	add	r3, r7
 8000740:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000744:	b29a      	uxth	r2, r3
 8000746:	7ffb      	ldrb	r3, [r7, #31]
 8000748:	b29b      	uxth	r3, r3
 800074a:	fb12 f303 	smulbb	r3, r2, r3
 800074e:	b299      	uxth	r1, r3
 8000750:	7fbb      	ldrb	r3, [r7, #30]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	4413      	add	r3, r2
 8000758:	b20a      	sxth	r2, r1
 800075a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800075c:	7fbb      	ldrb	r3, [r7, #30]
 800075e:	3301      	adds	r3, #1
 8000760:	77bb      	strb	r3, [r7, #30]
 8000762:	7fbb      	ldrb	r3, [r7, #30]
 8000764:	2b02      	cmp	r3, #2
 8000766:	d9e7      	bls.n	8000738 <LIS302DL_ReadACC+0x7a>
  }
}
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	3720      	adds	r7, #32
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <LIS3DSH_Init>:
  * @brief  Set LIS3DSH Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS3DSH_Init(uint16_t InitStruct)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b084      	sub	sp, #16
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800077c:	2300      	movs	r3, #0
 800077e:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8000780:	f000 fd32 	bl	80011e8 <ACCELERO_IO_Init>

  /* Configure MEMS: power mode(ODR) and axes enable */
  ctrl = (uint8_t) (InitStruct);
 8000784:	88fb      	ldrh	r3, [r7, #6]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG4 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 800078a:	f107 030f 	add.w	r3, r7, #15
 800078e:	2201      	movs	r2, #1
 8000790:	2120      	movs	r1, #32
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fd86 	bl	80012a4 <ACCELERO_IO_Write>
  
  /* Configure MEMS: full scale and self test */
  ctrl = (uint8_t) (InitStruct >> 8);
 8000798:	88fb      	ldrh	r3, [r7, #6]
 800079a:	0a1b      	lsrs	r3, r3, #8
 800079c:	b29b      	uxth	r3, r3
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 80007a2:	f107 030f 	add.w	r3, r7, #15
 80007a6:	2201      	movs	r2, #1
 80007a8:	2124      	movs	r1, #36	; 0x24
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fd7a 	bl	80012a4 <ACCELERO_IO_Write>
}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <LIS3DSH_DeInit>:
  * @brief  LIS3DSH De-Initialization.
  * @param  None
  * @retval None.
  */
void LIS3DSH_DeInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <LIS3DSH_ReadID>:
  * @brief  Read LIS3DSH device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS3DSH_ReadID(void)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	71fb      	strb	r3, [r7, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80007d0:	f000 fd0a 	bl	80011e8 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS3DSH_WHO_AM_I_ADDR, 1);
 80007d4:	1dfb      	adds	r3, r7, #7
 80007d6:	2201      	movs	r2, #1
 80007d8:	210f      	movs	r1, #15
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fd94 	bl	8001308 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
 80007e0:	79fb      	ldrb	r3, [r7, #7]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <LIS3DSH_InterruptConfig>:
  * @param  LIS3DSH_InterruptConfig_TypeDef: pointer to a LIS3DSH_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS3DSH Interrupt.
  * @retval None
  */
void LIS3DSH_InterruptConfig(LIS3DSH_InterruptConfigTypeDef *LIS3DSH_IntConfigStruct)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b084      	sub	sp, #16
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 80007f2:	2300      	movs	r3, #0
 80007f4:	73fb      	strb	r3, [r7, #15]
  
  /* Configure Interrupt Selection , Request and Signal */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	785a      	ldrb	r2, [r3, #1]
                   LIS3DSH_IntConfigStruct->Interrupt_Request | \
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	781b      	ldrb	r3, [r3, #0]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80007fe:	4313      	orrs	r3, r2
 8000800:	b2da      	uxtb	r2, r3
                   LIS3DSH_IntConfigStruct->Interrupt_Signal);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 8000806:	4313      	orrs	r3, r2
 8000808:	b2db      	uxtb	r3, r3
 800080a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 800080c:	f107 030f 	add.w	r3, r7, #15
 8000810:	2201      	movs	r2, #1
 8000812:	2123      	movs	r1, #35	; 0x23
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fd45 	bl	80012a4 <ACCELERO_IO_Write>
  
  /* Configure State Machine 1 */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	78da      	ldrb	r2, [r3, #3]
                   LIS3DSH_IntConfigStruct->State_Machine1_Interrupt);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	791b      	ldrb	r3, [r3, #4]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 8000822:	4313      	orrs	r3, r2
 8000824:	b2db      	uxtb	r3, r3
 8000826:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 8000828:	f107 030f 	add.w	r3, r7, #15
 800082c:	2201      	movs	r2, #1
 800082e:	2121      	movs	r1, #33	; 0x21
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fd37 	bl	80012a4 <ACCELERO_IO_Write>
  
  /* Configure State Machine 2 */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	795a      	ldrb	r2, [r3, #5]
                   LIS3DSH_IntConfigStruct->State_Machine2_Interrupt);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	799b      	ldrb	r3, [r3, #6]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 800083e:	4313      	orrs	r3, r2
 8000840:	b2db      	uxtb	r3, r3
 8000842:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 8000844:	f107 030f 	add.w	r3, r7, #15
 8000848:	2201      	movs	r2, #1
 800084a:	2122      	movs	r1, #34	; 0x22
 800084c:	4618      	mov	r0, r3
 800084e:	f000 fd29 	bl	80012a4 <ACCELERO_IO_Write>
}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <LIS3DSH_Click_IntConfig>:
  * @brief  Set LIS3DSH for click detection
  * @param  None
  * @retval None
  */
void LIS3DSH_Click_IntConfig(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000860:	2300      	movs	r3, #0
 8000862:	71fb      	strb	r3, [r7, #7]
  LIS3DSH_InterruptConfigTypeDef   LIS3DSH_InterruptStruct; 

  ACCELERO_IO_ITConfig();
 8000864:	f000 fcee 	bl	8001244 <ACCELERO_IO_ITConfig>

  /* Set LIS3DSH Interrupt configuration */
  LIS3DSH_InterruptStruct.Interrupt_Selection_Enable = LIS3DSH_INTERRUPT_2_ENABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	707b      	strb	r3, [r7, #1]
  LIS3DSH_InterruptStruct.Interrupt_Request = LIS3DSH_INTERRUPT_REQUEST_LATCHED;
 800086c:	2300      	movs	r3, #0
 800086e:	703b      	strb	r3, [r7, #0]
  LIS3DSH_InterruptStruct.Interrupt_Signal = LIS3DSH_INTERRUPT_SIGNAL_HIGH;
 8000870:	2340      	movs	r3, #64	; 0x40
 8000872:	70bb      	strb	r3, [r7, #2]
  LIS3DSH_InterruptStruct.State_Machine1_Enable = LIS3DSH_SM_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	70fb      	strb	r3, [r7, #3]
  LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 8000878:	2301      	movs	r3, #1
 800087a:	717b      	strb	r3, [r7, #5]
  LIS3DSH_InterruptStruct.State_Machine2_Interrupt = LIS3DSH_SM_INT1;
 800087c:	2300      	movs	r3, #0
 800087e:	71bb      	strb	r3, [r7, #6]
  LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 8000880:	463b      	mov	r3, r7
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ffb1 	bl	80007ea <LIS3DSH_InterruptConfig>
    
  /* Set LIS3DSH State Machines configuration */
  ctrl=0x03; 
 8000888:	2303      	movs	r3, #3
 800088a:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR,1);
 800088c:	1dfb      	adds	r3, r7, #7
 800088e:	2201      	movs	r2, #1
 8000890:	2152      	movs	r1, #82	; 0x52
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fd06 	bl	80012a4 <ACCELERO_IO_Write>
  ctrl=0xC8; 
 8000898:	23c8      	movs	r3, #200	; 0xc8
 800089a:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR,1);
 800089c:	1dfb      	adds	r3, r7, #7
 800089e:	2201      	movs	r2, #1
 80008a0:	2154      	movs	r1, #84	; 0x54
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fcfe 	bl	80012a4 <ACCELERO_IO_Write>
  ctrl=0x45; 
 80008a8:	2345      	movs	r3, #69	; 0x45
 80008aa:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR,1);
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	2201      	movs	r2, #1
 80008b0:	2156      	movs	r1, #86	; 0x56
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 fcf6 	bl	80012a4 <ACCELERO_IO_Write>
  ctrl=0xFC; 
 80008b8:	23fc      	movs	r3, #252	; 0xfc
 80008ba:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR,1);
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	2201      	movs	r2, #1
 80008c0:	215a      	movs	r1, #90	; 0x5a
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 fcee 	bl	80012a4 <ACCELERO_IO_Write>
  ctrl=0xA1; 
 80008c8:	23a1      	movs	r3, #161	; 0xa1
 80008ca:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR,1);
 80008cc:	1dfb      	adds	r3, r7, #7
 80008ce:	2201      	movs	r2, #1
 80008d0:	215b      	movs	r1, #91	; 0x5b
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fce6 	bl	80012a4 <ACCELERO_IO_Write>
  ctrl=0x01; 
 80008d8:	2301      	movs	r3, #1
 80008da:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR,1);
 80008dc:	1dfb      	adds	r3, r7, #7
 80008de:	2201      	movs	r2, #1
 80008e0:	215c      	movs	r1, #92	; 0x5c
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fcde 	bl	80012a4 <ACCELERO_IO_Write>

  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT2_ADDR,1);
 80008e8:	1dfb      	adds	r3, r7, #7
 80008ea:	2201      	movs	r2, #1
 80008ec:	217b      	movs	r1, #123	; 0x7b
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fcd8 	bl	80012a4 <ACCELERO_IO_Write>
  
  /* Configure State Machine 2 to detect single click */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_1_ADDR,1);
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	2201      	movs	r2, #1
 80008f8:	2160      	movs	r1, #96	; 0x60
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fcd2 	bl	80012a4 <ACCELERO_IO_Write>
  ctrl=0x06; 
 8000900:	2306      	movs	r3, #6
 8000902:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR,1);
 8000904:	1dfb      	adds	r3, r7, #7
 8000906:	2201      	movs	r2, #1
 8000908:	2161      	movs	r1, #97	; 0x61
 800090a:	4618      	mov	r0, r3
 800090c:	f000 fcca 	bl	80012a4 <ACCELERO_IO_Write>
  ctrl=0x28; 
 8000910:	2328      	movs	r3, #40	; 0x28
 8000912:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR,1);
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	2201      	movs	r2, #1
 8000918:	2162      	movs	r1, #98	; 0x62
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fcc2 	bl	80012a4 <ACCELERO_IO_Write>
  ctrl=0x11; 
 8000920:	2311      	movs	r3, #17
 8000922:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR,1);
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	2201      	movs	r2, #1
 8000928:	2163      	movs	r1, #99	; 0x63
 800092a:	4618      	mov	r0, r3
 800092c:	f000 fcba 	bl	80012a4 <ACCELERO_IO_Write>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <LIS3DSH_RebootCmd>:
  * @brief  Reboot memory content of LIS3DSH.
  * @param  None
  * @retval None
  */
void LIS3DSH_RebootCmd(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG6 register */
  ACCELERO_IO_Read(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	2201      	movs	r2, #1
 8000942:	2125      	movs	r1, #37	; 0x25
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fcdf 	bl	8001308 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS3DSH_BOOT_FORCED;
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000950:	b2db      	uxtb	r3, r3
 8000952:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG6 register */
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	2201      	movs	r2, #1
 8000958:	2125      	movs	r1, #37	; 0x25
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fca2 	bl	80012a4 <ACCELERO_IO_Write>
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <LIS3DSH_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit representation).
  * @param  pointer on floating buffer.
  * @retval None
  */
void LIS3DSH_ReadACC(int16_t *pData)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  uint8_t crtl, i = 0x00;
 8000970:	2300      	movs	r3, #0
 8000972:	77fb      	strb	r3, [r7, #31]
  float sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000974:	4b64      	ldr	r3, [pc, #400]	; (8000b08 <LIS3DSH_ReadACC+0x1a0>)
 8000976:	61bb      	str	r3, [r7, #24]
  float valueinfloat = 0;
 8000978:	f04f 0300 	mov.w	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  
  ACCELERO_IO_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);  
 800097e:	f107 030b 	add.w	r3, r7, #11
 8000982:	2201      	movs	r2, #1
 8000984:	2124      	movs	r1, #36	; 0x24
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fcbe 	bl	8001308 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2201      	movs	r2, #1
 8000992:	2128      	movs	r1, #40	; 0x28
 8000994:	4618      	mov	r0, r3
 8000996:	f000 fcb7 	bl	8001308 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	3301      	adds	r3, #1
 80009a0:	2201      	movs	r2, #1
 80009a2:	2129      	movs	r1, #41	; 0x29
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fcaf 	bl	8001308 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	3302      	adds	r3, #2
 80009b0:	2201      	movs	r2, #1
 80009b2:	212a      	movs	r1, #42	; 0x2a
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fca7 	bl	8001308 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	3303      	adds	r3, #3
 80009c0:	2201      	movs	r2, #1
 80009c2:	212b      	movs	r1, #43	; 0x2b
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 fc9f 	bl	8001308 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	3304      	adds	r3, #4
 80009d0:	2201      	movs	r2, #1
 80009d2:	212c      	movs	r1, #44	; 0x2c
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 fc97 	bl	8001308 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	3305      	adds	r3, #5
 80009e0:	2201      	movs	r2, #1
 80009e2:	212d      	movs	r1, #45	; 0x2d
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 fc8f 	bl	8001308 <ACCELERO_IO_Read>
  
  switch(crtl & LIS3DSH__FULLSCALE_SELECTION) 
 80009ea:	7afb      	ldrb	r3, [r7, #11]
 80009ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80009f0:	2b20      	cmp	r3, #32
 80009f2:	d854      	bhi.n	8000a9e <LIS3DSH_ReadACC+0x136>
 80009f4:	a201      	add	r2, pc, #4	; (adr r2, 80009fc <LIS3DSH_ReadACC+0x94>)
 80009f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009fa:	bf00      	nop
 80009fc:	08000a81 	.word	0x08000a81
 8000a00:	08000a9f 	.word	0x08000a9f
 8000a04:	08000a9f 	.word	0x08000a9f
 8000a08:	08000a9f 	.word	0x08000a9f
 8000a0c:	08000a9f 	.word	0x08000a9f
 8000a10:	08000a9f 	.word	0x08000a9f
 8000a14:	08000a9f 	.word	0x08000a9f
 8000a18:	08000a9f 	.word	0x08000a9f
 8000a1c:	08000a87 	.word	0x08000a87
 8000a20:	08000a9f 	.word	0x08000a9f
 8000a24:	08000a9f 	.word	0x08000a9f
 8000a28:	08000a9f 	.word	0x08000a9f
 8000a2c:	08000a9f 	.word	0x08000a9f
 8000a30:	08000a9f 	.word	0x08000a9f
 8000a34:	08000a9f 	.word	0x08000a9f
 8000a38:	08000a9f 	.word	0x08000a9f
 8000a3c:	08000a8d 	.word	0x08000a8d
 8000a40:	08000a9f 	.word	0x08000a9f
 8000a44:	08000a9f 	.word	0x08000a9f
 8000a48:	08000a9f 	.word	0x08000a9f
 8000a4c:	08000a9f 	.word	0x08000a9f
 8000a50:	08000a9f 	.word	0x08000a9f
 8000a54:	08000a9f 	.word	0x08000a9f
 8000a58:	08000a9f 	.word	0x08000a9f
 8000a5c:	08000a93 	.word	0x08000a93
 8000a60:	08000a9f 	.word	0x08000a9f
 8000a64:	08000a9f 	.word	0x08000a9f
 8000a68:	08000a9f 	.word	0x08000a9f
 8000a6c:	08000a9f 	.word	0x08000a9f
 8000a70:	08000a9f 	.word	0x08000a9f
 8000a74:	08000a9f 	.word	0x08000a9f
 8000a78:	08000a9f 	.word	0x08000a9f
 8000a7c:	08000a99 	.word	0x08000a99
  {
    /* FS bit = 000 ==> Sensitivity typical value = 0.06milligals/digit */ 
  case LIS3DSH_FULLSCALE_2:
    sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000a80:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <LIS3DSH_ReadACC+0x1a0>)
 8000a82:	61bb      	str	r3, [r7, #24]
    break;
 8000a84:	e00c      	b.n	8000aa0 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 001 ==> Sensitivity typical value = 0.12milligals/digit */ 
  case LIS3DSH_FULLSCALE_4:
    sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <LIS3DSH_ReadACC+0x1a4>)
 8000a88:	61bb      	str	r3, [r7, #24]
    break;
 8000a8a:	e009      	b.n	8000aa0 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 010 ==> Sensitivity typical value = 0.18milligals/digit */ 
  case LIS3DSH_FULLSCALE_6:
    sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8000a8c:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <LIS3DSH_ReadACC+0x1a8>)
 8000a8e:	61bb      	str	r3, [r7, #24]
    break;
 8000a90:	e006      	b.n	8000aa0 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 011 ==> Sensitivity typical value = 0.24milligals/digit */ 
  case LIS3DSH_FULLSCALE_8:
    sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <LIS3DSH_ReadACC+0x1ac>)
 8000a94:	61bb      	str	r3, [r7, #24]
    break;
 8000a96:	e003      	b.n	8000aa0 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 100 ==> Sensitivity typical value = 0.73milligals/digit */ 
  case LIS3DSH_FULLSCALE_16:
    sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <LIS3DSH_ReadACC+0x1b0>)
 8000a9a:	61bb      	str	r3, [r7, #24]
    break;
 8000a9c:	e000      	b.n	8000aa0 <LIS3DSH_ReadACC+0x138>
    
  default:
    break;
 8000a9e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	77fb      	strb	r3, [r7, #31]
 8000aa4:	e027      	b.n	8000af6 <LIS3DSH_ReadACC+0x18e>
  {
    valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]) * sensitivity;
 8000aa6:	7ffb      	ldrb	r3, [r7, #31]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	3301      	adds	r3, #1
 8000aac:	3320      	adds	r3, #32
 8000aae:	443b      	add	r3, r7
 8000ab0:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000ab4:	021b      	lsls	r3, r3, #8
 8000ab6:	7ffa      	ldrb	r2, [r7, #31]
 8000ab8:	0052      	lsls	r2, r2, #1
 8000aba:	3220      	adds	r2, #32
 8000abc:	443a      	add	r2, r7
 8000abe:	f912 2c14 	ldrsb.w	r2, [r2, #-20]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	ee07 3a90 	vmov	s15, r3
 8000ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000acc:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ad4:	edc7 7a05 	vstr	s15, [r7, #20]
    pData[i] = (int16_t)valueinfloat;
 8000ad8:	7ffb      	ldrb	r3, [r7, #31]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ae4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ae8:	ee17 2a90 	vmov	r2, s15
 8000aec:	b212      	sxth	r2, r2
 8000aee:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000af0:	7ffb      	ldrb	r3, [r7, #31]
 8000af2:	3301      	adds	r3, #1
 8000af4:	77fb      	strb	r3, [r7, #31]
 8000af6:	7ffb      	ldrb	r3, [r7, #31]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d9d4      	bls.n	8000aa6 <LIS3DSH_ReadACC+0x13e>
  }
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	3d75c28f 	.word	0x3d75c28f
 8000b0c:	3df5c28f 	.word	0x3df5c28f
 8000b10:	3e3851ec 	.word	0x3e3851ec
 8000b14:	3e75c28f 	.word	0x3e75c28f
 8000b18:	3f3ae148 	.word	0x3f3ae148

08000b1c <ACCELRO_Calibrate>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USER CODE BEGIN PV */
int16_t pDataXYZ[3];
void ACCELRO_Calibrate (void)
{ HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	2201      	movs	r2, #1
 8000b24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b28:	482d      	ldr	r0, [pc, #180]	; (8000be0 <ACCELRO_Calibrate+0xc4>)
 8000b2a:	f001 fa4b 	bl	8001fc4 <HAL_GPIO_WritePin>
	for (int i=0; i<50; i++)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	e047      	b.n	8000bc4 <ACCELRO_Calibrate+0xa8>
	{
		BSP_ACCELERO_GetXYZ(pDataXYZ);
 8000b34:	482b      	ldr	r0, [pc, #172]	; (8000be4 <ACCELRO_Calibrate+0xc8>)
 8000b36:	f000 fcad 	bl	8001494 <BSP_ACCELERO_GetXYZ>
		x =pDataXYZ[0] ;
 8000b3a:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <ACCELRO_Calibrate+0xc8>)
 8000b3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b40:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <ACCELRO_Calibrate+0xcc>)
 8000b42:	801a      	strh	r2, [r3, #0]
		y = pDataXYZ[1];
 8000b44:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <ACCELRO_Calibrate+0xc8>)
 8000b46:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000b4a:	4b28      	ldr	r3, [pc, #160]	; (8000bec <ACCELRO_Calibrate+0xd0>)
 8000b4c:	801a      	strh	r2, [r3, #0]
		z = pDataXYZ[2];
 8000b4e:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <ACCELRO_Calibrate+0xc8>)
 8000b50:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000b54:	4b26      	ldr	r3, [pc, #152]	; (8000bf0 <ACCELRO_Calibrate+0xd4>)
 8000b56:	801a      	strh	r2, [r3, #0]
		min_xval = MIN(min_xval, x);
 8000b58:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <ACCELRO_Calibrate+0xcc>)
 8000b5a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b5e:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <ACCELRO_Calibrate+0xd8>)
 8000b60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b64:	4293      	cmp	r3, r2
 8000b66:	bfa8      	it	ge
 8000b68:	4613      	movge	r3, r2
 8000b6a:	b21a      	sxth	r2, r3
 8000b6c:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <ACCELRO_Calibrate+0xd8>)
 8000b6e:	801a      	strh	r2, [r3, #0]
		max_xval = MAX(max_xval, x);
 8000b70:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <ACCELRO_Calibrate+0xcc>)
 8000b72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b76:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <ACCELRO_Calibrate+0xdc>)
 8000b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	bfb8      	it	lt
 8000b80:	4613      	movlt	r3, r2
 8000b82:	b21a      	sxth	r2, r3
 8000b84:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <ACCELRO_Calibrate+0xdc>)
 8000b86:	801a      	strh	r2, [r3, #0]
		min_yval = MIN(min_yval, y);
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <ACCELRO_Calibrate+0xd0>)
 8000b8a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b8e:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <ACCELRO_Calibrate+0xe0>)
 8000b90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b94:	4293      	cmp	r3, r2
 8000b96:	bfa8      	it	ge
 8000b98:	4613      	movge	r3, r2
 8000b9a:	b21a      	sxth	r2, r3
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <ACCELRO_Calibrate+0xe0>)
 8000b9e:	801a      	strh	r2, [r3, #0]
		max_yval = MAX(max_yval, y);
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <ACCELRO_Calibrate+0xd0>)
 8000ba2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <ACCELRO_Calibrate+0xe4>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	4293      	cmp	r3, r2
 8000bae:	bfb8      	it	lt
 8000bb0:	4613      	movlt	r3, r2
 8000bb2:	b21a      	sxth	r2, r3
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <ACCELRO_Calibrate+0xe4>)
 8000bb6:	801a      	strh	r2, [r3, #0]
		HAL_Delay (100);
 8000bb8:	2064      	movs	r0, #100	; 0x64
 8000bba:	f000 fe35 	bl	8001828 <HAL_Delay>
	for (int i=0; i<50; i++)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b31      	cmp	r3, #49	; 0x31
 8000bc8:	ddb4      	ble.n	8000b34 <ACCELRO_Calibrate+0x18>
	}

	/* Turn On the LED to show the completion of calibration */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd0:	4803      	ldr	r0, [pc, #12]	; (8000be0 <ACCELRO_Calibrate+0xc4>)
 8000bd2:	f001 f9f7 	bl	8001fc4 <HAL_GPIO_WritePin>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40020c00 	.word	0x40020c00
 8000be4:	20000720 	.word	0x20000720
 8000be8:	200001b0 	.word	0x200001b0
 8000bec:	200001b2 	.word	0x200001b2
 8000bf0:	200001b4 	.word	0x200001b4
 8000bf4:	20000068 	.word	0x20000068
 8000bf8:	2000006a 	.word	0x2000006a
 8000bfc:	2000006c 	.word	0x2000006c
 8000c00:	2000006e 	.word	0x2000006e

08000c04 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d102      	bne.n	8000c1a <HAL_GPIO_EXTI_Callback+0x16>
	{
		button_flag = 1;
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x24>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]
	}
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	200001ba 	.word	0x200001ba

08000c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c30:	f000 fd88 	bl	8001744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c34:	f000 f8ea 	bl	8000e0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c38:	f000 f9ba 	bl	8000fb0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c3c:	f000 f950 	bl	8000ee0 <MX_SPI1_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000c40:	f000 f984 	bl	8000f4c <MX_USB_OTG_HS_PCD_Init>
  MX_USB_DEVICE_Init();
 8000c44:	f006 fd70 	bl	8007728 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8000c48:	f000 fb98 	bl	800137c <BSP_ACCELERO_Init>
  ACCELRO_Calibrate ();
 8000c4c:	f7ff ff66 	bl	8000b1c <ACCELRO_Calibrate>
  while (1)
   {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSP_ACCELERO_GetXYZ(pDataXYZ);
 8000c50:	4860      	ldr	r0, [pc, #384]	; (8000dd4 <main+0x1a8>)
 8000c52:	f000 fc1f 	bl	8001494 <BSP_ACCELERO_GetXYZ>
	  		x =pDataXYZ[0] ;
 8000c56:	4b5f      	ldr	r3, [pc, #380]	; (8000dd4 <main+0x1a8>)
 8000c58:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c5c:	4b5e      	ldr	r3, [pc, #376]	; (8000dd8 <main+0x1ac>)
 8000c5e:	801a      	strh	r2, [r3, #0]
	  		y = pDataXYZ[1];
 8000c60:	4b5c      	ldr	r3, [pc, #368]	; (8000dd4 <main+0x1a8>)
 8000c62:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000c66:	4b5d      	ldr	r3, [pc, #372]	; (8000ddc <main+0x1b0>)
 8000c68:	801a      	strh	r2, [r3, #0]
	  		z = pDataXYZ[2];
 8000c6a:	4b5a      	ldr	r3, [pc, #360]	; (8000dd4 <main+0x1a8>)
 8000c6c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000c70:	4b5b      	ldr	r3, [pc, #364]	; (8000de0 <main+0x1b4>)
 8000c72:	801a      	strh	r2, [r3, #0]

	  	  if (x < min_xval) newxval = x - min_xval;
 8000c74:	4b58      	ldr	r3, [pc, #352]	; (8000dd8 <main+0x1ac>)
 8000c76:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c7a:	4b5a      	ldr	r3, [pc, #360]	; (8000de4 <main+0x1b8>)
 8000c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	da0c      	bge.n	8000c9e <main+0x72>
 8000c84:	4b54      	ldr	r3, [pc, #336]	; (8000dd8 <main+0x1ac>)
 8000c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b55      	ldr	r3, [pc, #340]	; (8000de4 <main+0x1b8>)
 8000c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	4b53      	ldr	r3, [pc, #332]	; (8000de8 <main+0x1bc>)
 8000c9c:	801a      	strh	r2, [r3, #0]
	  	  if (x > max_xval) newxval = x - max_xval;
 8000c9e:	4b4e      	ldr	r3, [pc, #312]	; (8000dd8 <main+0x1ac>)
 8000ca0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ca4:	4b51      	ldr	r3, [pc, #324]	; (8000dec <main+0x1c0>)
 8000ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	dd0c      	ble.n	8000cc8 <main+0x9c>
 8000cae:	4b4a      	ldr	r3, [pc, #296]	; (8000dd8 <main+0x1ac>)
 8000cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	4b4d      	ldr	r3, [pc, #308]	; (8000dec <main+0x1c0>)
 8000cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	b21a      	sxth	r2, r3
 8000cc4:	4b48      	ldr	r3, [pc, #288]	; (8000de8 <main+0x1bc>)
 8000cc6:	801a      	strh	r2, [r3, #0]
	  	  if (y < min_yval) newyval = y - min_yval;
 8000cc8:	4b44      	ldr	r3, [pc, #272]	; (8000ddc <main+0x1b0>)
 8000cca:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000cce:	4b48      	ldr	r3, [pc, #288]	; (8000df0 <main+0x1c4>)
 8000cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	da0c      	bge.n	8000cf2 <main+0xc6>
 8000cd8:	4b40      	ldr	r3, [pc, #256]	; (8000ddc <main+0x1b0>)
 8000cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	4b43      	ldr	r3, [pc, #268]	; (8000df0 <main+0x1c4>)
 8000ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	b21a      	sxth	r2, r3
 8000cee:	4b41      	ldr	r3, [pc, #260]	; (8000df4 <main+0x1c8>)
 8000cf0:	801a      	strh	r2, [r3, #0]
	  	  if (y > max_yval) newyval = y - max_yval;
 8000cf2:	4b3a      	ldr	r3, [pc, #232]	; (8000ddc <main+0x1b0>)
 8000cf4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000cf8:	4b3f      	ldr	r3, [pc, #252]	; (8000df8 <main+0x1cc>)
 8000cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	dd0c      	ble.n	8000d1c <main+0xf0>
 8000d02:	4b36      	ldr	r3, [pc, #216]	; (8000ddc <main+0x1b0>)
 8000d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	4b3b      	ldr	r3, [pc, #236]	; (8000df8 <main+0x1cc>)
 8000d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	b21a      	sxth	r2, r3
 8000d18:	4b36      	ldr	r3, [pc, #216]	; (8000df4 <main+0x1c8>)
 8000d1a:	801a      	strh	r2, [r3, #0]

	  	  if ((newxval > 20) || (newxval < -20))
 8000d1c:	4b32      	ldr	r3, [pc, #200]	; (8000de8 <main+0x1bc>)
 8000d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d22:	2b14      	cmp	r3, #20
 8000d24:	dc05      	bgt.n	8000d32 <main+0x106>
 8000d26:	4b30      	ldr	r3, [pc, #192]	; (8000de8 <main+0x1bc>)
 8000d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d2c:	f113 0f14 	cmn.w	r3, #20
 8000d30:	da0d      	bge.n	8000d4e <main+0x122>
	  	  {
	  		  mousehid.mouse_y = newxval/12;
 8000d32:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <main+0x1bc>)
 8000d34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d38:	4a30      	ldr	r2, [pc, #192]	; (8000dfc <main+0x1d0>)
 8000d3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d3e:	1052      	asrs	r2, r2, #1
 8000d40:	17db      	asrs	r3, r3, #31
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	b21b      	sxth	r3, r3
 8000d46:	b25a      	sxtb	r2, r3
 8000d48:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <main+0x1d4>)
 8000d4a:	709a      	strb	r2, [r3, #2]
 8000d4c:	e002      	b.n	8000d54 <main+0x128>
	  	  }

	  	  else mousehid.mouse_y = 0;
 8000d4e:	4b2c      	ldr	r3, [pc, #176]	; (8000e00 <main+0x1d4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	709a      	strb	r2, [r3, #2]

	  	  if ((newyval > 20) || (newyval < -20))
 8000d54:	4b27      	ldr	r3, [pc, #156]	; (8000df4 <main+0x1c8>)
 8000d56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d5a:	2b14      	cmp	r3, #20
 8000d5c:	dc05      	bgt.n	8000d6a <main+0x13e>
 8000d5e:	4b25      	ldr	r3, [pc, #148]	; (8000df4 <main+0x1c8>)
 8000d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d64:	f113 0f14 	cmn.w	r3, #20
 8000d68:	da0d      	bge.n	8000d86 <main+0x15a>
	  	  {
	  		  mousehid.mouse_x = newyval/12;
 8000d6a:	4b22      	ldr	r3, [pc, #136]	; (8000df4 <main+0x1c8>)
 8000d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d70:	4a22      	ldr	r2, [pc, #136]	; (8000dfc <main+0x1d0>)
 8000d72:	fb82 1203 	smull	r1, r2, r2, r3
 8000d76:	1052      	asrs	r2, r2, #1
 8000d78:	17db      	asrs	r3, r3, #31
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	b21b      	sxth	r3, r3
 8000d7e:	b25a      	sxtb	r2, r3
 8000d80:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <main+0x1d4>)
 8000d82:	705a      	strb	r2, [r3, #1]
 8000d84:	e002      	b.n	8000d8c <main+0x160>
	  	  }

	  	  else mousehid.mouse_x = 0;
 8000d86:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <main+0x1d4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	705a      	strb	r2, [r3, #1]


 	  if (button_flag == 1)
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <main+0x1d8>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d115      	bne.n	8000dc0 <main+0x194>
 	  {
 		  mousehid.button = 1;  // left click =1, right click =2
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <main+0x1d4>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	701a      	strb	r2, [r3, #0]
 		  USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 8000d9a:	2204      	movs	r2, #4
 8000d9c:	4918      	ldr	r1, [pc, #96]	; (8000e00 <main+0x1d4>)
 8000d9e:	481a      	ldr	r0, [pc, #104]	; (8000e08 <main+0x1dc>)
 8000da0:	f005 f948 	bl	8006034 <USBD_HID_SendReport>
 		  HAL_Delay(50);
 8000da4:	2032      	movs	r0, #50	; 0x32
 8000da6:	f000 fd3f 	bl	8001828 <HAL_Delay>
 		  mousehid.button = 0;  // left click =1, right click =2
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <main+0x1d4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
 		  USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 8000db0:	2204      	movs	r2, #4
 8000db2:	4913      	ldr	r1, [pc, #76]	; (8000e00 <main+0x1d4>)
 8000db4:	4814      	ldr	r0, [pc, #80]	; (8000e08 <main+0x1dc>)
 8000db6:	f005 f93d 	bl	8006034 <USBD_HID_SendReport>
 		  button_flag = 0;
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <main+0x1d8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
 	  }

 	  USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	490f      	ldr	r1, [pc, #60]	; (8000e00 <main+0x1d4>)
 8000dc4:	4810      	ldr	r0, [pc, #64]	; (8000e08 <main+0x1dc>)
 8000dc6:	f005 f935 	bl	8006034 <USBD_HID_SendReport>

 	  HAL_Delay(70);
 8000dca:	2046      	movs	r0, #70	; 0x46
 8000dcc:	f000 fd2c 	bl	8001828 <HAL_Delay>
	  BSP_ACCELERO_GetXYZ(pDataXYZ);
 8000dd0:	e73e      	b.n	8000c50 <main+0x24>
 8000dd2:	bf00      	nop
 8000dd4:	20000720 	.word	0x20000720
 8000dd8:	200001b0 	.word	0x200001b0
 8000ddc:	200001b2 	.word	0x200001b2
 8000de0:	200001b4 	.word	0x200001b4
 8000de4:	20000068 	.word	0x20000068
 8000de8:	200001b6 	.word	0x200001b6
 8000dec:	2000006a 	.word	0x2000006a
 8000df0:	2000006c 	.word	0x2000006c
 8000df4:	200001b8 	.word	0x200001b8
 8000df8:	2000006e 	.word	0x2000006e
 8000dfc:	2aaaaaab 	.word	0x2aaaaaab
 8000e00:	200001ac 	.word	0x200001ac
 8000e04:	200001ba 	.word	0x200001ba
 8000e08:	2000078c 	.word	0x2000078c

08000e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b094      	sub	sp, #80	; 0x50
 8000e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e12:	f107 0320 	add.w	r3, r7, #32
 8000e16:	2230      	movs	r2, #48	; 0x30
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f007 f932 	bl	8008084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	4b28      	ldr	r3, [pc, #160]	; (8000ed8 <SystemClock_Config+0xcc>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	4a27      	ldr	r2, [pc, #156]	; (8000ed8 <SystemClock_Config+0xcc>)
 8000e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e40:	4b25      	ldr	r3, [pc, #148]	; (8000ed8 <SystemClock_Config+0xcc>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	4b22      	ldr	r3, [pc, #136]	; (8000edc <SystemClock_Config+0xd0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a21      	ldr	r2, [pc, #132]	; (8000edc <SystemClock_Config+0xd0>)
 8000e56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <SystemClock_Config+0xd0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e72:	2302      	movs	r3, #2
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000e80:	2348      	movs	r3, #72	; 0x48
 8000e82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8c:	f107 0320 	add.w	r3, r7, #32
 8000e90:	4618      	mov	r0, r3
 8000e92:	f002 fb2f 	bl	80034f4 <HAL_RCC_OscConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e9c:	f000 f900 	bl	80010a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f002 fd90 	bl	80039e4 <HAL_RCC_ClockConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000eca:	f000 f8e9 	bl	80010a0 <Error_Handler>
  }
}
 8000ece:	bf00      	nop
 8000ed0:	3750      	adds	r7, #80	; 0x50
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40007000 	.word	0x40007000

08000ee0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000ee6:	4a18      	ldr	r2, [pc, #96]	; (8000f48 <MX_SPI1_Init+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000eec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ef0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f24:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f2c:	220a      	movs	r2, #10
 8000f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f32:	f002 ff4f 	bl	8003dd4 <HAL_SPI_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f3c:	f000 f8b0 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200001bc 	.word	0x200001bc
 8000f48:	40013000 	.word	0x40013000

08000f4c <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f52:	4a16      	ldr	r2, [pc, #88]	; (8000fac <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000f54:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f58:	2206      	movs	r2, #6
 8000f5a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f5e:	2202      	movs	r2, #2
 8000f60:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f94:	f001 f848 	bl	8002028 <HAL_PCD_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000f9e:	f000 f87f 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000214 	.word	0x20000214
 8000fac:	40040000 	.word	0x40040000

08000fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	4b32      	ldr	r3, [pc, #200]	; (8001094 <MX_GPIO_Init+0xe4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a31      	ldr	r2, [pc, #196]	; (8001094 <MX_GPIO_Init+0xe4>)
 8000fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b2f      	ldr	r3, [pc, #188]	; (8001094 <MX_GPIO_Init+0xe4>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b2b      	ldr	r3, [pc, #172]	; (8001094 <MX_GPIO_Init+0xe4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a2a      	ldr	r2, [pc, #168]	; (8001094 <MX_GPIO_Init+0xe4>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b28      	ldr	r3, [pc, #160]	; (8001094 <MX_GPIO_Init+0xe4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	4b24      	ldr	r3, [pc, #144]	; (8001094 <MX_GPIO_Init+0xe4>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a23      	ldr	r2, [pc, #140]	; (8001094 <MX_GPIO_Init+0xe4>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <MX_GPIO_Init+0xe4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <MX_GPIO_Init+0xe4>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <MX_GPIO_Init+0xe4>)
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <MX_GPIO_Init+0xe4>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103c:	4816      	ldr	r0, [pc, #88]	; (8001098 <MX_GPIO_Init+0xe8>)
 800103e:	f000 ffc1 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001042:	2301      	movs	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001046:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800104a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800104c:	2302      	movs	r3, #2
 800104e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	4811      	ldr	r0, [pc, #68]	; (800109c <MX_GPIO_Init+0xec>)
 8001058:	f000 fd1c 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800105c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	4808      	ldr	r0, [pc, #32]	; (8001098 <MX_GPIO_Init+0xe8>)
 8001076:	f000 fd0d 	bl	8001a94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	2006      	movs	r0, #6
 8001080:	f000 fcd1 	bl	8001a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001084:	2006      	movs	r0, #6
 8001086:	f000 fcea 	bl	8001a5e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800108a:	bf00      	nop
 800108c:	3728      	adds	r7, #40	; 0x28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40020c00 	.word	0x40020c00
 800109c:	40020000 	.word	0x40020000

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <Error_Handler+0x8>
	...

080010ac <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80010b0:	4819      	ldr	r0, [pc, #100]	; (8001118 <SPIx_Init+0x6c>)
 80010b2:	f003 f8e2 	bl	800427a <HAL_SPI_GetState>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d12a      	bne.n	8001112 <SPIx_Init+0x66>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <SPIx_Init+0x6c>)
 80010be:	4a17      	ldr	r2, [pc, #92]	; (800111c <SPIx_Init+0x70>)
 80010c0:	601a      	str	r2, [r3, #0]
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <SPIx_Init+0x6c>)
 80010c4:	2218      	movs	r2, #24
 80010c6:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <SPIx_Init+0x6c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <SPIx_Init+0x6c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <SPIx_Init+0x6c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <SPIx_Init+0x6c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <SPIx_Init+0x6c>)
 80010e2:	2207      	movs	r2, #7
 80010e4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <SPIx_Init+0x6c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <SPIx_Init+0x6c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <SPIx_Init+0x6c>)
 80010f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <SPIx_Init+0x6c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <SPIx_Init+0x6c>)
 8001102:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001106:	605a      	str	r2, [r3, #4]

    SPIx_MspInit();
 8001108:	f000 f836 	bl	8001178 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <SPIx_Init+0x6c>)
 800110e:	f002 fe61 	bl	8003dd4 <HAL_SPI_Init>
  }
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000728 	.word	0x20000728
 800111c:	40013000 	.word	0x40013000

08001120 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af02      	add	r7, sp, #8
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <SPIx_WriteRead+0x38>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f107 020f 	add.w	r2, r7, #15
 8001136:	1df9      	adds	r1, r7, #7
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	4807      	ldr	r0, [pc, #28]	; (800115c <SPIx_WriteRead+0x3c>)
 800113e:	f002 fefa 	bl	8003f36 <HAL_SPI_TransmitReceive>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001148:	f000 f80a 	bl	8001160 <SPIx_Error>
  }
  
  return receivedbyte;
 800114c:	7bfb      	ldrb	r3, [r7, #15]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000070 	.word	0x20000070
 800115c:	20000728 	.word	0x20000728

08001160 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication bus */
  HAL_SPI_DeInit(&SpiHandle);
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <SPIx_Error+0x14>)
 8001166:	f002 febe 	bl	8003ee6 <HAL_SPI_DeInit>
  
  /* Re-Initialize the SPI communication bus */
  SPIx_Init();
 800116a:	f7ff ff9f 	bl	80010ac <SPIx_Init>
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000728 	.word	0x20000728

08001178 <SPIx_MspInit>:

/**
  * @brief  SPI MSP Init.
  */
static void SPIx_MspInit(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable the SPI peripheral */
  DISCOVERY_SPIx_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <SPIx_MspInit+0x68>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a16      	ldr	r2, [pc, #88]	; (80011e0 <SPIx_MspInit+0x68>)
 8001188:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <SPIx_MspInit+0x68>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable SCK, MOSI and MISO GPIO clocks */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <SPIx_MspInit+0x68>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <SPIx_MspInit+0x68>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <SPIx_MspInit+0x68>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
  
  /* SPI SCK, MOSI, MISO pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MISO_PIN | DISCOVERY_SPIx_MOSI_PIN);
 80011b6:	23e0      	movs	r3, #224	; 0xe0
 80011b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 80011be:	2302      	movs	r3, #2
 80011c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80011c2:	2301      	movs	r3, #1
 80011c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80011c6:	2305      	movs	r3, #5
 80011c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	4619      	mov	r1, r3
 80011d0:	4804      	ldr	r0, [pc, #16]	; (80011e4 <SPIx_MspInit+0x6c>)
 80011d2:	f000 fc5f 	bl	8001a94 <HAL_GPIO_Init>
}
 80011d6:	bf00      	nop
 80011d8:	3720      	adds	r7, #32
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020000 	.word	0x40020000

080011e8 <ACCELERO_IO_Init>:

/**
  * @brief  Configures the Accelerometer SPI interface.
  */
void ACCELERO_IO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Accelerometer Control pins --------------------------------*/
  /* Enable CS GPIO clock and configure GPIO pin for Accelerometer Chip select */  
  ACCELERO_CS_GPIO_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <ACCELERO_IO_Init+0x54>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a11      	ldr	r2, [pc, #68]	; (800123c <ACCELERO_IO_Init+0x54>)
 80011f8:	f043 0310 	orr.w	r3, r3, #16
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <ACCELERO_IO_Init+0x54>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PIN for LIS Chip select */
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 800120a:	2308      	movs	r3, #8
 800120c:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800120e:	2301      	movs	r3, #1
 8001210:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001216:	2301      	movs	r3, #1
 8001218:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	4619      	mov	r1, r3
 800121e:	4808      	ldr	r0, [pc, #32]	; (8001240 <ACCELERO_IO_Init+0x58>)
 8001220:	f000 fc38 	bl	8001a94 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  ACCELERO_CS_HIGH();
 8001224:	2201      	movs	r2, #1
 8001226:	2108      	movs	r1, #8
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <ACCELERO_IO_Init+0x58>)
 800122a:	f000 fecb 	bl	8001fc4 <HAL_GPIO_WritePin>
  
  SPIx_Init();
 800122e:	f7ff ff3d 	bl	80010ac <SPIx_Init>
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40021000 	.word	0x40021000

08001244 <ACCELERO_IO_ITConfig>:
/**
  * @brief  Configures the Accelerometer INT2.
  *         EXTI0 is already used by user button so INT1 is not configured here.
  */
void ACCELERO_IO_ITConfig(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT2 GPIO clock and configure GPIO PINs to detect Interrupts */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <ACCELERO_IO_ITConfig+0x58>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <ACCELERO_IO_ITConfig+0x58>)
 8001254:	f043 0310 	orr.w	r3, r3, #16
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <ACCELERO_IO_ITConfig+0x58>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0310 	and.w	r3, r3, #16
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT2_PIN;
 8001266:	2302      	movs	r3, #2
 8001268:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800126a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800126e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001270:	2302      	movs	r3, #2
 8001272:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	4619      	mov	r1, r3
 800127c:	4808      	ldr	r0, [pc, #32]	; (80012a0 <ACCELERO_IO_ITConfig+0x5c>)
 800127e:	f000 fc09 	bl	8001a94 <HAL_GPIO_Init>
  
  /* Enable and set Accelerometer INT2 to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)ACCELERO_INT2_EXTI_IRQn, 0x0F, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	210f      	movs	r1, #15
 8001286:	2007      	movs	r0, #7
 8001288:	f000 fbcd 	bl	8001a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)ACCELERO_INT2_EXTI_IRQn);
 800128c:	2007      	movs	r0, #7
 800128e:	f000 fbe6 	bl	8001a5e <HAL_NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800
 80012a0:	40021000 	.word	0x40021000

080012a4 <ACCELERO_IO_Write>:
  * @param  pBuffer: pointer to the buffer containing the data to be written to the Accelerometer.
  * @param  WriteAddr: Accelerometer's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void ACCELERO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]
 80012b0:	4613      	mov	r3, r2
 80012b2:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80012b4:	883b      	ldrh	r3, [r7, #0]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d903      	bls.n	80012c2 <ACCELERO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80012ba:	78fb      	ldrb	r3, [r7, #3]
 80012bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012c0:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 80012c2:	2200      	movs	r2, #0
 80012c4:	2108      	movs	r1, #8
 80012c6:	480f      	ldr	r0, [pc, #60]	; (8001304 <ACCELERO_IO_Write+0x60>)
 80012c8:	f000 fe7c 	bl	8001fc4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80012cc:	78fb      	ldrb	r3, [r7, #3]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff26 	bl	8001120 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80012d4:	e00a      	b.n	80012ec <ACCELERO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ff20 	bl	8001120 <SPIx_WriteRead>
    NumByteToWrite--;
 80012e0:	883b      	ldrh	r3, [r7, #0]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3301      	adds	r3, #1
 80012ea:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 80012ec:	883b      	ldrh	r3, [r7, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f1      	bne.n	80012d6 <ACCELERO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 80012f2:	2201      	movs	r2, #1
 80012f4:	2108      	movs	r1, #8
 80012f6:	4803      	ldr	r0, [pc, #12]	; (8001304 <ACCELERO_IO_Write+0x60>)
 80012f8:	f000 fe64 	bl	8001fc4 <HAL_GPIO_WritePin>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40021000 	.word	0x40021000

08001308 <ACCELERO_IO_Read>:
  * @param  pBuffer: pointer to the buffer that receives the data read from the Accelerometer.
  * @param  ReadAddr: Accelerometer's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the Accelerometer.
  */
void ACCELERO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	70fb      	strb	r3, [r7, #3]
 8001314:	4613      	mov	r3, r2
 8001316:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8001318:	883b      	ldrh	r3, [r7, #0]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d904      	bls.n	8001328 <ACCELERO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001324:	70fb      	strb	r3, [r7, #3]
 8001326:	e003      	b.n	8001330 <ACCELERO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800132e:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8001330:	2200      	movs	r2, #0
 8001332:	2108      	movs	r1, #8
 8001334:	4810      	ldr	r0, [pc, #64]	; (8001378 <ACCELERO_IO_Read+0x70>)
 8001336:	f000 fe45 	bl	8001fc4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800133a:	78fb      	ldrb	r3, [r7, #3]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff feef 	bl	8001120 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8001342:	e00c      	b.n	800135e <ACCELERO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to ACCELEROMETER (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff feeb 	bl	8001120 <SPIx_WriteRead>
 800134a:	4603      	mov	r3, r0
 800134c:	461a      	mov	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8001352:	883b      	ldrh	r3, [r7, #0]
 8001354:	3b01      	subs	r3, #1
 8001356:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3301      	adds	r3, #1
 800135c:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800135e:	883b      	ldrh	r3, [r7, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1ef      	bne.n	8001344 <ACCELERO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 8001364:	2201      	movs	r2, #1
 8001366:	2108      	movs	r1, #8
 8001368:	4803      	ldr	r0, [pc, #12]	; (8001378 <ACCELERO_IO_Read+0x70>)
 800136a:	f000 fe2b 	bl	8001fc4 <HAL_GPIO_WritePin>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000

0800137c <BSP_ACCELERO_Init>:
/**
  * @brief  Setx Accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{ 
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8001386:	2300      	movs	r3, #0
 8001388:	82bb      	strh	r3, [r7, #20]
  LIS302DL_InitTypeDef         lis302dl_initstruct;
  LIS302DL_FilterConfigTypeDef lis302dl_filter = {0,0,0};
 800138a:	2300      	movs	r3, #0
 800138c:	723b      	strb	r3, [r7, #8]
 800138e:	2300      	movs	r3, #0
 8001390:	727b      	strb	r3, [r7, #9]
 8001392:	2300      	movs	r3, #0
 8001394:	72bb      	strb	r3, [r7, #10]
  LIS3DSH_InitTypeDef          l1s3dsh_InitStruct;

  if(Lis302dlDrv.ReadID() == I_AM_LIS302DL)
 8001396:	4b3c      	ldr	r3, [pc, #240]	; (8001488 <BSP_ACCELERO_Init+0x10c>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	4798      	blx	r3
 800139c:	4603      	mov	r3, r0
 800139e:	2b3b      	cmp	r3, #59	; 0x3b
 80013a0:	d138      	bne.n	8001414 <BSP_ACCELERO_Init+0x98>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis302dlDrv;
 80013a2:	4b3a      	ldr	r3, [pc, #232]	; (800148c <BSP_ACCELERO_Init+0x110>)
 80013a4:	4a38      	ldr	r2, [pc, #224]	; (8001488 <BSP_ACCELERO_Init+0x10c>)
 80013a6:	601a      	str	r2, [r3, #0]

    /* Set configuration of LIS302DL MEMS Accelerometer *********************/
    lis302dl_initstruct.Power_Mode = LIS302DL_LOWPOWERMODE_ACTIVE;
 80013a8:	2340      	movs	r3, #64	; 0x40
 80013aa:	733b      	strb	r3, [r7, #12]
    lis302dl_initstruct.Output_DataRate = LIS302DL_DATARATE_100;
 80013ac:	2300      	movs	r3, #0
 80013ae:	737b      	strb	r3, [r7, #13]
    lis302dl_initstruct.Axes_Enable = LIS302DL_XYZ_ENABLE;
 80013b0:	2307      	movs	r3, #7
 80013b2:	73bb      	strb	r3, [r7, #14]
    lis302dl_initstruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
 80013b4:	2300      	movs	r3, #0
 80013b6:	73fb      	strb	r3, [r7, #15]
    lis302dl_initstruct.Self_Test = LIS302DL_SELFTEST_NORMAL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	743b      	strb	r3, [r7, #16]
    
    /* Configure MEMS: data rate, power mode, full scale, self test and axes */
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 80013bc:	7b7a      	ldrb	r2, [r7, #13]
 80013be:	7b3b      	ldrb	r3, [r7, #12]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 80013c6:	4313      	orrs	r3, r2
 80013c8:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
 80013ca:	7c3b      	ldrb	r3, [r7, #16]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Axes_Enable);
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 80013d2:	4313      	orrs	r3, r2
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	82bb      	strh	r3, [r7, #20]
    
    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 80013d8:	4b2c      	ldr	r3, [pc, #176]	; (800148c <BSP_ACCELERO_Init+0x110>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	8aba      	ldrh	r2, [r7, #20]
 80013e0:	4610      	mov	r0, r2
 80013e2:	4798      	blx	r3
    
    /* MEMS High Pass Filter configuration */
    lis302dl_filter.HighPassFilter_Data_Selection = LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER;
 80013e4:	2320      	movs	r3, #32
 80013e6:	723b      	strb	r3, [r7, #8]
    lis302dl_filter.HighPassFilter_CutOff_Frequency = LIS302DL_HIGHPASSFILTER_LEVEL_1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	727b      	strb	r3, [r7, #9]
    lis302dl_filter.HighPassFilter_Interrupt = LIS302DL_HIGHPASSFILTERINTERRUPT_1_2;
 80013ec:	230c      	movs	r3, #12
 80013ee:	72bb      	strb	r3, [r7, #10]
    
    /* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */                     
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 80013f0:	7a3a      	ldrb	r2, [r7, #8]
                     lis302dl_filter.HighPassFilter_CutOff_Frequency | \
 80013f2:	7a7b      	ldrb	r3, [r7, #9]
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b2da      	uxtb	r2, r3
                     lis302dl_filter.HighPassFilter_Interrupt);
 80013f8:	7abb      	ldrb	r3, [r7, #10]
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AcceleroDrv->FilterConfig(ctrl);
 8001400:	4b22      	ldr	r3, [pc, #136]	; (800148c <BSP_ACCELERO_Init+0x110>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001406:	8aba      	ldrh	r2, [r7, #20]
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	4610      	mov	r0, r2
 800140c:	4798      	blx	r3

    ret = ACCELERO_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	75fb      	strb	r3, [r7, #23]
 8001412:	e034      	b.n	800147e <BSP_ACCELERO_Init+0x102>
  }
  else if(Lis3dshDrv.ReadID() == I_AM_LIS3DSH)
 8001414:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <BSP_ACCELERO_Init+0x114>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	4798      	blx	r3
 800141a:	4603      	mov	r3, r0
 800141c:	2b3f      	cmp	r3, #63	; 0x3f
 800141e:	d12c      	bne.n	800147a <BSP_ACCELERO_Init+0xfe>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis3dshDrv;
 8001420:	4b1a      	ldr	r3, [pc, #104]	; (800148c <BSP_ACCELERO_Init+0x110>)
 8001422:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <BSP_ACCELERO_Init+0x114>)
 8001424:	601a      	str	r2, [r3, #0]

    /* Set configuration of LIS3DSH MEMS Accelerometer **********************/
    l1s3dsh_InitStruct.Output_DataRate = LIS3DSH_DATARATE_100;
 8001426:	2360      	movs	r3, #96	; 0x60
 8001428:	703b      	strb	r3, [r7, #0]
    l1s3dsh_InitStruct.Axes_Enable = LIS3DSH_XYZ_ENABLE;
 800142a:	2307      	movs	r3, #7
 800142c:	707b      	strb	r3, [r7, #1]
    l1s3dsh_InitStruct.SPI_Wire = LIS3DSH_SERIALINTERFACE_4WIRE;
 800142e:	2300      	movs	r3, #0
 8001430:	70bb      	strb	r3, [r7, #2]
    l1s3dsh_InitStruct.Self_Test = LIS3DSH_SELFTEST_NORMAL;
 8001432:	2300      	movs	r3, #0
 8001434:	70fb      	strb	r3, [r7, #3]
    l1s3dsh_InitStruct.Full_Scale = LIS3DSH_FULLSCALE_2;
 8001436:	2300      	movs	r3, #0
 8001438:	713b      	strb	r3, [r7, #4]
    l1s3dsh_InitStruct.Filter_BW = LIS3DSH_FILTER_BW_800;
 800143a:	2300      	movs	r3, #0
 800143c:	717b      	strb	r3, [r7, #5]
    
    /* Configure MEMS: power mode(ODR) and axes enable */
    ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate | \
 800143e:	783a      	ldrb	r2, [r7, #0]
                       l1s3dsh_InitStruct.Axes_Enable);
 8001440:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate | \
 8001442:	4313      	orrs	r3, r2
 8001444:	b2db      	uxtb	r3, r3
 8001446:	82bb      	strh	r3, [r7, #20]
    
    /* Configure MEMS: full scale and self test */
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001448:	78ba      	ldrb	r2, [r7, #2]
                         l1s3dsh_InitStruct.Self_Test   | \
 800144a:	78fb      	ldrb	r3, [r7, #3]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 800144c:	4313      	orrs	r3, r2
 800144e:	b2da      	uxtb	r2, r3
                         l1s3dsh_InitStruct.Full_Scale  | \
 8001450:	793b      	ldrb	r3, [r7, #4]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001452:	4313      	orrs	r3, r2
 8001454:	b2da      	uxtb	r2, r3
                         l1s3dsh_InitStruct.Filter_BW) << 8);
 8001456:	797b      	ldrb	r3, [r7, #5]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001458:	4313      	orrs	r3, r2
 800145a:	b2db      	uxtb	r3, r3
 800145c:	b29b      	uxth	r3, r3
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b29a      	uxth	r2, r3
 8001462:	8abb      	ldrh	r3, [r7, #20]
 8001464:	4313      	orrs	r3, r2
 8001466:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <BSP_ACCELERO_Init+0x110>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	8aba      	ldrh	r2, [r7, #20]
 8001470:	4610      	mov	r0, r2
 8001472:	4798      	blx	r3
    
    ret = ACCELERO_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	75fb      	strb	r3, [r7, #23]
 8001478:	e001      	b.n	800147e <BSP_ACCELERO_Init+0x102>
  }

  else
  {
    ret = ACCELERO_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 800147e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000000 	.word	0x20000000
 800148c:	20000780 	.word	0x20000780
 8001490:	20000034 	.word	0x20000034

08001494 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.  
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	81fb      	strh	r3, [r7, #14]
  
  if(AcceleroDrv->GetXYZ != NULL)
 80014a0:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <BSP_ACCELERO_GetXYZ+0x50>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d018      	beq.n	80014dc <BSP_ACCELERO_GetXYZ+0x48>
  {   
    AcceleroDrv->GetXYZ(pDataXYZ);
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <BSP_ACCELERO_GetXYZ+0x50>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	4798      	blx	r3
    
    /* Switch X and Y Axes in case of LIS302DL MEMS */
    if(AcceleroDrv == &Lis302dlDrv)
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <BSP_ACCELERO_GetXYZ+0x50>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <BSP_ACCELERO_GetXYZ+0x54>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d10e      	bne.n	80014dc <BSP_ACCELERO_GetXYZ+0x48>
    { 
      SwitchXY  = pDataXYZ[0];
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	801a      	strh	r2, [r3, #0]
      /* Invert Y Axis to be compliant with LIS3DSH MEMS */
      pDataXYZ[1] = -SwitchXY;
 80014ce:	89fb      	ldrh	r3, [r7, #14]
 80014d0:	425b      	negs	r3, r3
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3302      	adds	r3, #2
 80014d8:	b212      	sxth	r2, r2
 80014da:	801a      	strh	r2, [r3, #0]
    } 
  }
}
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000780 	.word	0x20000780
 80014e8:	20000000 	.word	0x20000000

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_MspInit+0x4c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <HAL_MspInit+0x4c>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001500:	6453      	str	r3, [r2, #68]	; 0x44
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_MspInit+0x4c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_MspInit+0x4c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a08      	ldr	r2, [pc, #32]	; (8001538 <HAL_MspInit+0x4c>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_MspInit+0x4c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800152a:	2007      	movs	r0, #7
 800152c:	f000 fa70 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800

0800153c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a28      	ldr	r2, [pc, #160]	; (80015fc <HAL_SPI_MspInit+0xc0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d149      	bne.n	80015f2 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b27      	ldr	r3, [pc, #156]	; (8001600 <HAL_SPI_MspInit+0xc4>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	4a26      	ldr	r2, [pc, #152]	; (8001600 <HAL_SPI_MspInit+0xc4>)
 8001568:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800156c:	6453      	str	r3, [r2, #68]	; 0x44
 800156e:	4b24      	ldr	r3, [pc, #144]	; (8001600 <HAL_SPI_MspInit+0xc4>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b20      	ldr	r3, [pc, #128]	; (8001600 <HAL_SPI_MspInit+0xc4>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a1f      	ldr	r2, [pc, #124]	; (8001600 <HAL_SPI_MspInit+0xc4>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <HAL_SPI_MspInit+0xc4>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_SPI_MspInit+0xc4>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a18      	ldr	r2, [pc, #96]	; (8001600 <HAL_SPI_MspInit+0xc4>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <HAL_SPI_MspInit+0xc4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015b2:	23c0      	movs	r3, #192	; 0xc0
 80015b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015c2:	2305      	movs	r3, #5
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	480d      	ldr	r0, [pc, #52]	; (8001604 <HAL_SPI_MspInit+0xc8>)
 80015ce:	f000 fa61 	bl	8001a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015d2:	2308      	movs	r3, #8
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015e2:	2305      	movs	r3, #5
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	4806      	ldr	r0, [pc, #24]	; (8001608 <HAL_SPI_MspInit+0xcc>)
 80015ee:	f000 fa51 	bl	8001a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015f2:	bf00      	nop
 80015f4:	3728      	adds	r7, #40	; 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40013000 	.word	0x40013000
 8001600:	40023800 	.word	0x40023800
 8001604:	40020000 	.word	0x40020000
 8001608:	40020400 	.word	0x40020400

0800160c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <HAL_SPI_MspDeInit+0x38>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d10d      	bne.n	800163a <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_SPI_MspDeInit+0x3c>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	4a09      	ldr	r2, [pc, #36]	; (8001648 <HAL_SPI_MspDeInit+0x3c>)
 8001624:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001628:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 800162a:	21c0      	movs	r1, #192	; 0xc0
 800162c:	4807      	ldr	r0, [pc, #28]	; (800164c <HAL_SPI_MspDeInit+0x40>)
 800162e:	f000 fbcd 	bl	8001dcc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 8001632:	2108      	movs	r1, #8
 8001634:	4806      	ldr	r0, [pc, #24]	; (8001650 <HAL_SPI_MspDeInit+0x44>)
 8001636:	f000 fbc9 	bl	8001dcc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40013000 	.word	0x40013000
 8001648:	40023800 	.word	0x40023800
 800164c:	40020000 	.word	0x40020000
 8001650:	40020400 	.word	0x40020400

08001654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <NMI_Handler+0x4>

0800165a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <HardFault_Handler+0x4>

08001660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <MemManage_Handler+0x4>

08001666 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <BusFault_Handler+0x4>

0800166c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <UsageFault_Handler+0x4>

08001672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a0:	f000 f8a2 	bl	80017e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80016ac:	2001      	movs	r0, #1
 80016ae:	f000 fca3 	bl	8001ff8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <OTG_FS_IRQHandler+0x10>)
 80016be:	f000 fe03 	bl	80022c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000c68 	.word	0x20000c68

080016cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <SystemInit+0x20>)
 80016d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016d6:	4a05      	ldr	r2, [pc, #20]	; (80016ec <SystemInit+0x20>)
 80016d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001728 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f4:	480d      	ldr	r0, [pc, #52]	; (800172c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016f6:	490e      	ldr	r1, [pc, #56]	; (8001730 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016f8:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016fc:	e002      	b.n	8001704 <LoopCopyDataInit>

080016fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001702:	3304      	adds	r3, #4

08001704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001708:	d3f9      	bcc.n	80016fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170a:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800170c:	4c0b      	ldr	r4, [pc, #44]	; (800173c <LoopFillZerobss+0x26>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001710:	e001      	b.n	8001716 <LoopFillZerobss>

08001712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001714:	3204      	adds	r2, #4

08001716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001718:	d3fb      	bcc.n	8001712 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800171a:	f7ff ffd7 	bl	80016cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800171e:	f006 fc8d 	bl	800803c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001722:	f7ff fa83 	bl	8000c2c <main>
  bx  lr    
 8001726:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001728:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800172c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001730:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001734:	08008108 	.word	0x08008108
  ldr r2, =_sbss
 8001738:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 800173c:	20001188 	.word	0x20001188

08001740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC_IRQHandler>
	...

08001744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <HAL_Init+0x40>)
 800174e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001752:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <HAL_Init+0x40>)
 800175a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800175e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a07      	ldr	r2, [pc, #28]	; (8001784 <HAL_Init+0x40>)
 8001766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176c:	2003      	movs	r0, #3
 800176e:	f000 f94f 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001772:	2000      	movs	r0, #0
 8001774:	f000 f808 	bl	8001788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001778:	f7ff feb8 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023c00 	.word	0x40023c00

08001788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_InitTick+0x54>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_InitTick+0x58>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179e:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f967 	bl	8001a7a <HAL_SYSTICK_Config>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00e      	b.n	80017d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b0f      	cmp	r3, #15
 80017ba:	d80a      	bhi.n	80017d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017bc:	2200      	movs	r2, #0
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f000 f92f 	bl	8001a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c8:	4a06      	ldr	r2, [pc, #24]	; (80017e4 <HAL_InitTick+0x5c>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e000      	b.n	80017d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000074 	.word	0x20000074
 80017e0:	2000007c 	.word	0x2000007c
 80017e4:	20000078 	.word	0x20000078

080017e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_IncTick+0x20>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x24>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <HAL_IncTick+0x24>)
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	2000007c 	.word	0x2000007c
 800180c:	20000784 	.word	0x20000784

08001810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return uwTick;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_GetTick+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000784 	.word	0x20000784

08001828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff ffee 	bl	8001810 <HAL_GetTick>
 8001834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001840:	d005      	beq.n	800184e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_Delay+0x44>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800184e:	bf00      	nop
 8001850:	f7ff ffde 	bl	8001810 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	d8f7      	bhi.n	8001850 <HAL_Delay+0x28>
  {
  }
}
 8001860:	bf00      	nop
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	2000007c 	.word	0x2000007c

08001870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800188c:	4013      	ands	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800189c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a2:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	60d3      	str	r3, [r2, #12]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <__NVIC_GetPriorityGrouping+0x18>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	f003 0307 	and.w	r3, r3, #7
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	db0b      	blt.n	80018fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	f003 021f 	and.w	r2, r3, #31
 80018ec:	4907      	ldr	r1, [pc, #28]	; (800190c <__NVIC_EnableIRQ+0x38>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	2001      	movs	r0, #1
 80018f6:	fa00 f202 	lsl.w	r2, r0, r2
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000e100 	.word	0xe000e100

08001910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db0a      	blt.n	800193a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	490c      	ldr	r1, [pc, #48]	; (800195c <__NVIC_SetPriority+0x4c>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	440b      	add	r3, r1
 8001934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001938:	e00a      	b.n	8001950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4908      	ldr	r1, [pc, #32]	; (8001960 <__NVIC_SetPriority+0x50>)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	3b04      	subs	r3, #4
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	440b      	add	r3, r1
 800194e:	761a      	strb	r2, [r3, #24]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f1c3 0307 	rsb	r3, r3, #7
 800197e:	2b04      	cmp	r3, #4
 8001980:	bf28      	it	cs
 8001982:	2304      	movcs	r3, #4
 8001984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3304      	adds	r3, #4
 800198a:	2b06      	cmp	r3, #6
 800198c:	d902      	bls.n	8001994 <NVIC_EncodePriority+0x30>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3b03      	subs	r3, #3
 8001992:	e000      	b.n	8001996 <NVIC_EncodePriority+0x32>
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	f04f 32ff 	mov.w	r2, #4294967295
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	401a      	ands	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	43d9      	mvns	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	4313      	orrs	r3, r2
         );
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3724      	adds	r7, #36	; 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019dc:	d301      	bcc.n	80019e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019de:	2301      	movs	r3, #1
 80019e0:	e00f      	b.n	8001a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e2:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <SysTick_Config+0x40>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ea:	210f      	movs	r1, #15
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	f7ff ff8e 	bl	8001910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <SysTick_Config+0x40>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <SysTick_Config+0x40>)
 80019fc:	2207      	movs	r2, #7
 80019fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	e000e010 	.word	0xe000e010

08001a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff29 	bl	8001870 <__NVIC_SetPriorityGrouping>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a38:	f7ff ff3e 	bl	80018b8 <__NVIC_GetPriorityGrouping>
 8001a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	6978      	ldr	r0, [r7, #20]
 8001a44:	f7ff ff8e 	bl	8001964 <NVIC_EncodePriority>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff5d 	bl	8001910 <__NVIC_SetPriority>
}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff31 	bl	80018d4 <__NVIC_EnableIRQ>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ffa2 	bl	80019cc <SysTick_Config>
 8001a88:	4603      	mov	r3, r0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	; 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	e16b      	b.n	8001d88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	f040 815a 	bne.w	8001d82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d005      	beq.n	8001ae6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d130      	bne.n	8001b48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	2203      	movs	r2, #3
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 0201 	and.w	r2, r3, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d017      	beq.n	8001b84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d123      	bne.n	8001bd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	08da      	lsrs	r2, r3, #3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3208      	adds	r2, #8
 8001b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	08da      	lsrs	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3208      	adds	r2, #8
 8001bd2:	69b9      	ldr	r1, [r7, #24]
 8001bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0203 	and.w	r2, r3, #3
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80b4 	beq.w	8001d82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b60      	ldr	r3, [pc, #384]	; (8001da0 <HAL_GPIO_Init+0x30c>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	4a5f      	ldr	r2, [pc, #380]	; (8001da0 <HAL_GPIO_Init+0x30c>)
 8001c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c28:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2a:	4b5d      	ldr	r3, [pc, #372]	; (8001da0 <HAL_GPIO_Init+0x30c>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c36:	4a5b      	ldr	r2, [pc, #364]	; (8001da4 <HAL_GPIO_Init+0x310>)
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	220f      	movs	r2, #15
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a52      	ldr	r2, [pc, #328]	; (8001da8 <HAL_GPIO_Init+0x314>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d02b      	beq.n	8001cba <HAL_GPIO_Init+0x226>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a51      	ldr	r2, [pc, #324]	; (8001dac <HAL_GPIO_Init+0x318>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d025      	beq.n	8001cb6 <HAL_GPIO_Init+0x222>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a50      	ldr	r2, [pc, #320]	; (8001db0 <HAL_GPIO_Init+0x31c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d01f      	beq.n	8001cb2 <HAL_GPIO_Init+0x21e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4f      	ldr	r2, [pc, #316]	; (8001db4 <HAL_GPIO_Init+0x320>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d019      	beq.n	8001cae <HAL_GPIO_Init+0x21a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4e      	ldr	r2, [pc, #312]	; (8001db8 <HAL_GPIO_Init+0x324>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_GPIO_Init+0x216>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4d      	ldr	r2, [pc, #308]	; (8001dbc <HAL_GPIO_Init+0x328>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00d      	beq.n	8001ca6 <HAL_GPIO_Init+0x212>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4c      	ldr	r2, [pc, #304]	; (8001dc0 <HAL_GPIO_Init+0x32c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d007      	beq.n	8001ca2 <HAL_GPIO_Init+0x20e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a4b      	ldr	r2, [pc, #300]	; (8001dc4 <HAL_GPIO_Init+0x330>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d101      	bne.n	8001c9e <HAL_GPIO_Init+0x20a>
 8001c9a:	2307      	movs	r3, #7
 8001c9c:	e00e      	b.n	8001cbc <HAL_GPIO_Init+0x228>
 8001c9e:	2308      	movs	r3, #8
 8001ca0:	e00c      	b.n	8001cbc <HAL_GPIO_Init+0x228>
 8001ca2:	2306      	movs	r3, #6
 8001ca4:	e00a      	b.n	8001cbc <HAL_GPIO_Init+0x228>
 8001ca6:	2305      	movs	r3, #5
 8001ca8:	e008      	b.n	8001cbc <HAL_GPIO_Init+0x228>
 8001caa:	2304      	movs	r3, #4
 8001cac:	e006      	b.n	8001cbc <HAL_GPIO_Init+0x228>
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e004      	b.n	8001cbc <HAL_GPIO_Init+0x228>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e002      	b.n	8001cbc <HAL_GPIO_Init+0x228>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <HAL_GPIO_Init+0x228>
 8001cba:	2300      	movs	r3, #0
 8001cbc:	69fa      	ldr	r2, [r7, #28]
 8001cbe:	f002 0203 	and.w	r2, r2, #3
 8001cc2:	0092      	lsls	r2, r2, #2
 8001cc4:	4093      	lsls	r3, r2
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ccc:	4935      	ldr	r1, [pc, #212]	; (8001da4 <HAL_GPIO_Init+0x310>)
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	089b      	lsrs	r3, r3, #2
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cda:	4b3b      	ldr	r3, [pc, #236]	; (8001dc8 <HAL_GPIO_Init+0x334>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cfe:	4a32      	ldr	r2, [pc, #200]	; (8001dc8 <HAL_GPIO_Init+0x334>)
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d04:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <HAL_GPIO_Init+0x334>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d28:	4a27      	ldr	r2, [pc, #156]	; (8001dc8 <HAL_GPIO_Init+0x334>)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d2e:	4b26      	ldr	r3, [pc, #152]	; (8001dc8 <HAL_GPIO_Init+0x334>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d52:	4a1d      	ldr	r2, [pc, #116]	; (8001dc8 <HAL_GPIO_Init+0x334>)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_GPIO_Init+0x334>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d7c:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <HAL_GPIO_Init+0x334>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3301      	adds	r3, #1
 8001d86:	61fb      	str	r3, [r7, #28]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	2b0f      	cmp	r3, #15
 8001d8c:	f67f ae90 	bls.w	8001ab0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	3724      	adds	r7, #36	; 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40013800 	.word	0x40013800
 8001da8:	40020000 	.word	0x40020000
 8001dac:	40020400 	.word	0x40020400
 8001db0:	40020800 	.word	0x40020800
 8001db4:	40020c00 	.word	0x40020c00
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40021400 	.word	0x40021400
 8001dc0:	40021800 	.word	0x40021800
 8001dc4:	40021c00 	.word	0x40021c00
 8001dc8:	40013c00 	.word	0x40013c00

08001dcc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	e0cd      	b.n	8001f84 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001de8:	2201      	movs	r2, #1
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	f040 80bd 	bne.w	8001f7e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001e04:	4a65      	ldr	r2, [pc, #404]	; (8001f9c <HAL_GPIO_DeInit+0x1d0>)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e10:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	220f      	movs	r2, #15
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	4013      	ands	r3, r2
 8001e24:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a5d      	ldr	r2, [pc, #372]	; (8001fa0 <HAL_GPIO_DeInit+0x1d4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d02b      	beq.n	8001e86 <HAL_GPIO_DeInit+0xba>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a5c      	ldr	r2, [pc, #368]	; (8001fa4 <HAL_GPIO_DeInit+0x1d8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d025      	beq.n	8001e82 <HAL_GPIO_DeInit+0xb6>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a5b      	ldr	r2, [pc, #364]	; (8001fa8 <HAL_GPIO_DeInit+0x1dc>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d01f      	beq.n	8001e7e <HAL_GPIO_DeInit+0xb2>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a5a      	ldr	r2, [pc, #360]	; (8001fac <HAL_GPIO_DeInit+0x1e0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d019      	beq.n	8001e7a <HAL_GPIO_DeInit+0xae>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a59      	ldr	r2, [pc, #356]	; (8001fb0 <HAL_GPIO_DeInit+0x1e4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d013      	beq.n	8001e76 <HAL_GPIO_DeInit+0xaa>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a58      	ldr	r2, [pc, #352]	; (8001fb4 <HAL_GPIO_DeInit+0x1e8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d00d      	beq.n	8001e72 <HAL_GPIO_DeInit+0xa6>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a57      	ldr	r2, [pc, #348]	; (8001fb8 <HAL_GPIO_DeInit+0x1ec>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d007      	beq.n	8001e6e <HAL_GPIO_DeInit+0xa2>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a56      	ldr	r2, [pc, #344]	; (8001fbc <HAL_GPIO_DeInit+0x1f0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d101      	bne.n	8001e6a <HAL_GPIO_DeInit+0x9e>
 8001e66:	2307      	movs	r3, #7
 8001e68:	e00e      	b.n	8001e88 <HAL_GPIO_DeInit+0xbc>
 8001e6a:	2308      	movs	r3, #8
 8001e6c:	e00c      	b.n	8001e88 <HAL_GPIO_DeInit+0xbc>
 8001e6e:	2306      	movs	r3, #6
 8001e70:	e00a      	b.n	8001e88 <HAL_GPIO_DeInit+0xbc>
 8001e72:	2305      	movs	r3, #5
 8001e74:	e008      	b.n	8001e88 <HAL_GPIO_DeInit+0xbc>
 8001e76:	2304      	movs	r3, #4
 8001e78:	e006      	b.n	8001e88 <HAL_GPIO_DeInit+0xbc>
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e004      	b.n	8001e88 <HAL_GPIO_DeInit+0xbc>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e002      	b.n	8001e88 <HAL_GPIO_DeInit+0xbc>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <HAL_GPIO_DeInit+0xbc>
 8001e86:	2300      	movs	r3, #0
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	f002 0203 	and.w	r2, r2, #3
 8001e8e:	0092      	lsls	r2, r2, #2
 8001e90:	4093      	lsls	r3, r2
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d132      	bne.n	8001efe <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001e98:	4b49      	ldr	r3, [pc, #292]	; (8001fc0 <HAL_GPIO_DeInit+0x1f4>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	4947      	ldr	r1, [pc, #284]	; (8001fc0 <HAL_GPIO_DeInit+0x1f4>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001ea6:	4b46      	ldr	r3, [pc, #280]	; (8001fc0 <HAL_GPIO_DeInit+0x1f4>)
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	4944      	ldr	r1, [pc, #272]	; (8001fc0 <HAL_GPIO_DeInit+0x1f4>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001eb4:	4b42      	ldr	r3, [pc, #264]	; (8001fc0 <HAL_GPIO_DeInit+0x1f4>)
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	4940      	ldr	r1, [pc, #256]	; (8001fc0 <HAL_GPIO_DeInit+0x1f4>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001ec2:	4b3f      	ldr	r3, [pc, #252]	; (8001fc0 <HAL_GPIO_DeInit+0x1f4>)
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	493d      	ldr	r1, [pc, #244]	; (8001fc0 <HAL_GPIO_DeInit+0x1f4>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	220f      	movs	r2, #15
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001ee0:	4a2e      	ldr	r2, [pc, #184]	; (8001f9c <HAL_GPIO_DeInit+0x1d0>)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	089b      	lsrs	r3, r3, #2
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	482a      	ldr	r0, [pc, #168]	; (8001f9c <HAL_GPIO_DeInit+0x1d0>)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	089b      	lsrs	r3, r3, #2
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	3302      	adds	r3, #2
 8001efa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2103      	movs	r1, #3
 8001f08:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	401a      	ands	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	08da      	lsrs	r2, r3, #3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3208      	adds	r2, #8
 8001f1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	220f      	movs	r2, #15
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	08d2      	lsrs	r2, r2, #3
 8001f34:	4019      	ands	r1, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3208      	adds	r2, #8
 8001f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2103      	movs	r1, #3
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	401a      	ands	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	401a      	ands	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	2103      	movs	r1, #3
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	401a      	ands	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3301      	adds	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2b0f      	cmp	r3, #15
 8001f88:	f67f af2e 	bls.w	8001de8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	371c      	adds	r7, #28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40013800 	.word	0x40013800
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	40020400 	.word	0x40020400
 8001fa8:	40020800 	.word	0x40020800
 8001fac:	40020c00 	.word	0x40020c00
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40021400 	.word	0x40021400
 8001fb8:	40021800 	.word	0x40021800
 8001fbc:	40021c00 	.word	0x40021c00
 8001fc0:	40013c00 	.word	0x40013c00

08001fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd4:	787b      	ldrb	r3, [r7, #1]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fe0:	e003      	b.n	8001fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fe2:	887b      	ldrh	r3, [r7, #2]
 8001fe4:	041a      	lsls	r2, r3, #16
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	619a      	str	r2, [r3, #24]
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002002:	4b08      	ldr	r3, [pc, #32]	; (8002024 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	4013      	ands	r3, r2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d006      	beq.n	800201c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fdf4 	bl	8000c04 <HAL_GPIO_EXTI_Callback>
  }
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40013c00 	.word	0x40013c00

08002028 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800202a:	b08f      	sub	sp, #60	; 0x3c
 800202c:	af0a      	add	r7, sp, #40	; 0x28
 800202e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e10f      	b.n	800225a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d106      	bne.n	800205a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f005 fc9d 	bl	8007994 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2203      	movs	r2, #3
 800205e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206a:	2b00      	cmp	r3, #0
 800206c:	d102      	bne.n	8002074 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f002 faec 	bl	8004656 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	687e      	ldr	r6, [r7, #4]
 8002086:	466d      	mov	r5, sp
 8002088:	f106 0410 	add.w	r4, r6, #16
 800208c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800208e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002094:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002098:	e885 0003 	stmia.w	r5, {r0, r1}
 800209c:	1d33      	adds	r3, r6, #4
 800209e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020a0:	6838      	ldr	r0, [r7, #0]
 80020a2:	f002 f9c3 	bl	800442c <USB_CoreInit>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0d0      	b.n	800225a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2100      	movs	r1, #0
 80020be:	4618      	mov	r0, r3
 80020c0:	f002 fada 	bl	8004678 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	73fb      	strb	r3, [r7, #15]
 80020c8:	e04a      	b.n	8002160 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	333d      	adds	r3, #61	; 0x3d
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	333c      	adds	r3, #60	; 0x3c
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	b298      	uxth	r0, r3
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	3344      	adds	r3, #68	; 0x44
 8002106:	4602      	mov	r2, r0
 8002108:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800210a:	7bfa      	ldrb	r2, [r7, #15]
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	440b      	add	r3, r1
 8002118:	3340      	adds	r3, #64	; 0x40
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800211e:	7bfa      	ldrb	r2, [r7, #15]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	3348      	adds	r3, #72	; 0x48
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002132:	7bfa      	ldrb	r2, [r7, #15]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4413      	add	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	334c      	adds	r3, #76	; 0x4c
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002146:	7bfa      	ldrb	r2, [r7, #15]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	3354      	adds	r3, #84	; 0x54
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	3301      	adds	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	429a      	cmp	r2, r3
 8002168:	d3af      	bcc.n	80020ca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800216a:	2300      	movs	r3, #0
 800216c:	73fb      	strb	r3, [r7, #15]
 800216e:	e044      	b.n	80021fa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002170:	7bfa      	ldrb	r2, [r7, #15]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002186:	7bfa      	ldrb	r2, [r7, #15]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800219c:	7bfa      	ldrb	r2, [r7, #15]
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021c8:	7bfa      	ldrb	r2, [r7, #15]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4413      	add	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	3301      	adds	r3, #1
 80021f8:	73fb      	strb	r3, [r7, #15]
 80021fa:	7bfa      	ldrb	r2, [r7, #15]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	429a      	cmp	r2, r3
 8002202:	d3b5      	bcc.n	8002170 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	687e      	ldr	r6, [r7, #4]
 800220c:	466d      	mov	r5, sp
 800220e:	f106 0410 	add.w	r4, r6, #16
 8002212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800221a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800221e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002222:	1d33      	adds	r3, r6, #4
 8002224:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002226:	6838      	ldr	r0, [r7, #0]
 8002228:	f002 fa72 	bl	8004710 <USB_DevInit>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2202      	movs	r2, #2
 8002236:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e00d      	b.n	800225a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f003 fbc1 	bl	80059da <USB_DevDisconnect>

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002262 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_PCD_Start+0x1c>
 800227a:	2302      	movs	r3, #2
 800227c:	e020      	b.n	80022c0 <HAL_PCD_Start+0x5e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228a:	2b01      	cmp	r3, #1
 800228c:	d109      	bne.n	80022a2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002292:	2b01      	cmp	r3, #1
 8002294:	d005      	beq.n	80022a2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f002 f9c4 	bl	8004634 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f003 fb71 	bl	8005998 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022c8:	b590      	push	{r4, r7, lr}
 80022ca:	b08d      	sub	sp, #52	; 0x34
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f003 fc2f 	bl	8005b42 <USB_GetMode>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 848a 	bne.w	8002c00 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f003 fb93 	bl	8005a1c <USB_ReadInterrupts>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 8480 	beq.w	8002bfe <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	0a1b      	lsrs	r3, r3, #8
 8002308:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f003 fb80 	bl	8005a1c <USB_ReadInterrupts>
 800231c:	4603      	mov	r3, r0
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b02      	cmp	r3, #2
 8002324:	d107      	bne.n	8002336 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f002 0202 	and.w	r2, r2, #2
 8002334:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f003 fb6e 	bl	8005a1c <USB_ReadInterrupts>
 8002340:	4603      	mov	r3, r0
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b10      	cmp	r3, #16
 8002348:	d161      	bne.n	800240e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699a      	ldr	r2, [r3, #24]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0210 	bic.w	r2, r2, #16
 8002358:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	f003 020f 	and.w	r2, r3, #15
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	3304      	adds	r3, #4
 8002378:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	0c5b      	lsrs	r3, r3, #17
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	2b02      	cmp	r3, #2
 8002384:	d124      	bne.n	80023d0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d035      	beq.n	80023fe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800239c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	461a      	mov	r2, r3
 80023a4:	6a38      	ldr	r0, [r7, #32]
 80023a6:	f003 f9a5 	bl	80056f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	091b      	lsrs	r3, r3, #4
 80023b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023b6:	441a      	add	r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	6a1a      	ldr	r2, [r3, #32]
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	091b      	lsrs	r3, r3, #4
 80023c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023c8:	441a      	add	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	621a      	str	r2, [r3, #32]
 80023ce:	e016      	b.n	80023fe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	0c5b      	lsrs	r3, r3, #17
 80023d4:	f003 030f 	and.w	r3, r3, #15
 80023d8:	2b06      	cmp	r3, #6
 80023da:	d110      	bne.n	80023fe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023e2:	2208      	movs	r2, #8
 80023e4:	4619      	mov	r1, r3
 80023e6:	6a38      	ldr	r0, [r7, #32]
 80023e8:	f003 f984 	bl	80056f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	6a1a      	ldr	r2, [r3, #32]
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023f8:	441a      	add	r2, r3
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699a      	ldr	r2, [r3, #24]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0210 	orr.w	r2, r2, #16
 800240c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f003 fb02 	bl	8005a1c <USB_ReadInterrupts>
 8002418:	4603      	mov	r3, r0
 800241a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800241e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002422:	f040 80a7 	bne.w	8002574 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f003 fb07 	bl	8005a42 <USB_ReadDevAllOutEpInterrupt>
 8002434:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002436:	e099      	b.n	800256c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 808e 	beq.w	8002560 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	4611      	mov	r1, r2
 800244e:	4618      	mov	r0, r3
 8002450:	f003 fb2b 	bl	8005aaa <USB_ReadDevOutEPInterrupt>
 8002454:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00c      	beq.n	800247a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	4413      	add	r3, r2
 8002468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800246c:	461a      	mov	r2, r3
 800246e:	2301      	movs	r3, #1
 8002470:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002472:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 feab 	bl	80031d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00c      	beq.n	800249e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	4413      	add	r3, r2
 800248c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002490:	461a      	mov	r2, r3
 8002492:	2308      	movs	r3, #8
 8002494:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002496:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 ff81 	bl	80033a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b4:	461a      	mov	r2, r3
 80024b6:	2310      	movs	r3, #16
 80024b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d030      	beq.n	8002526 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024cc:	2b80      	cmp	r3, #128	; 0x80
 80024ce:	d109      	bne.n	80024e4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	69fa      	ldr	r2, [r7, #28]
 80024da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024e2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80024e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	3304      	adds	r3, #4
 80024f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	78db      	ldrb	r3, [r3, #3]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d108      	bne.n	8002514 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2200      	movs	r2, #0
 8002506:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	b2db      	uxtb	r3, r3
 800250c:	4619      	mov	r1, r3
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f005 fb98 	bl	8007c44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	4413      	add	r3, r2
 800251c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002520:	461a      	mov	r2, r3
 8002522:	2302      	movs	r3, #2
 8002524:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	4413      	add	r3, r2
 8002538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800253c:	461a      	mov	r2, r3
 800253e:	2320      	movs	r3, #32
 8002540:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d009      	beq.n	8002560 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	4413      	add	r3, r2
 8002554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002558:	461a      	mov	r2, r3
 800255a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800255e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	3301      	adds	r3, #1
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002568:	085b      	lsrs	r3, r3, #1
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800256c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256e:	2b00      	cmp	r3, #0
 8002570:	f47f af62 	bne.w	8002438 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f003 fa4f 	bl	8005a1c <USB_ReadInterrupts>
 800257e:	4603      	mov	r3, r0
 8002580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002584:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002588:	f040 80db 	bne.w	8002742 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f003 fa70 	bl	8005a76 <USB_ReadDevAllInEpInterrupt>
 8002596:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800259c:	e0cd      	b.n	800273a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800259e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80c2 	beq.w	800272e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f003 fa96 	bl	8005ae6 <USB_ReadDevInEPInterrupt>
 80025ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d057      	beq.n	8002676 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	2201      	movs	r2, #1
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	43db      	mvns	r3, r3
 80025e0:	69f9      	ldr	r1, [r7, #28]
 80025e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025e6:	4013      	ands	r3, r2
 80025e8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025f6:	461a      	mov	r2, r3
 80025f8:	2301      	movs	r3, #1
 80025fa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d132      	bne.n	800266a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002608:	4613      	mov	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4413      	add	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	334c      	adds	r3, #76	; 0x4c
 8002614:	6819      	ldr	r1, [r3, #0]
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261a:	4613      	mov	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4413      	add	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4403      	add	r3, r0
 8002624:	3348      	adds	r3, #72	; 0x48
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4419      	add	r1, r3
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262e:	4613      	mov	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4403      	add	r3, r0
 8002638:	334c      	adds	r3, #76	; 0x4c
 800263a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	2b00      	cmp	r3, #0
 8002640:	d113      	bne.n	800266a <HAL_PCD_IRQHandler+0x3a2>
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002646:	4613      	mov	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	3354      	adds	r3, #84	; 0x54
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d108      	bne.n	800266a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002662:	461a      	mov	r2, r3
 8002664:	2101      	movs	r1, #1
 8002666:	f003 fa9d 	bl	8005ba4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	b2db      	uxtb	r3, r3
 800266e:	4619      	mov	r1, r3
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f005 fa62 	bl	8007b3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	4413      	add	r3, r2
 8002688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800268c:	461a      	mov	r2, r3
 800268e:	2308      	movs	r3, #8
 8002690:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026a8:	461a      	mov	r2, r3
 80026aa:	2310      	movs	r3, #16
 80026ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026c4:	461a      	mov	r2, r3
 80026c6:	2340      	movs	r3, #64	; 0x40
 80026c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d023      	beq.n	800271c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026d6:	6a38      	ldr	r0, [r7, #32]
 80026d8:	f002 f97e 	bl	80049d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80026dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	3338      	adds	r3, #56	; 0x38
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	4413      	add	r3, r2
 80026ec:	3304      	adds	r3, #4
 80026ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	78db      	ldrb	r3, [r3, #3]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d108      	bne.n	800270a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2200      	movs	r2, #0
 80026fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	b2db      	uxtb	r3, r3
 8002702:	4619      	mov	r1, r3
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f005 faaf 	bl	8007c68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	4413      	add	r3, r2
 8002712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002716:	461a      	mov	r2, r3
 8002718:	2302      	movs	r3, #2
 800271a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002726:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 fcc3 	bl	80030b4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	3301      	adds	r3, #1
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002736:	085b      	lsrs	r3, r3, #1
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273c:	2b00      	cmp	r3, #0
 800273e:	f47f af2e 	bne.w	800259e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f003 f968 	bl	8005a1c <USB_ReadInterrupts>
 800274c:	4603      	mov	r3, r0
 800274e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002756:	d122      	bne.n	800279e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	69fa      	ldr	r2, [r7, #28]
 8002762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002772:	2b01      	cmp	r3, #1
 8002774:	d108      	bne.n	8002788 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800277e:	2100      	movs	r1, #0
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 feab 	bl	80034dc <HAL_PCDEx_LPM_Callback>
 8002786:	e002      	b.n	800278e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f005 fa4d 	bl	8007c28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800279c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f003 f93a 	bl	8005a1c <USB_ReadInterrupts>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027b2:	d112      	bne.n	80027da <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d102      	bne.n	80027ca <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f005 fa09 	bl	8007bdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695a      	ldr	r2, [r3, #20]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80027d8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f003 f91c 	bl	8005a1c <USB_ReadInterrupts>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ee:	f040 80b7 	bne.w	8002960 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2110      	movs	r1, #16
 800280c:	4618      	mov	r0, r3
 800280e:	f002 f8e3 	bl	80049d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002812:	2300      	movs	r3, #0
 8002814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002816:	e046      	b.n	80028a6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	4413      	add	r3, r2
 8002820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002824:	461a      	mov	r2, r3
 8002826:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800282a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	4413      	add	r3, r2
 8002834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800283c:	0151      	lsls	r1, r2, #5
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	440a      	add	r2, r1
 8002842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002846:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800284a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	4413      	add	r3, r2
 8002854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002858:	461a      	mov	r2, r3
 800285a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800285e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	4413      	add	r3, r2
 8002868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002870:	0151      	lsls	r1, r2, #5
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	440a      	add	r2, r1
 8002876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800287a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800287e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002882:	015a      	lsls	r2, r3, #5
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	4413      	add	r3, r2
 8002888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002890:	0151      	lsls	r1, r2, #5
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	440a      	add	r2, r1
 8002896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800289a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800289e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a2:	3301      	adds	r3, #1
 80028a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d3b3      	bcc.n	8002818 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028be:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80028c2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d016      	beq.n	80028fa <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028dc:	f043 030b 	orr.w	r3, r3, #11
 80028e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	69fa      	ldr	r2, [r7, #28]
 80028ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028f2:	f043 030b 	orr.w	r3, r3, #11
 80028f6:	6453      	str	r3, [r2, #68]	; 0x44
 80028f8:	e015      	b.n	8002926 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002908:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800290c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002910:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002920:	f043 030b 	orr.w	r3, r3, #11
 8002924:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002934:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002938:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800294a:	461a      	mov	r2, r3
 800294c:	f003 f92a 	bl	8005ba4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800295e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f003 f859 	bl	8005a1c <USB_ReadInterrupts>
 800296a:	4603      	mov	r3, r0
 800296c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002974:	d124      	bne.n	80029c0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f003 f8ef 	bl	8005b5e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f002 f8a4 	bl	8004ad2 <USB_GetDevSpeed>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681c      	ldr	r4, [r3, #0]
 8002996:	f001 fa11 	bl	8003dbc <HAL_RCC_GetHCLKFreq>
 800299a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	4620      	mov	r0, r4
 80029a6:	f001 fda3 	bl	80044f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f005 f8ed 	bl	8007b8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80029be:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f003 f829 	bl	8005a1c <USB_ReadInterrupts>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d10a      	bne.n	80029ea <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f005 f8ca 	bl	8007b6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f002 0208 	and.w	r2, r2, #8
 80029e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f003 f814 	bl	8005a1c <USB_ReadInterrupts>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fa:	2b80      	cmp	r3, #128	; 0x80
 80029fc:	d122      	bne.n	8002a44 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0e:	e014      	b.n	8002a3a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a14:	4613      	mov	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d105      	bne.n	8002a34 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fb0f 	bl	8003052 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	3301      	adds	r3, #1
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d3e5      	bcc.n	8002a10 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f002 ffe7 	bl	8005a1c <USB_ReadInterrupts>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a58:	d13b      	bne.n	8002ad2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5e:	e02b      	b.n	8002ab8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a74:	4613      	mov	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	3340      	adds	r3, #64	; 0x40
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d115      	bne.n	8002ab2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a86:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	da12      	bge.n	8002ab2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a90:	4613      	mov	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	333f      	adds	r3, #63	; 0x3f
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	4619      	mov	r1, r3
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 fad0 	bl	8003052 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d3ce      	bcc.n	8002a60 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695a      	ldr	r2, [r3, #20]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ad0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f002 ffa0 	bl	8005a1c <USB_ReadInterrupts>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ae6:	d155      	bne.n	8002b94 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ae8:	2301      	movs	r3, #1
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
 8002aec:	e045      	b.n	8002b7a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d12e      	bne.n	8002b74 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b16:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	da2b      	bge.n	8002b74 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002b28:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d121      	bne.n	8002b74 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b34:	4613      	mov	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b42:	2201      	movs	r2, #1
 8002b44:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10a      	bne.n	8002b74 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b70:	6053      	str	r3, [r2, #4]
            break;
 8002b72:	e007      	b.n	8002b84 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	3301      	adds	r3, #1
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d3b4      	bcc.n	8002aee <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f002 ff3f 	bl	8005a1c <USB_ReadInterrupts>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba8:	d10a      	bne.n	8002bc0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f005 f86e 	bl	8007c8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695a      	ldr	r2, [r3, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f002 ff29 	bl	8005a1c <USB_ReadInterrupts>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d115      	bne.n	8002c00 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f005 f85e 	bl	8007ca8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6859      	ldr	r1, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	605a      	str	r2, [r3, #4]
 8002bfc:	e000      	b.n	8002c00 <HAL_PCD_IRQHandler+0x938>
      return;
 8002bfe:	bf00      	nop
    }
  }
}
 8002c00:	3734      	adds	r7, #52	; 0x34
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd90      	pop	{r4, r7, pc}

08002c06 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_PCD_SetAddress+0x1a>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e013      	b.n	8002c48 <HAL_PCD_SetAddress+0x42>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	4611      	mov	r1, r2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f002 fe87 	bl	800594c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	4608      	mov	r0, r1
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4603      	mov	r3, r0
 8002c60:	70fb      	strb	r3, [r7, #3]
 8002c62:	460b      	mov	r3, r1
 8002c64:	803b      	strh	r3, [r7, #0]
 8002c66:	4613      	mov	r3, r2
 8002c68:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	da0f      	bge.n	8002c96 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	f003 020f 	and.w	r2, r3, #15
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	3338      	adds	r3, #56	; 0x38
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	4413      	add	r3, r2
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2201      	movs	r2, #1
 8002c92:	705a      	strb	r2, [r3, #1]
 8002c94:	e00f      	b.n	8002cb6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	f003 020f 	and.w	r2, r3, #15
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	4413      	add	r3, r2
 8002cac:	3304      	adds	r3, #4
 8002cae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cc2:	883a      	ldrh	r2, [r7, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	78ba      	ldrb	r2, [r7, #2]
 8002ccc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	785b      	ldrb	r3, [r3, #1]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d004      	beq.n	8002ce0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ce0:	78bb      	ldrb	r3, [r7, #2]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d102      	bne.n	8002cec <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <HAL_PCD_EP_Open+0xaa>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e00e      	b.n	8002d18 <HAL_PCD_EP_Open+0xc8>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68f9      	ldr	r1, [r7, #12]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f001 ff07 	bl	8004b1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002d16:	7afb      	ldrb	r3, [r7, #11]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	da0f      	bge.n	8002d54 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	f003 020f 	and.w	r2, r3, #15
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	3338      	adds	r3, #56	; 0x38
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	4413      	add	r3, r2
 8002d48:	3304      	adds	r3, #4
 8002d4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	705a      	strb	r2, [r3, #1]
 8002d52:	e00f      	b.n	8002d74 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	f003 020f 	and.w	r2, r3, #15
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4413      	add	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	4413      	add	r3, r2
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_PCD_EP_Close+0x6e>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e00e      	b.n	8002dac <HAL_PCD_EP_Close+0x8c>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68f9      	ldr	r1, [r7, #12]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f001 ff45 	bl	8004c2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dc4:	7afb      	ldrb	r3, [r7, #11]
 8002dc6:	f003 020f 	and.w	r2, r3, #15
 8002dca:	4613      	mov	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4413      	add	r3, r2
 8002dda:	3304      	adds	r3, #4
 8002ddc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2200      	movs	r2, #0
 8002dee:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2200      	movs	r2, #0
 8002df4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002df6:	7afb      	ldrb	r3, [r7, #11]
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d102      	bne.n	8002e10 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e10:	7afb      	ldrb	r3, [r7, #11]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	6979      	ldr	r1, [r7, #20]
 8002e28:	f002 fa24 	bl	8005274 <USB_EP0StartXfer>
 8002e2c:	e008      	b.n	8002e40 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	6979      	ldr	r1, [r7, #20]
 8002e3c:	f001 ffd2 	bl	8004de4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b086      	sub	sp, #24
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
 8002e56:	460b      	mov	r3, r1
 8002e58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e5a:	7afb      	ldrb	r3, [r7, #11]
 8002e5c:	f003 020f 	and.w	r2, r3, #15
 8002e60:	4613      	mov	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	3338      	adds	r3, #56	; 0x38
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3304      	adds	r3, #4
 8002e70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2200      	movs	r2, #0
 8002e82:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2201      	movs	r2, #1
 8002e88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e8a:	7afb      	ldrb	r3, [r7, #11]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d102      	bne.n	8002ea4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ea4:	7afb      	ldrb	r3, [r7, #11]
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d109      	bne.n	8002ec2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	6979      	ldr	r1, [r7, #20]
 8002ebc:	f002 f9da 	bl	8005274 <USB_EP0StartXfer>
 8002ec0:	e008      	b.n	8002ed4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	6979      	ldr	r1, [r7, #20]
 8002ed0:	f001 ff88 	bl	8004de4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	f003 020f 	and.w	r2, r3, #15
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d901      	bls.n	8002efc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e050      	b.n	8002f9e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002efc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	da0f      	bge.n	8002f24 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	f003 020f 	and.w	r2, r3, #15
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	3338      	adds	r3, #56	; 0x38
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	4413      	add	r3, r2
 8002f18:	3304      	adds	r3, #4
 8002f1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	705a      	strb	r2, [r3, #1]
 8002f22:	e00d      	b.n	8002f40 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	3304      	adds	r3, #4
 8002f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f46:	78fb      	ldrb	r3, [r7, #3]
 8002f48:	f003 030f 	and.w	r3, r3, #15
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_PCD_EP_SetStall+0x82>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e01e      	b.n	8002f9e <HAL_PCD_EP_SetStall+0xc0>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68f9      	ldr	r1, [r7, #12]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f002 fc18 	bl	80057a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f74:	78fb      	ldrb	r3, [r7, #3]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10a      	bne.n	8002f94 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	b2d9      	uxtb	r1, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f002 fe08 	bl	8005ba4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b084      	sub	sp, #16
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	f003 020f 	and.w	r2, r3, #15
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d901      	bls.n	8002fc4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e042      	b.n	800304a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	da0f      	bge.n	8002fec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	f003 020f 	and.w	r2, r3, #15
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	3338      	adds	r3, #56	; 0x38
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	4413      	add	r3, r2
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	705a      	strb	r2, [r3, #1]
 8002fea:	e00f      	b.n	800300c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	f003 020f 	and.w	r2, r3, #15
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	4413      	add	r3, r2
 8003002:	3304      	adds	r3, #4
 8003004:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	b2da      	uxtb	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_PCD_EP_ClrStall+0x86>
 8003028:	2302      	movs	r3, #2
 800302a:	e00e      	b.n	800304a <HAL_PCD_EP_ClrStall+0xa4>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68f9      	ldr	r1, [r7, #12]
 800303a:	4618      	mov	r0, r3
 800303c:	f002 fc20 	bl	8005880 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	460b      	mov	r3, r1
 800305c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800305e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003062:	2b00      	cmp	r3, #0
 8003064:	da0c      	bge.n	8003080 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	f003 020f 	and.w	r2, r3, #15
 800306c:	4613      	mov	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	3338      	adds	r3, #56	; 0x38
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	3304      	adds	r3, #4
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	e00c      	b.n	800309a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	f003 020f 	and.w	r2, r3, #15
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	4413      	add	r3, r2
 8003096:	3304      	adds	r3, #4
 8003098:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68f9      	ldr	r1, [r7, #12]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f002 fa3f 	bl	8005524 <USB_EPStopXfer>
 80030a6:	4603      	mov	r3, r0
 80030a8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030aa:	7afb      	ldrb	r3, [r7, #11]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	; 0x28
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	3338      	adds	r3, #56	; 0x38
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	4413      	add	r3, r2
 80030d8:	3304      	adds	r3, #4
 80030da:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a1a      	ldr	r2, [r3, #32]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d901      	bls.n	80030ec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e06c      	b.n	80031c6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	699a      	ldr	r2, [r3, #24]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	69fa      	ldr	r2, [r7, #28]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d902      	bls.n	8003108 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	3303      	adds	r3, #3
 800310c:	089b      	lsrs	r3, r3, #2
 800310e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003110:	e02b      	b.n	800316a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	429a      	cmp	r2, r3
 8003126:	d902      	bls.n	800312e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3303      	adds	r3, #3
 8003132:	089b      	lsrs	r3, r3, #2
 8003134:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6919      	ldr	r1, [r3, #16]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003146:	b2db      	uxtb	r3, r3
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	4603      	mov	r3, r0
 800314c:	6978      	ldr	r0, [r7, #20]
 800314e:	f002 fa93 	bl	8005678 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	441a      	add	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a1a      	ldr	r2, [r3, #32]
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	441a      	add	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4413      	add	r3, r2
 8003172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	b29b      	uxth	r3, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	429a      	cmp	r2, r3
 800317e:	d809      	bhi.n	8003194 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a1a      	ldr	r2, [r3, #32]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003188:	429a      	cmp	r2, r3
 800318a:	d203      	bcs.n	8003194 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1be      	bne.n	8003112 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	699a      	ldr	r2, [r3, #24]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	429a      	cmp	r2, r3
 800319e:	d811      	bhi.n	80031c4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	2201      	movs	r2, #1
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	6939      	ldr	r1, [r7, #16]
 80031bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031c0:	4013      	ands	r3, r2
 80031c2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3720      	adds	r7, #32
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	333c      	adds	r3, #60	; 0x3c
 80031e8:	3304      	adds	r3, #4
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d17b      	bne.n	80032fe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b00      	cmp	r3, #0
 800320e:	d015      	beq.n	800323c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	4a61      	ldr	r2, [pc, #388]	; (8003398 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	f240 80b9 	bls.w	800338c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80b3 	beq.w	800338c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	4413      	add	r3, r2
 800322e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003232:	461a      	mov	r2, r3
 8003234:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003238:	6093      	str	r3, [r2, #8]
 800323a:	e0a7      	b.n	800338c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b00      	cmp	r3, #0
 8003244:	d009      	beq.n	800325a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	015a      	lsls	r2, r3, #5
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	4413      	add	r3, r2
 800324e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003252:	461a      	mov	r2, r3
 8003254:	2320      	movs	r3, #32
 8003256:	6093      	str	r3, [r2, #8]
 8003258:	e098      	b.n	800338c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003260:	2b00      	cmp	r3, #0
 8003262:	f040 8093 	bne.w	800338c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	4a4b      	ldr	r2, [pc, #300]	; (8003398 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d90f      	bls.n	800328e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00a      	beq.n	800328e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	4413      	add	r3, r2
 8003280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003284:	461a      	mov	r2, r3
 8003286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800328a:	6093      	str	r3, [r2, #8]
 800328c:	e07e      	b.n	800338c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	4413      	add	r3, r2
 80032a0:	3304      	adds	r3, #4
 80032a2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	69da      	ldr	r2, [r3, #28]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	0159      	lsls	r1, r3, #5
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	440b      	add	r3, r1
 80032b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ba:	1ad2      	subs	r2, r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d114      	bne.n	80032f0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032d8:	461a      	mov	r2, r3
 80032da:	2101      	movs	r1, #1
 80032dc:	f002 fc62 	bl	8005ba4 <USB_EP0_OutStart>
 80032e0:	e006      	b.n	80032f0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	691a      	ldr	r2, [r3, #16]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	441a      	add	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	4619      	mov	r1, r3
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f004 fc04 	bl	8007b04 <HAL_PCD_DataOutStageCallback>
 80032fc:	e046      	b.n	800338c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	4a26      	ldr	r2, [pc, #152]	; (800339c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d124      	bne.n	8003350 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800331c:	461a      	mov	r2, r3
 800331e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003322:	6093      	str	r3, [r2, #8]
 8003324:	e032      	b.n	800338c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	4413      	add	r3, r2
 8003338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800333c:	461a      	mov	r2, r3
 800333e:	2320      	movs	r3, #32
 8003340:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	4619      	mov	r1, r3
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f004 fbdb 	bl	8007b04 <HAL_PCD_DataOutStageCallback>
 800334e:	e01d      	b.n	800338c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d114      	bne.n	8003380 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	4613      	mov	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4413      	add	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d108      	bne.n	8003380 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6818      	ldr	r0, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003378:	461a      	mov	r2, r3
 800337a:	2100      	movs	r1, #0
 800337c:	f002 fc12 	bl	8005ba4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	4619      	mov	r1, r3
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f004 fbbc 	bl	8007b04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	4f54300a 	.word	0x4f54300a
 800339c:	4f54310a 	.word	0x4f54310a

080033a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	333c      	adds	r3, #60	; 0x3c
 80033b8:	3304      	adds	r3, #4
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4a15      	ldr	r2, [pc, #84]	; (8003428 <PCD_EP_OutSetupPacket_int+0x88>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d90e      	bls.n	80033f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d009      	beq.n	80033f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ec:	461a      	mov	r2, r3
 80033ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f004 fb73 	bl	8007ae0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <PCD_EP_OutSetupPacket_int+0x88>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d90c      	bls.n	800341c <PCD_EP_OutSetupPacket_int+0x7c>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d108      	bne.n	800341c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003414:	461a      	mov	r2, r3
 8003416:	2101      	movs	r1, #1
 8003418:	f002 fbc4 	bl	8005ba4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	4f54300a 	.word	0x4f54300a

0800342c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	70fb      	strb	r3, [r7, #3]
 8003438:	4613      	mov	r3, r2
 800343a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003444:	78fb      	ldrb	r3, [r7, #3]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d107      	bne.n	800345a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800344a:	883b      	ldrh	r3, [r7, #0]
 800344c:	0419      	lsls	r1, r3, #16
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	430a      	orrs	r2, r1
 8003456:	629a      	str	r2, [r3, #40]	; 0x28
 8003458:	e028      	b.n	80034ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	0c1b      	lsrs	r3, r3, #16
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	4413      	add	r3, r2
 8003466:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003468:	2300      	movs	r3, #0
 800346a:	73fb      	strb	r3, [r7, #15]
 800346c:	e00d      	b.n	800348a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	3340      	adds	r3, #64	; 0x40
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	0c1b      	lsrs	r3, r3, #16
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	4413      	add	r3, r2
 8003482:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	3301      	adds	r3, #1
 8003488:	73fb      	strb	r3, [r7, #15]
 800348a:	7bfa      	ldrb	r2, [r7, #15]
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	3b01      	subs	r3, #1
 8003490:	429a      	cmp	r2, r3
 8003492:	d3ec      	bcc.n	800346e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003494:	883b      	ldrh	r3, [r7, #0]
 8003496:	0418      	lsls	r0, r3, #16
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6819      	ldr	r1, [r3, #0]
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	3b01      	subs	r3, #1
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	4302      	orrs	r2, r0
 80034a4:	3340      	adds	r3, #64	; 0x40
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	460b      	mov	r3, r1
 80034c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	887a      	ldrh	r2, [r7, #2]
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e267      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d075      	beq.n	80035fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003512:	4b88      	ldr	r3, [pc, #544]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b04      	cmp	r3, #4
 800351c:	d00c      	beq.n	8003538 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351e:	4b85      	ldr	r3, [pc, #532]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003526:	2b08      	cmp	r3, #8
 8003528:	d112      	bne.n	8003550 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800352a:	4b82      	ldr	r3, [pc, #520]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003532:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003536:	d10b      	bne.n	8003550 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003538:	4b7e      	ldr	r3, [pc, #504]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d05b      	beq.n	80035fc <HAL_RCC_OscConfig+0x108>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d157      	bne.n	80035fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e242      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003558:	d106      	bne.n	8003568 <HAL_RCC_OscConfig+0x74>
 800355a:	4b76      	ldr	r3, [pc, #472]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a75      	ldr	r2, [pc, #468]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	e01d      	b.n	80035a4 <HAL_RCC_OscConfig+0xb0>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003570:	d10c      	bne.n	800358c <HAL_RCC_OscConfig+0x98>
 8003572:	4b70      	ldr	r3, [pc, #448]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a6f      	ldr	r2, [pc, #444]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4b6d      	ldr	r3, [pc, #436]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a6c      	ldr	r2, [pc, #432]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e00b      	b.n	80035a4 <HAL_RCC_OscConfig+0xb0>
 800358c:	4b69      	ldr	r3, [pc, #420]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a68      	ldr	r2, [pc, #416]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	4b66      	ldr	r3, [pc, #408]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a65      	ldr	r2, [pc, #404]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800359e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d013      	beq.n	80035d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ac:	f7fe f930 	bl	8001810 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b4:	f7fe f92c 	bl	8001810 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b64      	cmp	r3, #100	; 0x64
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e207      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c6:	4b5b      	ldr	r3, [pc, #364]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0xc0>
 80035d2:	e014      	b.n	80035fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7fe f91c 	bl	8001810 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035dc:	f7fe f918 	bl	8001810 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b64      	cmp	r3, #100	; 0x64
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e1f3      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ee:	4b51      	ldr	r3, [pc, #324]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0xe8>
 80035fa:	e000      	b.n	80035fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d063      	beq.n	80036d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800360a:	4b4a      	ldr	r3, [pc, #296]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00b      	beq.n	800362e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003616:	4b47      	ldr	r3, [pc, #284]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800361e:	2b08      	cmp	r3, #8
 8003620:	d11c      	bne.n	800365c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003622:	4b44      	ldr	r3, [pc, #272]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d116      	bne.n	800365c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362e:	4b41      	ldr	r3, [pc, #260]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d005      	beq.n	8003646 <HAL_RCC_OscConfig+0x152>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d001      	beq.n	8003646 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e1c7      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003646:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4937      	ldr	r1, [pc, #220]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365a:	e03a      	b.n	80036d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d020      	beq.n	80036a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003664:	4b34      	ldr	r3, [pc, #208]	; (8003738 <HAL_RCC_OscConfig+0x244>)
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366a:	f7fe f8d1 	bl	8001810 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003672:	f7fe f8cd 	bl	8001810 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e1a8      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003684:	4b2b      	ldr	r3, [pc, #172]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003690:	4b28      	ldr	r3, [pc, #160]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4925      	ldr	r1, [pc, #148]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	600b      	str	r3, [r1, #0]
 80036a4:	e015      	b.n	80036d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a6:	4b24      	ldr	r3, [pc, #144]	; (8003738 <HAL_RCC_OscConfig+0x244>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7fe f8b0 	bl	8001810 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b4:	f7fe f8ac 	bl	8001810 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e187      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c6:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d036      	beq.n	800374c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d016      	beq.n	8003714 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036e6:	4b15      	ldr	r3, [pc, #84]	; (800373c <HAL_RCC_OscConfig+0x248>)
 80036e8:	2201      	movs	r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ec:	f7fe f890 	bl	8001810 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f4:	f7fe f88c 	bl	8001810 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e167      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003706:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0x200>
 8003712:	e01b      	b.n	800374c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003714:	4b09      	ldr	r3, [pc, #36]	; (800373c <HAL_RCC_OscConfig+0x248>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371a:	f7fe f879 	bl	8001810 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003720:	e00e      	b.n	8003740 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003722:	f7fe f875 	bl	8001810 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d907      	bls.n	8003740 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e150      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
 8003734:	40023800 	.word	0x40023800
 8003738:	42470000 	.word	0x42470000
 800373c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003740:	4b88      	ldr	r3, [pc, #544]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1ea      	bne.n	8003722 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8097 	beq.w	8003888 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375a:	2300      	movs	r3, #0
 800375c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375e:	4b81      	ldr	r3, [pc, #516]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10f      	bne.n	800378a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	4b7d      	ldr	r3, [pc, #500]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	4a7c      	ldr	r2, [pc, #496]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003778:	6413      	str	r3, [r2, #64]	; 0x40
 800377a:	4b7a      	ldr	r3, [pc, #488]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003786:	2301      	movs	r3, #1
 8003788:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378a:	4b77      	ldr	r3, [pc, #476]	; (8003968 <HAL_RCC_OscConfig+0x474>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d118      	bne.n	80037c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003796:	4b74      	ldr	r3, [pc, #464]	; (8003968 <HAL_RCC_OscConfig+0x474>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a73      	ldr	r2, [pc, #460]	; (8003968 <HAL_RCC_OscConfig+0x474>)
 800379c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a2:	f7fe f835 	bl	8001810 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037aa:	f7fe f831 	bl	8001810 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e10c      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037bc:	4b6a      	ldr	r3, [pc, #424]	; (8003968 <HAL_RCC_OscConfig+0x474>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d106      	bne.n	80037de <HAL_RCC_OscConfig+0x2ea>
 80037d0:	4b64      	ldr	r3, [pc, #400]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d4:	4a63      	ldr	r2, [pc, #396]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	6713      	str	r3, [r2, #112]	; 0x70
 80037dc:	e01c      	b.n	8003818 <HAL_RCC_OscConfig+0x324>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b05      	cmp	r3, #5
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0x30c>
 80037e6:	4b5f      	ldr	r3, [pc, #380]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	4a5e      	ldr	r2, [pc, #376]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037ec:	f043 0304 	orr.w	r3, r3, #4
 80037f0:	6713      	str	r3, [r2, #112]	; 0x70
 80037f2:	4b5c      	ldr	r3, [pc, #368]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f6:	4a5b      	ldr	r2, [pc, #364]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6713      	str	r3, [r2, #112]	; 0x70
 80037fe:	e00b      	b.n	8003818 <HAL_RCC_OscConfig+0x324>
 8003800:	4b58      	ldr	r3, [pc, #352]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	4a57      	ldr	r2, [pc, #348]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	6713      	str	r3, [r2, #112]	; 0x70
 800380c:	4b55      	ldr	r3, [pc, #340]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	4a54      	ldr	r2, [pc, #336]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003812:	f023 0304 	bic.w	r3, r3, #4
 8003816:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d015      	beq.n	800384c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003820:	f7fd fff6 	bl	8001810 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003826:	e00a      	b.n	800383e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003828:	f7fd fff2 	bl	8001810 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f241 3288 	movw	r2, #5000	; 0x1388
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e0cb      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383e:	4b49      	ldr	r3, [pc, #292]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0ee      	beq.n	8003828 <HAL_RCC_OscConfig+0x334>
 800384a:	e014      	b.n	8003876 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384c:	f7fd ffe0 	bl	8001810 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003852:	e00a      	b.n	800386a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003854:	f7fd ffdc 	bl	8001810 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e0b5      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386a:	4b3e      	ldr	r3, [pc, #248]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1ee      	bne.n	8003854 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d105      	bne.n	8003888 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387c:	4b39      	ldr	r3, [pc, #228]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	4a38      	ldr	r2, [pc, #224]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003886:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80a1 	beq.w	80039d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003892:	4b34      	ldr	r3, [pc, #208]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b08      	cmp	r3, #8
 800389c:	d05c      	beq.n	8003958 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d141      	bne.n	800392a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a6:	4b31      	ldr	r3, [pc, #196]	; (800396c <HAL_RCC_OscConfig+0x478>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ac:	f7fd ffb0 	bl	8001810 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b4:	f7fd ffac 	bl	8001810 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e087      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c6:	4b27      	ldr	r3, [pc, #156]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69da      	ldr	r2, [r3, #28]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	019b      	lsls	r3, r3, #6
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	085b      	lsrs	r3, r3, #1
 80038ea:	3b01      	subs	r3, #1
 80038ec:	041b      	lsls	r3, r3, #16
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	061b      	lsls	r3, r3, #24
 80038f6:	491b      	ldr	r1, [pc, #108]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038fc:	4b1b      	ldr	r3, [pc, #108]	; (800396c <HAL_RCC_OscConfig+0x478>)
 80038fe:	2201      	movs	r2, #1
 8003900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003902:	f7fd ff85 	bl	8001810 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800390a:	f7fd ff81 	bl	8001810 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e05c      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x416>
 8003928:	e054      	b.n	80039d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392a:	4b10      	ldr	r3, [pc, #64]	; (800396c <HAL_RCC_OscConfig+0x478>)
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7fd ff6e 	bl	8001810 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003938:	f7fd ff6a 	bl	8001810 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e045      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0x444>
 8003956:	e03d      	b.n	80039d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d107      	bne.n	8003970 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e038      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
 8003964:	40023800 	.word	0x40023800
 8003968:	40007000 	.word	0x40007000
 800396c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003970:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <HAL_RCC_OscConfig+0x4ec>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d028      	beq.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d121      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d11a      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039a0:	4013      	ands	r3, r2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d111      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	085b      	lsrs	r3, r3, #1
 80039b8:	3b01      	subs	r3, #1
 80039ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d107      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800

080039e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0cc      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f8:	4b68      	ldr	r3, [pc, #416]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d90c      	bls.n	8003a20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b65      	ldr	r3, [pc, #404]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	4b63      	ldr	r3, [pc, #396]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0b8      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d020      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a38:	4b59      	ldr	r3, [pc, #356]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	4a58      	ldr	r2, [pc, #352]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a50:	4b53      	ldr	r3, [pc, #332]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4a52      	ldr	r2, [pc, #328]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a5c:	4b50      	ldr	r3, [pc, #320]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	494d      	ldr	r1, [pc, #308]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d044      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d107      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a82:	4b47      	ldr	r3, [pc, #284]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d119      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e07f      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d003      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d107      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa2:	4b3f      	ldr	r3, [pc, #252]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e06f      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab2:	4b3b      	ldr	r3, [pc, #236]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e067      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ac2:	4b37      	ldr	r3, [pc, #220]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f023 0203 	bic.w	r2, r3, #3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	4934      	ldr	r1, [pc, #208]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad4:	f7fd fe9c 	bl	8001810 <HAL_GetTick>
 8003ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ada:	e00a      	b.n	8003af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003adc:	f7fd fe98 	bl	8001810 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e04f      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af2:	4b2b      	ldr	r3, [pc, #172]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 020c 	and.w	r2, r3, #12
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d1eb      	bne.n	8003adc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b04:	4b25      	ldr	r3, [pc, #148]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d20c      	bcs.n	8003b2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b12:	4b22      	ldr	r3, [pc, #136]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1a:	4b20      	ldr	r3, [pc, #128]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d001      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e032      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b38:	4b19      	ldr	r3, [pc, #100]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4916      	ldr	r1, [pc, #88]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d009      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	490e      	ldr	r1, [pc, #56]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b6a:	f000 f821 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	490a      	ldr	r1, [pc, #40]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b7c:	5ccb      	ldrb	r3, [r1, r3]
 8003b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b82:	4a09      	ldr	r2, [pc, #36]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b86:	4b09      	ldr	r3, [pc, #36]	; (8003bac <HAL_RCC_ClockConfig+0x1c8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fd fdfc 	bl	8001788 <HAL_InitTick>

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40023c00 	.word	0x40023c00
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	080080e8 	.word	0x080080e8
 8003ba8:	20000074 	.word	0x20000074
 8003bac:	20000078 	.word	0x20000078

08003bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb4:	b094      	sub	sp, #80	; 0x50
 8003bb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	647b      	str	r3, [r7, #68]	; 0x44
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bc8:	4b79      	ldr	r3, [pc, #484]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 030c 	and.w	r3, r3, #12
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d00d      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	f200 80e1 	bhi.w	8003d9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d003      	beq.n	8003bea <HAL_RCC_GetSysClockFreq+0x3a>
 8003be2:	e0db      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be4:	4b73      	ldr	r3, [pc, #460]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003be6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003be8:	e0db      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bea:	4b73      	ldr	r3, [pc, #460]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bee:	e0d8      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bf0:	4b6f      	ldr	r3, [pc, #444]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bf8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bfa:	4b6d      	ldr	r3, [pc, #436]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d063      	beq.n	8003cce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c06:	4b6a      	ldr	r3, [pc, #424]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	099b      	lsrs	r3, r3, #6
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c18:	633b      	str	r3, [r7, #48]	; 0x30
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c22:	4622      	mov	r2, r4
 8003c24:	462b      	mov	r3, r5
 8003c26:	f04f 0000 	mov.w	r0, #0
 8003c2a:	f04f 0100 	mov.w	r1, #0
 8003c2e:	0159      	lsls	r1, r3, #5
 8003c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c34:	0150      	lsls	r0, r2, #5
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4621      	mov	r1, r4
 8003c3c:	1a51      	subs	r1, r2, r1
 8003c3e:	6139      	str	r1, [r7, #16]
 8003c40:	4629      	mov	r1, r5
 8003c42:	eb63 0301 	sbc.w	r3, r3, r1
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c54:	4659      	mov	r1, fp
 8003c56:	018b      	lsls	r3, r1, #6
 8003c58:	4651      	mov	r1, sl
 8003c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c5e:	4651      	mov	r1, sl
 8003c60:	018a      	lsls	r2, r1, #6
 8003c62:	4651      	mov	r1, sl
 8003c64:	ebb2 0801 	subs.w	r8, r2, r1
 8003c68:	4659      	mov	r1, fp
 8003c6a:	eb63 0901 	sbc.w	r9, r3, r1
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c82:	4690      	mov	r8, r2
 8003c84:	4699      	mov	r9, r3
 8003c86:	4623      	mov	r3, r4
 8003c88:	eb18 0303 	adds.w	r3, r8, r3
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	462b      	mov	r3, r5
 8003c90:	eb49 0303 	adc.w	r3, r9, r3
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ca2:	4629      	mov	r1, r5
 8003ca4:	024b      	lsls	r3, r1, #9
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cac:	4621      	mov	r1, r4
 8003cae:	024a      	lsls	r2, r1, #9
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cc0:	f7fc fa82 	bl	80001c8 <__aeabi_uldivmod>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4613      	mov	r3, r2
 8003cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ccc:	e058      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cce:	4b38      	ldr	r3, [pc, #224]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	099b      	lsrs	r3, r3, #6
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	4611      	mov	r1, r2
 8003cda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cde:	623b      	str	r3, [r7, #32]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ce8:	4642      	mov	r2, r8
 8003cea:	464b      	mov	r3, r9
 8003cec:	f04f 0000 	mov.w	r0, #0
 8003cf0:	f04f 0100 	mov.w	r1, #0
 8003cf4:	0159      	lsls	r1, r3, #5
 8003cf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cfa:	0150      	lsls	r0, r2, #5
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4641      	mov	r1, r8
 8003d02:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d06:	4649      	mov	r1, r9
 8003d08:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d20:	ebb2 040a 	subs.w	r4, r2, sl
 8003d24:	eb63 050b 	sbc.w	r5, r3, fp
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	00eb      	lsls	r3, r5, #3
 8003d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d36:	00e2      	lsls	r2, r4, #3
 8003d38:	4614      	mov	r4, r2
 8003d3a:	461d      	mov	r5, r3
 8003d3c:	4643      	mov	r3, r8
 8003d3e:	18e3      	adds	r3, r4, r3
 8003d40:	603b      	str	r3, [r7, #0]
 8003d42:	464b      	mov	r3, r9
 8003d44:	eb45 0303 	adc.w	r3, r5, r3
 8003d48:	607b      	str	r3, [r7, #4]
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	f04f 0300 	mov.w	r3, #0
 8003d52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d56:	4629      	mov	r1, r5
 8003d58:	028b      	lsls	r3, r1, #10
 8003d5a:	4621      	mov	r1, r4
 8003d5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d60:	4621      	mov	r1, r4
 8003d62:	028a      	lsls	r2, r1, #10
 8003d64:	4610      	mov	r0, r2
 8003d66:	4619      	mov	r1, r3
 8003d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	61fa      	str	r2, [r7, #28]
 8003d70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d74:	f7fc fa28 	bl	80001c8 <__aeabi_uldivmod>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	0c1b      	lsrs	r3, r3, #16
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d9a:	e002      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3750      	adds	r7, #80	; 0x50
 8003da8:	46bd      	mov	sp, r7
 8003daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800
 8003db4:	00f42400 	.word	0x00f42400
 8003db8:	007a1200 	.word	0x007a1200

08003dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc0:	4b03      	ldr	r3, [pc, #12]	; (8003dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20000074 	.word	0x20000074

08003dd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e07b      	b.n	8003ede <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d108      	bne.n	8003e00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003df6:	d009      	beq.n	8003e0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	61da      	str	r2, [r3, #28]
 8003dfe:	e005      	b.n	8003e0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fd fb88 	bl	800153c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e54:	431a      	orrs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e90:	ea42 0103 	orr.w	r1, r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	0c1b      	lsrs	r3, r3, #16
 8003eaa:	f003 0104 	and.w	r1, r3, #4
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	f003 0210 	and.w	r2, r3, #16
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	69da      	ldr	r2, [r3, #28]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ecc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b082      	sub	sp, #8
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e01a      	b.n	8003f2e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f0e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7fd fb7b 	bl	800160c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b08c      	sub	sp, #48	; 0x30
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	607a      	str	r2, [r7, #4]
 8003f42:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f44:	2301      	movs	r3, #1
 8003f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_SPI_TransmitReceive+0x26>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e18a      	b.n	8004272 <HAL_SPI_TransmitReceive+0x33c>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f64:	f7fd fc54 	bl	8001810 <HAL_GetTick>
 8003f68:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f7a:	887b      	ldrh	r3, [r7, #2]
 8003f7c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d00f      	beq.n	8003fa6 <HAL_SPI_TransmitReceive+0x70>
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f8c:	d107      	bne.n	8003f9e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d103      	bne.n	8003f9e <HAL_SPI_TransmitReceive+0x68>
 8003f96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d003      	beq.n	8003fa6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fa4:	e15b      	b.n	800425e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <HAL_SPI_TransmitReceive+0x82>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <HAL_SPI_TransmitReceive+0x82>
 8003fb2:	887b      	ldrh	r3, [r7, #2]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d103      	bne.n	8003fc0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fbe:	e14e      	b.n	800425e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d003      	beq.n	8003fd4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2205      	movs	r2, #5
 8003fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	887a      	ldrh	r2, [r7, #2]
 8003fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	887a      	ldrh	r2, [r7, #2]
 8003fea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	887a      	ldrh	r2, [r7, #2]
 8003ff6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	887a      	ldrh	r2, [r7, #2]
 8003ffc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004014:	2b40      	cmp	r3, #64	; 0x40
 8004016:	d007      	beq.n	8004028 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004026:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004030:	d178      	bne.n	8004124 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <HAL_SPI_TransmitReceive+0x10a>
 800403a:	8b7b      	ldrh	r3, [r7, #26]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d166      	bne.n	800410e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	881a      	ldrh	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	1c9a      	adds	r2, r3, #2
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800405a:	b29b      	uxth	r3, r3
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004064:	e053      	b.n	800410e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b02      	cmp	r3, #2
 8004072:	d11b      	bne.n	80040ac <HAL_SPI_TransmitReceive+0x176>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d016      	beq.n	80040ac <HAL_SPI_TransmitReceive+0x176>
 800407e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004080:	2b01      	cmp	r3, #1
 8004082:	d113      	bne.n	80040ac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	881a      	ldrh	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	1c9a      	adds	r2, r3, #2
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d119      	bne.n	80040ee <HAL_SPI_TransmitReceive+0x1b8>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040be:	b29b      	uxth	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d014      	beq.n	80040ee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ce:	b292      	uxth	r2, r2
 80040d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d6:	1c9a      	adds	r2, r3, #2
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040ea:	2301      	movs	r3, #1
 80040ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040ee:	f7fd fb8f 	bl	8001810 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d807      	bhi.n	800410e <HAL_SPI_TransmitReceive+0x1d8>
 80040fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004104:	d003      	beq.n	800410e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800410c:	e0a7      	b.n	800425e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004112:	b29b      	uxth	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1a6      	bne.n	8004066 <HAL_SPI_TransmitReceive+0x130>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1a1      	bne.n	8004066 <HAL_SPI_TransmitReceive+0x130>
 8004122:	e07c      	b.n	800421e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <HAL_SPI_TransmitReceive+0x1fc>
 800412c:	8b7b      	ldrh	r3, [r7, #26]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d16b      	bne.n	800420a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	330c      	adds	r3, #12
 800413c:	7812      	ldrb	r2, [r2, #0]
 800413e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004158:	e057      	b.n	800420a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b02      	cmp	r3, #2
 8004166:	d11c      	bne.n	80041a2 <HAL_SPI_TransmitReceive+0x26c>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d017      	beq.n	80041a2 <HAL_SPI_TransmitReceive+0x26c>
 8004172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004174:	2b01      	cmp	r3, #1
 8004176:	d114      	bne.n	80041a2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	330c      	adds	r3, #12
 8004182:	7812      	ldrb	r2, [r2, #0]
 8004184:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004194:	b29b      	uxth	r3, r3
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d119      	bne.n	80041e4 <HAL_SPI_TransmitReceive+0x2ae>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d014      	beq.n	80041e4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041e0:	2301      	movs	r3, #1
 80041e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041e4:	f7fd fb14 	bl	8001810 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d803      	bhi.n	80041fc <HAL_SPI_TransmitReceive+0x2c6>
 80041f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fa:	d102      	bne.n	8004202 <HAL_SPI_TransmitReceive+0x2cc>
 80041fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d103      	bne.n	800420a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004208:	e029      	b.n	800425e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1a2      	bne.n	800415a <HAL_SPI_TransmitReceive+0x224>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d19d      	bne.n	800415a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800421e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004220:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f8c0 	bl	80043a8 <SPI_EndRxTxTransaction>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d006      	beq.n	800423c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2220      	movs	r2, #32
 8004238:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800423a:	e010      	b.n	800425e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004244:	2300      	movs	r3, #0
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	e000      	b.n	800425e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800425c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800426e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004272:	4618      	mov	r0, r3
 8004274:	3730      	adds	r7, #48	; 0x30
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004288:	b2db      	uxtb	r3, r3
}
 800428a:	4618      	mov	r0, r3
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
	...

08004298 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	603b      	str	r3, [r7, #0]
 80042a4:	4613      	mov	r3, r2
 80042a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042a8:	f7fd fab2 	bl	8001810 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	4413      	add	r3, r2
 80042b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042b8:	f7fd faaa 	bl	8001810 <HAL_GetTick>
 80042bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042be:	4b39      	ldr	r3, [pc, #228]	; (80043a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	015b      	lsls	r3, r3, #5
 80042c4:	0d1b      	lsrs	r3, r3, #20
 80042c6:	69fa      	ldr	r2, [r7, #28]
 80042c8:	fb02 f303 	mul.w	r3, r2, r3
 80042cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042ce:	e054      	b.n	800437a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d6:	d050      	beq.n	800437a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042d8:	f7fd fa9a 	bl	8001810 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d902      	bls.n	80042ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d13d      	bne.n	800436a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004306:	d111      	bne.n	800432c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004310:	d004      	beq.n	800431c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431a:	d107      	bne.n	800432c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800432a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004334:	d10f      	bne.n	8004356 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004354:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e017      	b.n	800439a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	3b01      	subs	r3, #1
 8004378:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4013      	ands	r3, r2
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	429a      	cmp	r2, r3
 8004388:	bf0c      	ite	eq
 800438a:	2301      	moveq	r3, #1
 800438c:	2300      	movne	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	461a      	mov	r2, r3
 8004392:	79fb      	ldrb	r3, [r7, #7]
 8004394:	429a      	cmp	r2, r3
 8004396:	d19b      	bne.n	80042d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3720      	adds	r7, #32
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000074 	.word	0x20000074

080043a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043b4:	4b1b      	ldr	r3, [pc, #108]	; (8004424 <SPI_EndRxTxTransaction+0x7c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1b      	ldr	r2, [pc, #108]	; (8004428 <SPI_EndRxTxTransaction+0x80>)
 80043ba:	fba2 2303 	umull	r2, r3, r2, r3
 80043be:	0d5b      	lsrs	r3, r3, #21
 80043c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043c4:	fb02 f303 	mul.w	r3, r2, r3
 80043c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043d2:	d112      	bne.n	80043fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2200      	movs	r2, #0
 80043dc:	2180      	movs	r1, #128	; 0x80
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f7ff ff5a 	bl	8004298 <SPI_WaitFlagStateUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d016      	beq.n	8004418 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	f043 0220 	orr.w	r2, r3, #32
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e00f      	b.n	800441a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	3b01      	subs	r3, #1
 8004404:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004410:	2b80      	cmp	r3, #128	; 0x80
 8004412:	d0f2      	beq.n	80043fa <SPI_EndRxTxTransaction+0x52>
 8004414:	e000      	b.n	8004418 <SPI_EndRxTxTransaction+0x70>
        break;
 8004416:	bf00      	nop
  }

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000074 	.word	0x20000074
 8004428:	165e9f81 	.word	0x165e9f81

0800442c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800442c:	b084      	sub	sp, #16
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	f107 001c 	add.w	r0, r7, #28
 800443a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	2b01      	cmp	r3, #1
 8004442:	d122      	bne.n	800448a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800446c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800446e:	2b01      	cmp	r3, #1
 8004470:	d105      	bne.n	800447e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f001 fbee 	bl	8005c60 <USB_CoreReset>
 8004484:	4603      	mov	r3, r0
 8004486:	73fb      	strb	r3, [r7, #15]
 8004488:	e01a      	b.n	80044c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f001 fbe2 	bl	8005c60 <USB_CoreReset>
 800449c:	4603      	mov	r3, r0
 800449e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80044a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	639a      	str	r2, [r3, #56]	; 0x38
 80044b2:	e005      	b.n	80044c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80044c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d10b      	bne.n	80044de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f043 0206 	orr.w	r2, r3, #6
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f043 0220 	orr.w	r2, r3, #32
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80044de:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044ea:	b004      	add	sp, #16
 80044ec:	4770      	bx	lr
	...

080044f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	4613      	mov	r3, r2
 80044fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	2b02      	cmp	r3, #2
 8004502:	d165      	bne.n	80045d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	4a41      	ldr	r2, [pc, #260]	; (800460c <USB_SetTurnaroundTime+0x11c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d906      	bls.n	800451a <USB_SetTurnaroundTime+0x2a>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4a40      	ldr	r2, [pc, #256]	; (8004610 <USB_SetTurnaroundTime+0x120>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d202      	bcs.n	800451a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004514:	230f      	movs	r3, #15
 8004516:	617b      	str	r3, [r7, #20]
 8004518:	e062      	b.n	80045e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	4a3c      	ldr	r2, [pc, #240]	; (8004610 <USB_SetTurnaroundTime+0x120>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d306      	bcc.n	8004530 <USB_SetTurnaroundTime+0x40>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	4a3b      	ldr	r2, [pc, #236]	; (8004614 <USB_SetTurnaroundTime+0x124>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d202      	bcs.n	8004530 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800452a:	230e      	movs	r3, #14
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	e057      	b.n	80045e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	4a38      	ldr	r2, [pc, #224]	; (8004614 <USB_SetTurnaroundTime+0x124>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d306      	bcc.n	8004546 <USB_SetTurnaroundTime+0x56>
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4a37      	ldr	r2, [pc, #220]	; (8004618 <USB_SetTurnaroundTime+0x128>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d202      	bcs.n	8004546 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004540:	230d      	movs	r3, #13
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	e04c      	b.n	80045e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	4a33      	ldr	r2, [pc, #204]	; (8004618 <USB_SetTurnaroundTime+0x128>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d306      	bcc.n	800455c <USB_SetTurnaroundTime+0x6c>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	4a32      	ldr	r2, [pc, #200]	; (800461c <USB_SetTurnaroundTime+0x12c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d802      	bhi.n	800455c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004556:	230c      	movs	r3, #12
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	e041      	b.n	80045e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	4a2f      	ldr	r2, [pc, #188]	; (800461c <USB_SetTurnaroundTime+0x12c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d906      	bls.n	8004572 <USB_SetTurnaroundTime+0x82>
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	4a2e      	ldr	r2, [pc, #184]	; (8004620 <USB_SetTurnaroundTime+0x130>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d802      	bhi.n	8004572 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800456c:	230b      	movs	r3, #11
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	e036      	b.n	80045e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	4a2a      	ldr	r2, [pc, #168]	; (8004620 <USB_SetTurnaroundTime+0x130>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d906      	bls.n	8004588 <USB_SetTurnaroundTime+0x98>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	4a29      	ldr	r2, [pc, #164]	; (8004624 <USB_SetTurnaroundTime+0x134>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d802      	bhi.n	8004588 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004582:	230a      	movs	r3, #10
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	e02b      	b.n	80045e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4a26      	ldr	r2, [pc, #152]	; (8004624 <USB_SetTurnaroundTime+0x134>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d906      	bls.n	800459e <USB_SetTurnaroundTime+0xae>
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4a25      	ldr	r2, [pc, #148]	; (8004628 <USB_SetTurnaroundTime+0x138>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d202      	bcs.n	800459e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004598:	2309      	movs	r3, #9
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	e020      	b.n	80045e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	4a21      	ldr	r2, [pc, #132]	; (8004628 <USB_SetTurnaroundTime+0x138>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d306      	bcc.n	80045b4 <USB_SetTurnaroundTime+0xc4>
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	4a20      	ldr	r2, [pc, #128]	; (800462c <USB_SetTurnaroundTime+0x13c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d802      	bhi.n	80045b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80045ae:	2308      	movs	r3, #8
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	e015      	b.n	80045e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4a1d      	ldr	r2, [pc, #116]	; (800462c <USB_SetTurnaroundTime+0x13c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d906      	bls.n	80045ca <USB_SetTurnaroundTime+0xda>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4a1c      	ldr	r2, [pc, #112]	; (8004630 <USB_SetTurnaroundTime+0x140>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d202      	bcs.n	80045ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80045c4:	2307      	movs	r3, #7
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	e00a      	b.n	80045e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80045ca:	2306      	movs	r3, #6
 80045cc:	617b      	str	r3, [r7, #20]
 80045ce:	e007      	b.n	80045e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d102      	bne.n	80045dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80045d6:	2309      	movs	r3, #9
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	e001      	b.n	80045e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80045dc:	2309      	movs	r3, #9
 80045de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	029b      	lsls	r3, r3, #10
 80045f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80045f8:	431a      	orrs	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	371c      	adds	r7, #28
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	00d8acbf 	.word	0x00d8acbf
 8004610:	00e4e1c0 	.word	0x00e4e1c0
 8004614:	00f42400 	.word	0x00f42400
 8004618:	01067380 	.word	0x01067380
 800461c:	011a499f 	.word	0x011a499f
 8004620:	01312cff 	.word	0x01312cff
 8004624:	014ca43f 	.word	0x014ca43f
 8004628:	016e3600 	.word	0x016e3600
 800462c:	01a6ab1f 	.word	0x01a6ab1f
 8004630:	01e84800 	.word	0x01e84800

08004634 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f043 0201 	orr.w	r2, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f023 0201 	bic.w	r2, r3, #1
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d115      	bne.n	80046c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046a6:	2001      	movs	r0, #1
 80046a8:	f7fd f8be 	bl	8001828 <HAL_Delay>
      ms++;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	3301      	adds	r3, #1
 80046b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f001 fa45 	bl	8005b42 <USB_GetMode>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d01e      	beq.n	80046fc <USB_SetCurrentMode+0x84>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b31      	cmp	r3, #49	; 0x31
 80046c2:	d9f0      	bls.n	80046a6 <USB_SetCurrentMode+0x2e>
 80046c4:	e01a      	b.n	80046fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80046c6:	78fb      	ldrb	r3, [r7, #3]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d115      	bne.n	80046f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046d8:	2001      	movs	r0, #1
 80046da:	f7fd f8a5 	bl	8001828 <HAL_Delay>
      ms++;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	3301      	adds	r3, #1
 80046e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f001 fa2c 	bl	8005b42 <USB_GetMode>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <USB_SetCurrentMode+0x84>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b31      	cmp	r3, #49	; 0x31
 80046f4:	d9f0      	bls.n	80046d8 <USB_SetCurrentMode+0x60>
 80046f6:	e001      	b.n	80046fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e005      	b.n	8004708 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b32      	cmp	r3, #50	; 0x32
 8004700:	d101      	bne.n	8004706 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004710:	b084      	sub	sp, #16
 8004712:	b580      	push	{r7, lr}
 8004714:	b086      	sub	sp, #24
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800471e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800472a:	2300      	movs	r3, #0
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	e009      	b.n	8004744 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	3340      	adds	r3, #64	; 0x40
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	2200      	movs	r2, #0
 800473c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	3301      	adds	r3, #1
 8004742:	613b      	str	r3, [r7, #16]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	2b0e      	cmp	r3, #14
 8004748:	d9f2      	bls.n	8004730 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800474a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800474c:	2b00      	cmp	r3, #0
 800474e:	d11c      	bne.n	800478a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800475e:	f043 0302 	orr.w	r3, r3, #2
 8004762:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004774:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	639a      	str	r2, [r3, #56]	; 0x38
 8004788:	e00b      	b.n	80047a2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047a8:	461a      	mov	r2, r3
 80047aa:	2300      	movs	r3, #0
 80047ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b4:	4619      	mov	r1, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047bc:	461a      	mov	r2, r3
 80047be:	680b      	ldr	r3, [r1, #0]
 80047c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d10c      	bne.n	80047e2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80047c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d104      	bne.n	80047d8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80047ce:	2100      	movs	r1, #0
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f965 	bl	8004aa0 <USB_SetDevSpeed>
 80047d6:	e008      	b.n	80047ea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80047d8:	2101      	movs	r1, #1
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f960 	bl	8004aa0 <USB_SetDevSpeed>
 80047e0:	e003      	b.n	80047ea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80047e2:	2103      	movs	r1, #3
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f95b 	bl	8004aa0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047ea:	2110      	movs	r1, #16
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f8f3 	bl	80049d8 <USB_FlushTxFifo>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f91f 	bl	8004a40 <USB_FlushRxFifo>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004812:	461a      	mov	r2, r3
 8004814:	2300      	movs	r3, #0
 8004816:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481e:	461a      	mov	r2, r3
 8004820:	2300      	movs	r3, #0
 8004822:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482a:	461a      	mov	r2, r3
 800482c:	2300      	movs	r3, #0
 800482e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004830:	2300      	movs	r3, #0
 8004832:	613b      	str	r3, [r7, #16]
 8004834:	e043      	b.n	80048be <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800484c:	d118      	bne.n	8004880 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10a      	bne.n	800486a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004860:	461a      	mov	r2, r3
 8004862:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004866:	6013      	str	r3, [r2, #0]
 8004868:	e013      	b.n	8004892 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004876:	461a      	mov	r2, r3
 8004878:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	e008      	b.n	8004892 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488c:	461a      	mov	r2, r3
 800488e:	2300      	movs	r3, #0
 8004890:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489e:	461a      	mov	r2, r3
 80048a0:	2300      	movs	r3, #0
 80048a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b0:	461a      	mov	r2, r3
 80048b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	3301      	adds	r3, #1
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d3b7      	bcc.n	8004836 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048c6:	2300      	movs	r3, #0
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	e043      	b.n	8004954 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048e2:	d118      	bne.n	8004916 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10a      	bne.n	8004900 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f6:	461a      	mov	r2, r3
 80048f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	e013      	b.n	8004928 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490c:	461a      	mov	r2, r3
 800490e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	e008      	b.n	8004928 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004922:	461a      	mov	r2, r3
 8004924:	2300      	movs	r3, #0
 8004926:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004934:	461a      	mov	r2, r3
 8004936:	2300      	movs	r3, #0
 8004938:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4413      	add	r3, r2
 8004942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004946:	461a      	mov	r2, r3
 8004948:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800494c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	3301      	adds	r3, #1
 8004952:	613b      	str	r3, [r7, #16]
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	429a      	cmp	r2, r3
 800495a:	d3b7      	bcc.n	80048cc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800496a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800496e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800497c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	2b00      	cmp	r3, #0
 8004982:	d105      	bne.n	8004990 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	f043 0210 	orr.w	r2, r3, #16
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699a      	ldr	r2, [r3, #24]
 8004994:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <USB_DevInit+0x2c4>)
 8004996:	4313      	orrs	r3, r2
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800499c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	f043 0208 	orr.w	r2, r3, #8
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d107      	bne.n	80049c4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049bc:	f043 0304 	orr.w	r3, r3, #4
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049d0:	b004      	add	sp, #16
 80049d2:	4770      	bx	lr
 80049d4:	803c3800 	.word	0x803c3800

080049d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	3301      	adds	r3, #1
 80049ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4a13      	ldr	r2, [pc, #76]	; (8004a3c <USB_FlushTxFifo+0x64>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d901      	bls.n	80049f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e01b      	b.n	8004a30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	daf2      	bge.n	80049e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	019b      	lsls	r3, r3, #6
 8004a08:	f043 0220 	orr.w	r2, r3, #32
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3301      	adds	r3, #1
 8004a14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4a08      	ldr	r2, [pc, #32]	; (8004a3c <USB_FlushTxFifo+0x64>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d901      	bls.n	8004a22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e006      	b.n	8004a30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b20      	cmp	r3, #32
 8004a2c:	d0f0      	beq.n	8004a10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	00030d40 	.word	0x00030d40

08004a40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4a11      	ldr	r2, [pc, #68]	; (8004a9c <USB_FlushRxFifo+0x5c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e018      	b.n	8004a90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	daf2      	bge.n	8004a4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2210      	movs	r2, #16
 8004a6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3301      	adds	r3, #1
 8004a74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4a08      	ldr	r2, [pc, #32]	; (8004a9c <USB_FlushRxFifo+0x5c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d901      	bls.n	8004a82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e006      	b.n	8004a90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0310 	and.w	r3, r3, #16
 8004a8a:	2b10      	cmp	r3, #16
 8004a8c:	d0f0      	beq.n	8004a70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	00030d40 	.word	0x00030d40

08004aa0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	68f9      	ldr	r1, [r7, #12]
 8004abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b087      	sub	sp, #28
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 0306 	and.w	r3, r3, #6
 8004aea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d102      	bne.n	8004af8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004af2:	2300      	movs	r3, #0
 8004af4:	75fb      	strb	r3, [r7, #23]
 8004af6:	e00a      	b.n	8004b0e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d002      	beq.n	8004b04 <USB_GetDevSpeed+0x32>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b06      	cmp	r3, #6
 8004b02:	d102      	bne.n	8004b0a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004b04:	2302      	movs	r3, #2
 8004b06:	75fb      	strb	r3, [r7, #23]
 8004b08:	e001      	b.n	8004b0e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004b0a:	230f      	movs	r3, #15
 8004b0c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	785b      	ldrb	r3, [r3, #1]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d13a      	bne.n	8004bae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	f003 030f 	and.w	r3, r3, #15
 8004b48:	2101      	movs	r1, #1
 8004b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	68f9      	ldr	r1, [r7, #12]
 8004b52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b56:	4313      	orrs	r3, r2
 8004b58:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d155      	bne.n	8004c1c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	791b      	ldrb	r3, [r3, #4]
 8004b8a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b8c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	059b      	lsls	r3, r3, #22
 8004b92:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b94:	4313      	orrs	r3, r2
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	0151      	lsls	r1, r2, #5
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	440a      	add	r2, r1
 8004b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004baa:	6013      	str	r3, [r2, #0]
 8004bac:	e036      	b.n	8004c1c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb4:	69da      	ldr	r2, [r3, #28]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc4:	041b      	lsls	r3, r3, #16
 8004bc6:	68f9      	ldr	r1, [r7, #12]
 8004bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d11a      	bne.n	8004c1c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	791b      	ldrb	r3, [r3, #4]
 8004c00:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c02:	430b      	orrs	r3, r1
 8004c04:	4313      	orrs	r3, r2
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	0151      	lsls	r1, r2, #5
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	440a      	add	r2, r1
 8004c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c1a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
	...

08004c2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	785b      	ldrb	r3, [r3, #1]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d161      	bne.n	8004d0c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c5e:	d11f      	bne.n	8004ca0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	0151      	lsls	r1, r2, #5
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	440a      	add	r2, r1
 8004c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c7e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	0151      	lsls	r1, r2, #5
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	440a      	add	r2, r1
 8004c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	f003 030f 	and.w	r3, r3, #15
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	68f9      	ldr	r1, [r7, #12]
 8004cbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cca:	69da      	ldr	r2, [r3, #28]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	68f9      	ldr	r1, [r7, #12]
 8004ce0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	0159      	lsls	r1, r3, #5
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	440b      	add	r3, r1
 8004cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d02:	4619      	mov	r1, r3
 8004d04:	4b35      	ldr	r3, [pc, #212]	; (8004ddc <USB_DeactivateEndpoint+0x1b0>)
 8004d06:	4013      	ands	r3, r2
 8004d08:	600b      	str	r3, [r1, #0]
 8004d0a:	e060      	b.n	8004dce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d22:	d11f      	bne.n	8004d64 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	0151      	lsls	r1, r2, #5
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	440a      	add	r2, r1
 8004d3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d42:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	0151      	lsls	r1, r2, #5
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	440a      	add	r2, r1
 8004d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	f003 030f 	and.w	r3, r3, #15
 8004d74:	2101      	movs	r1, #1
 8004d76:	fa01 f303 	lsl.w	r3, r1, r3
 8004d7a:	041b      	lsls	r3, r3, #16
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	68f9      	ldr	r1, [r7, #12]
 8004d80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d84:	4013      	ands	r3, r2
 8004d86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	2101      	movs	r1, #1
 8004d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9e:	041b      	lsls	r3, r3, #16
 8004da0:	43db      	mvns	r3, r3
 8004da2:	68f9      	ldr	r1, [r7, #12]
 8004da4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004da8:	4013      	ands	r3, r2
 8004daa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	0159      	lsls	r1, r3, #5
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	440b      	add	r3, r1
 8004dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <USB_DeactivateEndpoint+0x1b4>)
 8004dca:	4013      	ands	r3, r2
 8004dcc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	ec337800 	.word	0xec337800
 8004de0:	eff37800 	.word	0xeff37800

08004de4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08a      	sub	sp, #40	; 0x28
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	4613      	mov	r3, r2
 8004df0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	785b      	ldrb	r3, [r3, #1]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	f040 815c 	bne.w	80050be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d132      	bne.n	8004e74 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	0151      	lsls	r1, r2, #5
 8004e20:	69fa      	ldr	r2, [r7, #28]
 8004e22:	440a      	add	r2, r1
 8004e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	0151      	lsls	r1, r2, #5
 8004e44:	69fa      	ldr	r2, [r7, #28]
 8004e46:	440a      	add	r2, r1
 8004e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	0151      	lsls	r1, r2, #5
 8004e64:	69fa      	ldr	r2, [r7, #28]
 8004e66:	440a      	add	r2, r1
 8004e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e6c:	0cdb      	lsrs	r3, r3, #19
 8004e6e:	04db      	lsls	r3, r3, #19
 8004e70:	6113      	str	r3, [r2, #16]
 8004e72:	e074      	b.n	8004f5e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	0151      	lsls	r1, r2, #5
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	440a      	add	r2, r1
 8004e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8e:	0cdb      	lsrs	r3, r3, #19
 8004e90:	04db      	lsls	r3, r3, #19
 8004e92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	0151      	lsls	r1, r2, #5
 8004ea6:	69fa      	ldr	r2, [r7, #28]
 8004ea8:	440a      	add	r2, r1
 8004eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004eb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004eb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	6999      	ldr	r1, [r3, #24]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	440b      	add	r3, r1
 8004ed0:	1e59      	subs	r1, r3, #1
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004eda:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004edc:	4b9d      	ldr	r3, [pc, #628]	; (8005154 <USB_EPStartXfer+0x370>)
 8004ede:	400b      	ands	r3, r1
 8004ee0:	69b9      	ldr	r1, [r7, #24]
 8004ee2:	0148      	lsls	r0, r1, #5
 8004ee4:	69f9      	ldr	r1, [r7, #28]
 8004ee6:	4401      	add	r1, r0
 8004ee8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004eec:	4313      	orrs	r3, r2
 8004eee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f06:	69b9      	ldr	r1, [r7, #24]
 8004f08:	0148      	lsls	r0, r1, #5
 8004f0a:	69f9      	ldr	r1, [r7, #28]
 8004f0c:	4401      	add	r1, r0
 8004f0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f12:	4313      	orrs	r3, r2
 8004f14:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	791b      	ldrb	r3, [r3, #4]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d11f      	bne.n	8004f5e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	0151      	lsls	r1, r2, #5
 8004f30:	69fa      	ldr	r2, [r7, #28]
 8004f32:	440a      	add	r2, r1
 8004f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f38:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004f3c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	0151      	lsls	r1, r2, #5
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	440a      	add	r2, r1
 8004f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f5c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d14b      	bne.n	8004ffc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d009      	beq.n	8004f80 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f78:	461a      	mov	r2, r3
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	791b      	ldrb	r3, [r3, #4]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d128      	bne.n	8004fda <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d110      	bne.n	8004fba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	0151      	lsls	r1, r2, #5
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	440a      	add	r2, r1
 8004fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	e00f      	b.n	8004fda <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	0151      	lsls	r1, r2, #5
 8004fcc:	69fa      	ldr	r2, [r7, #28]
 8004fce:	440a      	add	r2, r1
 8004fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	0151      	lsls	r1, r2, #5
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	440a      	add	r2, r1
 8004ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	e133      	b.n	8005264 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	4413      	add	r3, r2
 8005004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	0151      	lsls	r1, r2, #5
 800500e:	69fa      	ldr	r2, [r7, #28]
 8005010:	440a      	add	r2, r1
 8005012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005016:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800501a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	791b      	ldrb	r3, [r3, #4]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d015      	beq.n	8005050 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 811b 	beq.w	8005264 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	2101      	movs	r1, #1
 8005040:	fa01 f303 	lsl.w	r3, r1, r3
 8005044:	69f9      	ldr	r1, [r7, #28]
 8005046:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800504a:	4313      	orrs	r3, r2
 800504c:	634b      	str	r3, [r1, #52]	; 0x34
 800504e:	e109      	b.n	8005264 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505c:	2b00      	cmp	r3, #0
 800505e:	d110      	bne.n	8005082 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	0151      	lsls	r1, r2, #5
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	440a      	add	r2, r1
 8005076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800507a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	e00f      	b.n	80050a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	0151      	lsls	r1, r2, #5
 8005094:	69fa      	ldr	r2, [r7, #28]
 8005096:	440a      	add	r2, r1
 8005098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800509c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	6919      	ldr	r1, [r3, #16]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	781a      	ldrb	r2, [r3, #0]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	b298      	uxth	r0, r3
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	4603      	mov	r3, r0
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 fade 	bl	8005678 <USB_WritePacket>
 80050bc:	e0d2      	b.n	8005264 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	0151      	lsls	r1, r2, #5
 80050d0:	69fa      	ldr	r2, [r7, #28]
 80050d2:	440a      	add	r2, r1
 80050d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050d8:	0cdb      	lsrs	r3, r3, #19
 80050da:	04db      	lsls	r3, r3, #19
 80050dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	0151      	lsls	r1, r2, #5
 80050f0:	69fa      	ldr	r2, [r7, #28]
 80050f2:	440a      	add	r2, r1
 80050f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005100:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d126      	bne.n	8005158 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005116:	691a      	ldr	r2, [r3, #16]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005120:	69b9      	ldr	r1, [r7, #24]
 8005122:	0148      	lsls	r0, r1, #5
 8005124:	69f9      	ldr	r1, [r7, #28]
 8005126:	4401      	add	r1, r0
 8005128:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800512c:	4313      	orrs	r3, r2
 800512e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	0151      	lsls	r1, r2, #5
 8005142:	69fa      	ldr	r2, [r7, #28]
 8005144:	440a      	add	r2, r1
 8005146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800514a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800514e:	6113      	str	r3, [r2, #16]
 8005150:	e03a      	b.n	80051c8 <USB_EPStartXfer+0x3e4>
 8005152:	bf00      	nop
 8005154:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	699a      	ldr	r2, [r3, #24]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	4413      	add	r3, r2
 8005162:	1e5a      	subs	r2, r3, #1
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	fbb2 f3f3 	udiv	r3, r2, r3
 800516c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	8afa      	ldrh	r2, [r7, #22]
 8005174:	fb03 f202 	mul.w	r2, r3, r2
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005188:	691a      	ldr	r2, [r3, #16]
 800518a:	8afb      	ldrh	r3, [r7, #22]
 800518c:	04d9      	lsls	r1, r3, #19
 800518e:	4b38      	ldr	r3, [pc, #224]	; (8005270 <USB_EPStartXfer+0x48c>)
 8005190:	400b      	ands	r3, r1
 8005192:	69b9      	ldr	r1, [r7, #24]
 8005194:	0148      	lsls	r0, r1, #5
 8005196:	69f9      	ldr	r1, [r7, #28]
 8005198:	4401      	add	r1, r0
 800519a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800519e:	4313      	orrs	r3, r2
 80051a0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ae:	691a      	ldr	r2, [r3, #16]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b8:	69b9      	ldr	r1, [r7, #24]
 80051ba:	0148      	lsls	r0, r1, #5
 80051bc:	69f9      	ldr	r1, [r7, #28]
 80051be:	4401      	add	r1, r0
 80051c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051c4:	4313      	orrs	r3, r2
 80051c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80051c8:	79fb      	ldrb	r3, [r7, #7]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d10d      	bne.n	80051ea <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d009      	beq.n	80051ea <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	6919      	ldr	r1, [r3, #16]
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e6:	460a      	mov	r2, r1
 80051e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	791b      	ldrb	r3, [r3, #4]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d128      	bne.n	8005244 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d110      	bne.n	8005224 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	0151      	lsls	r1, r2, #5
 8005214:	69fa      	ldr	r2, [r7, #28]
 8005216:	440a      	add	r2, r1
 8005218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800521c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	e00f      	b.n	8005244 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	0151      	lsls	r1, r2, #5
 8005236:	69fa      	ldr	r2, [r7, #28]
 8005238:	440a      	add	r2, r1
 800523a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800523e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005242:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	0151      	lsls	r1, r2, #5
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	440a      	add	r2, r1
 800525a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800525e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005262:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3720      	adds	r7, #32
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	1ff80000 	.word	0x1ff80000

08005274 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	4613      	mov	r3, r2
 8005280:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	785b      	ldrb	r3, [r3, #1]
 8005290:	2b01      	cmp	r3, #1
 8005292:	f040 80ce 	bne.w	8005432 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d132      	bne.n	8005304 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	0151      	lsls	r1, r2, #5
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	440a      	add	r2, r1
 80052b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	0151      	lsls	r1, r2, #5
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	440a      	add	r2, r1
 80052d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	0151      	lsls	r1, r2, #5
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	440a      	add	r2, r1
 80052f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052fc:	0cdb      	lsrs	r3, r3, #19
 80052fe:	04db      	lsls	r3, r3, #19
 8005300:	6113      	str	r3, [r2, #16]
 8005302:	e04e      	b.n	80053a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	0151      	lsls	r1, r2, #5
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	440a      	add	r2, r1
 800531a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800531e:	0cdb      	lsrs	r3, r3, #19
 8005320:	04db      	lsls	r3, r3, #19
 8005322:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	4413      	add	r3, r2
 800532c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	0151      	lsls	r1, r2, #5
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	440a      	add	r2, r1
 800533a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800533e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005342:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005346:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	699a      	ldr	r2, [r3, #24]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	429a      	cmp	r2, r3
 8005352:	d903      	bls.n	800535c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	0151      	lsls	r1, r2, #5
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	440a      	add	r2, r1
 8005372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005376:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800537a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005388:	691a      	ldr	r2, [r3, #16]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005392:	6939      	ldr	r1, [r7, #16]
 8005394:	0148      	lsls	r0, r1, #5
 8005396:	6979      	ldr	r1, [r7, #20]
 8005398:	4401      	add	r1, r0
 800539a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800539e:	4313      	orrs	r3, r2
 80053a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d11e      	bne.n	80053e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d009      	beq.n	80053c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053bc:	461a      	mov	r2, r3
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	0151      	lsls	r1, r2, #5
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	440a      	add	r2, r1
 80053da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053e2:	6013      	str	r3, [r2, #0]
 80053e4:	e097      	b.n	8005516 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	0151      	lsls	r1, r2, #5
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	440a      	add	r2, r1
 80053fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005400:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005404:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 8083 	beq.w	8005516 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	2101      	movs	r1, #1
 8005422:	fa01 f303 	lsl.w	r3, r1, r3
 8005426:	6979      	ldr	r1, [r7, #20]
 8005428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800542c:	4313      	orrs	r3, r2
 800542e:	634b      	str	r3, [r1, #52]	; 0x34
 8005430:	e071      	b.n	8005516 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	0151      	lsls	r1, r2, #5
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	440a      	add	r2, r1
 8005448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800544c:	0cdb      	lsrs	r3, r3, #19
 800544e:	04db      	lsls	r3, r3, #19
 8005450:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	0151      	lsls	r1, r2, #5
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	440a      	add	r2, r1
 8005468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800546c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005470:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005474:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	0151      	lsls	r1, r2, #5
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	440a      	add	r2, r1
 80054a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054c4:	6939      	ldr	r1, [r7, #16]
 80054c6:	0148      	lsls	r0, r1, #5
 80054c8:	6979      	ldr	r1, [r7, #20]
 80054ca:	4401      	add	r1, r0
 80054cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054d0:	4313      	orrs	r3, r2
 80054d2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80054d4:	79fb      	ldrb	r3, [r7, #7]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d10d      	bne.n	80054f6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d009      	beq.n	80054f6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	6919      	ldr	r1, [r3, #16]
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f2:	460a      	mov	r2, r1
 80054f4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	0151      	lsls	r1, r2, #5
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	440a      	add	r2, r1
 800550c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005510:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005514:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	785b      	ldrb	r3, [r3, #1]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d14a      	bne.n	80055d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800555a:	f040 8086 	bne.w	800566a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	7812      	ldrb	r2, [r2, #0]
 8005572:	0151      	lsls	r1, r2, #5
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	440a      	add	r2, r1
 8005578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800557c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005580:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	7812      	ldrb	r2, [r2, #0]
 8005596:	0151      	lsls	r1, r2, #5
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	440a      	add	r2, r1
 800559c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3301      	adds	r3, #1
 80055aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d902      	bls.n	80055bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	75fb      	strb	r3, [r7, #23]
          break;
 80055ba:	e056      	b.n	800566a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055d4:	d0e7      	beq.n	80055a6 <USB_EPStopXfer+0x82>
 80055d6:	e048      	b.n	800566a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055f0:	d13b      	bne.n	800566a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	7812      	ldrb	r2, [r2, #0]
 8005606:	0151      	lsls	r1, r2, #5
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	440a      	add	r2, r1
 800560c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005610:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005614:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	7812      	ldrb	r2, [r2, #0]
 800562a:	0151      	lsls	r1, r2, #5
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	440a      	add	r2, r1
 8005630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005634:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005638:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3301      	adds	r3, #1
 800563e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f242 7210 	movw	r2, #10000	; 0x2710
 8005646:	4293      	cmp	r3, r2
 8005648:	d902      	bls.n	8005650 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	75fb      	strb	r3, [r7, #23]
          break;
 800564e:	e00c      	b.n	800566a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005668:	d0e7      	beq.n	800563a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800566a:	7dfb      	ldrb	r3, [r7, #23]
}
 800566c:	4618      	mov	r0, r3
 800566e:	371c      	adds	r7, #28
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005678:	b480      	push	{r7}
 800567a:	b089      	sub	sp, #36	; 0x24
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	4611      	mov	r1, r2
 8005684:	461a      	mov	r2, r3
 8005686:	460b      	mov	r3, r1
 8005688:	71fb      	strb	r3, [r7, #7]
 800568a:	4613      	mov	r3, r2
 800568c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005696:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800569a:	2b00      	cmp	r3, #0
 800569c:	d123      	bne.n	80056e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800569e:	88bb      	ldrh	r3, [r7, #4]
 80056a0:	3303      	adds	r3, #3
 80056a2:	089b      	lsrs	r3, r3, #2
 80056a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80056a6:	2300      	movs	r3, #0
 80056a8:	61bb      	str	r3, [r7, #24]
 80056aa:	e018      	b.n	80056de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80056ac:	79fb      	ldrb	r3, [r7, #7]
 80056ae:	031a      	lsls	r2, r3, #12
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056b8:	461a      	mov	r2, r3
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	3301      	adds	r3, #1
 80056c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	3301      	adds	r3, #1
 80056ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	3301      	adds	r3, #1
 80056d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	3301      	adds	r3, #1
 80056d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	3301      	adds	r3, #1
 80056dc:	61bb      	str	r3, [r7, #24]
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d3e2      	bcc.n	80056ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3724      	adds	r7, #36	; 0x24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b08b      	sub	sp, #44	; 0x2c
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	4613      	mov	r3, r2
 8005700:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800570a:	88fb      	ldrh	r3, [r7, #6]
 800570c:	089b      	lsrs	r3, r3, #2
 800570e:	b29b      	uxth	r3, r3
 8005710:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005712:	88fb      	ldrh	r3, [r7, #6]
 8005714:	f003 0303 	and.w	r3, r3, #3
 8005718:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800571a:	2300      	movs	r3, #0
 800571c:	623b      	str	r3, [r7, #32]
 800571e:	e014      	b.n	800574a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	601a      	str	r2, [r3, #0]
    pDest++;
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	3301      	adds	r3, #1
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	3301      	adds	r3, #1
 8005736:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	3301      	adds	r3, #1
 800573c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	3301      	adds	r3, #1
 8005742:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	3301      	adds	r3, #1
 8005748:	623b      	str	r3, [r7, #32]
 800574a:	6a3a      	ldr	r2, [r7, #32]
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	429a      	cmp	r2, r3
 8005750:	d3e6      	bcc.n	8005720 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005752:	8bfb      	ldrh	r3, [r7, #30]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01e      	beq.n	8005796 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005762:	461a      	mov	r2, r3
 8005764:	f107 0310 	add.w	r3, r7, #16
 8005768:	6812      	ldr	r2, [r2, #0]
 800576a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	b2db      	uxtb	r3, r3
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	fa22 f303 	lsr.w	r3, r2, r3
 8005778:	b2da      	uxtb	r2, r3
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	701a      	strb	r2, [r3, #0]
      i++;
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	3301      	adds	r3, #1
 8005782:	623b      	str	r3, [r7, #32]
      pDest++;
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	3301      	adds	r3, #1
 8005788:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800578a:	8bfb      	ldrh	r3, [r7, #30]
 800578c:	3b01      	subs	r3, #1
 800578e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005790:	8bfb      	ldrh	r3, [r7, #30]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1ea      	bne.n	800576c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005798:	4618      	mov	r0, r3
 800579a:	372c      	adds	r7, #44	; 0x2c
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	785b      	ldrb	r3, [r3, #1]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d12c      	bne.n	800581a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	db12      	blt.n	80057f8 <USB_EPSetStall+0x54>
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00f      	beq.n	80057f8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	0151      	lsls	r1, r2, #5
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	440a      	add	r2, r1
 80057ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057f6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	0151      	lsls	r1, r2, #5
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	440a      	add	r2, r1
 800580e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005812:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005816:	6013      	str	r3, [r2, #0]
 8005818:	e02b      	b.n	8005872 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	db12      	blt.n	8005852 <USB_EPSetStall+0xae>
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00f      	beq.n	8005852 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	0151      	lsls	r1, r2, #5
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	440a      	add	r2, r1
 8005848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800584c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005850:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	0151      	lsls	r1, r2, #5
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	440a      	add	r2, r1
 8005868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800586c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005870:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	785b      	ldrb	r3, [r3, #1]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d128      	bne.n	80058ee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	0151      	lsls	r1, r2, #5
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	440a      	add	r2, r1
 80058b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058ba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	791b      	ldrb	r3, [r3, #4]
 80058c0:	2b03      	cmp	r3, #3
 80058c2:	d003      	beq.n	80058cc <USB_EPClearStall+0x4c>
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	791b      	ldrb	r3, [r3, #4]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d138      	bne.n	800593e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	0151      	lsls	r1, r2, #5
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	440a      	add	r2, r1
 80058e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ea:	6013      	str	r3, [r2, #0]
 80058ec:	e027      	b.n	800593e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	0151      	lsls	r1, r2, #5
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	440a      	add	r2, r1
 8005904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005908:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800590c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	791b      	ldrb	r3, [r3, #4]
 8005912:	2b03      	cmp	r3, #3
 8005914:	d003      	beq.n	800591e <USB_EPClearStall+0x9e>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	791b      	ldrb	r3, [r3, #4]
 800591a:	2b02      	cmp	r3, #2
 800591c:	d10f      	bne.n	800593e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4413      	add	r3, r2
 8005926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	0151      	lsls	r1, r2, #5
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	440a      	add	r2, r1
 8005934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800593c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	460b      	mov	r3, r1
 8005956:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800596a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800596e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	011b      	lsls	r3, r3, #4
 800597c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005980:	68f9      	ldr	r1, [r7, #12]
 8005982:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005986:	4313      	orrs	r3, r2
 8005988:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059b2:	f023 0303 	bic.w	r3, r3, #3
 80059b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059c6:	f023 0302 	bic.w	r3, r3, #2
 80059ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059da:	b480      	push	{r7}
 80059dc:	b085      	sub	sp, #20
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059f4:	f023 0303 	bic.w	r3, r3, #3
 80059f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a08:	f043 0302 	orr.w	r3, r3, #2
 8005a0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4013      	ands	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a34:	68fb      	ldr	r3, [r7, #12]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b085      	sub	sp, #20
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	4013      	ands	r3, r2
 8005a64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	0c1b      	lsrs	r3, r3, #16
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b085      	sub	sp, #20
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	4013      	ands	r3, r2
 8005a98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	b29b      	uxth	r3, r3
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b085      	sub	sp, #20
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005aba:	78fb      	ldrb	r3, [r7, #3]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b087      	sub	sp, #28
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	460b      	mov	r3, r1
 8005af0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b08:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005b0a:	78fb      	ldrb	r3, [r7, #3]
 8005b0c:	f003 030f 	and.w	r3, r3, #15
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	fa22 f303 	lsr.w	r3, r2, r3
 8005b16:	01db      	lsls	r3, r3, #7
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4013      	ands	r3, r2
 8005b32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b34:	68bb      	ldr	r3, [r7, #8]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b085      	sub	sp, #20
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b78:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005b7c:	f023 0307 	bic.w	r3, r3, #7
 8005b80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	460b      	mov	r3, r1
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	333c      	adds	r3, #60	; 0x3c
 8005bba:	3304      	adds	r3, #4
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	4a26      	ldr	r2, [pc, #152]	; (8005c5c <USB_EP0_OutStart+0xb8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d90a      	bls.n	8005bde <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bd8:	d101      	bne.n	8005bde <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	e037      	b.n	8005c4e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be4:	461a      	mov	r2, r3
 8005be6:	2300      	movs	r3, #0
 8005be8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c0c:	f043 0318 	orr.w	r3, r3, #24
 8005c10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c20:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005c24:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005c26:	7afb      	ldrb	r3, [r7, #11]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d10f      	bne.n	8005c4c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c32:	461a      	mov	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c46:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005c4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	4f54300a 	.word	0x4f54300a

08005c60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4a13      	ldr	r2, [pc, #76]	; (8005cc4 <USB_CoreReset+0x64>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d901      	bls.n	8005c7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e01b      	b.n	8005cb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	daf2      	bge.n	8005c6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f043 0201 	orr.w	r2, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4a09      	ldr	r2, [pc, #36]	; (8005cc4 <USB_CoreReset+0x64>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d901      	bls.n	8005ca8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e006      	b.n	8005cb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d0f0      	beq.n	8005c96 <USB_CoreReset+0x36>

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	00030d40 	.word	0x00030d40

08005cc8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005cd4:	2010      	movs	r0, #16
 8005cd6:	f002 f96d 	bl	8007fb4 <USBD_static_malloc>
 8005cda:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d109      	bne.n	8005cf6 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	32b0      	adds	r2, #176	; 0xb0
 8005cec:	2100      	movs	r1, #0
 8005cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	e048      	b.n	8005d88 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	32b0      	adds	r2, #176	; 0xb0
 8005d00:	68f9      	ldr	r1, [r7, #12]
 8005d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	32b0      	adds	r2, #176	; 0xb0
 8005d10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	7c1b      	ldrb	r3, [r3, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10d      	bne.n	8005d3e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005d22:	4b1b      	ldr	r3, [pc, #108]	; (8005d90 <USBD_HID_Init+0xc8>)
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	f003 020f 	and.w	r2, r3, #15
 8005d2a:	6879      	ldr	r1, [r7, #4]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	440b      	add	r3, r1
 8005d36:	3326      	adds	r3, #38	; 0x26
 8005d38:	2207      	movs	r2, #7
 8005d3a:	801a      	strh	r2, [r3, #0]
 8005d3c:	e00c      	b.n	8005d58 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005d3e:	4b14      	ldr	r3, [pc, #80]	; (8005d90 <USBD_HID_Init+0xc8>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	f003 020f 	and.w	r2, r3, #15
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	440b      	add	r3, r1
 8005d52:	3326      	adds	r3, #38	; 0x26
 8005d54:	220a      	movs	r2, #10
 8005d56:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005d58:	4b0d      	ldr	r3, [pc, #52]	; (8005d90 <USBD_HID_Init+0xc8>)
 8005d5a:	7819      	ldrb	r1, [r3, #0]
 8005d5c:	2304      	movs	r3, #4
 8005d5e:	2203      	movs	r2, #3
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f002 f816 	bl	8007d92 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005d66:	4b0a      	ldr	r3, [pc, #40]	; (8005d90 <USBD_HID_Init+0xc8>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	f003 020f 	and.w	r2, r3, #15
 8005d6e:	6879      	ldr	r1, [r7, #4]
 8005d70:	4613      	mov	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	3324      	adds	r3, #36	; 0x24
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	2000013e 	.word	0x2000013e

08005d94 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005da0:	4b1f      	ldr	r3, [pc, #124]	; (8005e20 <USBD_HID_DeInit+0x8c>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	4619      	mov	r1, r3
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f002 f819 	bl	8007dde <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005dac:	4b1c      	ldr	r3, [pc, #112]	; (8005e20 <USBD_HID_DeInit+0x8c>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	f003 020f 	and.w	r2, r3, #15
 8005db4:	6879      	ldr	r1, [r7, #4]
 8005db6:	4613      	mov	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	440b      	add	r3, r1
 8005dc0:	3324      	adds	r3, #36	; 0x24
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005dc6:	4b16      	ldr	r3, [pc, #88]	; (8005e20 <USBD_HID_DeInit+0x8c>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	f003 020f 	and.w	r2, r3, #15
 8005dce:	6879      	ldr	r1, [r7, #4]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	440b      	add	r3, r1
 8005dda:	3326      	adds	r3, #38	; 0x26
 8005ddc:	2200      	movs	r2, #0
 8005dde:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	32b0      	adds	r2, #176	; 0xb0
 8005dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d011      	beq.n	8005e16 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	32b0      	adds	r2, #176	; 0xb0
 8005dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f002 f8e5 	bl	8007fd0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	32b0      	adds	r2, #176	; 0xb0
 8005e10:	2100      	movs	r1, #0
 8005e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	2000013e 	.word	0x2000013e

08005e24 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	32b0      	adds	r2, #176	; 0xb0
 8005e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e0e8      	b.n	8006022 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d046      	beq.n	8005eea <USBD_HID_Setup+0xc6>
 8005e5c:	2b20      	cmp	r3, #32
 8005e5e:	f040 80d8 	bne.w	8006012 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	785b      	ldrb	r3, [r3, #1]
 8005e66:	3b02      	subs	r3, #2
 8005e68:	2b09      	cmp	r3, #9
 8005e6a:	d836      	bhi.n	8005eda <USBD_HID_Setup+0xb6>
 8005e6c:	a201      	add	r2, pc, #4	; (adr r2, 8005e74 <USBD_HID_Setup+0x50>)
 8005e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e72:	bf00      	nop
 8005e74:	08005ecb 	.word	0x08005ecb
 8005e78:	08005eab 	.word	0x08005eab
 8005e7c:	08005edb 	.word	0x08005edb
 8005e80:	08005edb 	.word	0x08005edb
 8005e84:	08005edb 	.word	0x08005edb
 8005e88:	08005edb 	.word	0x08005edb
 8005e8c:	08005edb 	.word	0x08005edb
 8005e90:	08005edb 	.word	0x08005edb
 8005e94:	08005eb9 	.word	0x08005eb9
 8005e98:	08005e9d 	.word	0x08005e9d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	885b      	ldrh	r3, [r3, #2]
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	601a      	str	r2, [r3, #0]
          break;
 8005ea8:	e01e      	b.n	8005ee8 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f001 fbd5 	bl	8007660 <USBD_CtlSendData>
          break;
 8005eb6:	e017      	b.n	8005ee8 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	885b      	ldrh	r3, [r3, #2]
 8005ebc:	0a1b      	lsrs	r3, r3, #8
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	605a      	str	r2, [r3, #4]
          break;
 8005ec8:	e00e      	b.n	8005ee8 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	2201      	movs	r2, #1
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f001 fbc4 	bl	8007660 <USBD_CtlSendData>
          break;
 8005ed8:	e006      	b.n	8005ee8 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005eda:	6839      	ldr	r1, [r7, #0]
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f001 fb4e 	bl	800757e <USBD_CtlError>
          ret = USBD_FAIL;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ee6:	bf00      	nop
      }
      break;
 8005ee8:	e09a      	b.n	8006020 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	785b      	ldrb	r3, [r3, #1]
 8005eee:	2b0b      	cmp	r3, #11
 8005ef0:	f200 8086 	bhi.w	8006000 <USBD_HID_Setup+0x1dc>
 8005ef4:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <USBD_HID_Setup+0xd8>)
 8005ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efa:	bf00      	nop
 8005efc:	08005f2d 	.word	0x08005f2d
 8005f00:	0800600f 	.word	0x0800600f
 8005f04:	08006001 	.word	0x08006001
 8005f08:	08006001 	.word	0x08006001
 8005f0c:	08006001 	.word	0x08006001
 8005f10:	08006001 	.word	0x08006001
 8005f14:	08005f57 	.word	0x08005f57
 8005f18:	08006001 	.word	0x08006001
 8005f1c:	08006001 	.word	0x08006001
 8005f20:	08006001 	.word	0x08006001
 8005f24:	08005faf 	.word	0x08005faf
 8005f28:	08005fd9 	.word	0x08005fd9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b03      	cmp	r3, #3
 8005f36:	d107      	bne.n	8005f48 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005f38:	f107 030a 	add.w	r3, r7, #10
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	4619      	mov	r1, r3
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f001 fb8d 	bl	8007660 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f46:	e063      	b.n	8006010 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005f48:	6839      	ldr	r1, [r7, #0]
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f001 fb17 	bl	800757e <USBD_CtlError>
            ret = USBD_FAIL;
 8005f50:	2303      	movs	r3, #3
 8005f52:	75fb      	strb	r3, [r7, #23]
          break;
 8005f54:	e05c      	b.n	8006010 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	885b      	ldrh	r3, [r3, #2]
 8005f5a:	0a1b      	lsrs	r3, r3, #8
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	2b22      	cmp	r3, #34	; 0x22
 8005f60:	d108      	bne.n	8005f74 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	88db      	ldrh	r3, [r3, #6]
 8005f66:	2b4a      	cmp	r3, #74	; 0x4a
 8005f68:	bf28      	it	cs
 8005f6a:	234a      	movcs	r3, #74	; 0x4a
 8005f6c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005f6e:	4b2f      	ldr	r3, [pc, #188]	; (800602c <USBD_HID_Setup+0x208>)
 8005f70:	613b      	str	r3, [r7, #16]
 8005f72:	e015      	b.n	8005fa0 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	885b      	ldrh	r3, [r3, #2]
 8005f78:	0a1b      	lsrs	r3, r3, #8
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	2b21      	cmp	r3, #33	; 0x21
 8005f7e:	d108      	bne.n	8005f92 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005f80:	4b2b      	ldr	r3, [pc, #172]	; (8006030 <USBD_HID_Setup+0x20c>)
 8005f82:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	88db      	ldrh	r3, [r3, #6]
 8005f88:	2b09      	cmp	r3, #9
 8005f8a:	bf28      	it	cs
 8005f8c:	2309      	movcs	r3, #9
 8005f8e:	82bb      	strh	r3, [r7, #20]
 8005f90:	e006      	b.n	8005fa0 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f001 faf2 	bl	800757e <USBD_CtlError>
            ret = USBD_FAIL;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	75fb      	strb	r3, [r7, #23]
            break;
 8005f9e:	e037      	b.n	8006010 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005fa0:	8abb      	ldrh	r3, [r7, #20]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	6939      	ldr	r1, [r7, #16]
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f001 fb5a 	bl	8007660 <USBD_CtlSendData>
          break;
 8005fac:	e030      	b.n	8006010 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	d107      	bne.n	8005fca <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f001 fb4c 	bl	8007660 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fc8:	e022      	b.n	8006010 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005fca:	6839      	ldr	r1, [r7, #0]
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f001 fad6 	bl	800757e <USBD_CtlError>
            ret = USBD_FAIL;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	75fb      	strb	r3, [r7, #23]
          break;
 8005fd6:	e01b      	b.n	8006010 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b03      	cmp	r3, #3
 8005fe2:	d106      	bne.n	8005ff2 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	885b      	ldrh	r3, [r3, #2]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	461a      	mov	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ff0:	e00e      	b.n	8006010 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005ff2:	6839      	ldr	r1, [r7, #0]
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f001 fac2 	bl	800757e <USBD_CtlError>
            ret = USBD_FAIL;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	75fb      	strb	r3, [r7, #23]
          break;
 8005ffe:	e007      	b.n	8006010 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f001 fabb 	bl	800757e <USBD_CtlError>
          ret = USBD_FAIL;
 8006008:	2303      	movs	r3, #3
 800600a:	75fb      	strb	r3, [r7, #23]
          break;
 800600c:	e000      	b.n	8006010 <USBD_HID_Setup+0x1ec>
          break;
 800600e:	bf00      	nop
      }
      break;
 8006010:	e006      	b.n	8006020 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8006012:	6839      	ldr	r1, [r7, #0]
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f001 fab2 	bl	800757e <USBD_CtlError>
      ret = USBD_FAIL;
 800601a:	2303      	movs	r3, #3
 800601c:	75fb      	strb	r3, [r7, #23]
      break;
 800601e:	bf00      	nop
  }

  return (uint8_t)ret;
 8006020:	7dfb      	ldrb	r3, [r7, #23]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	200000f4 	.word	0x200000f4
 8006030:	200000dc 	.word	0x200000dc

08006034 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	4613      	mov	r3, r2
 8006040:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	32b0      	adds	r2, #176	; 0xb0
 800604c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006050:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006058:	2303      	movs	r3, #3
 800605a:	e014      	b.n	8006086 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b03      	cmp	r3, #3
 8006066:	d10d      	bne.n	8006084 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	7b1b      	ldrb	r3, [r3, #12]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d109      	bne.n	8006084 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	2201      	movs	r2, #1
 8006074:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8006076:	4b06      	ldr	r3, [pc, #24]	; (8006090 <USBD_HID_SendReport+0x5c>)
 8006078:	7819      	ldrb	r1, [r3, #0]
 800607a:	88fb      	ldrh	r3, [r7, #6]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f001 ff55 	bl	8007f2e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	2000013e 	.word	0x2000013e

08006094 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800609c:	2181      	movs	r1, #129	; 0x81
 800609e:	4809      	ldr	r0, [pc, #36]	; (80060c4 <USBD_HID_GetFSCfgDesc+0x30>)
 80060a0:	f000 fc35 	bl	800690e <USBD_GetEpDesc>
 80060a4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d002      	beq.n	80060b2 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	220a      	movs	r2, #10
 80060b0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2222      	movs	r2, #34	; 0x22
 80060b6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80060b8:	4b02      	ldr	r3, [pc, #8]	; (80060c4 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	200000b8 	.word	0x200000b8

080060c8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80060d0:	2181      	movs	r1, #129	; 0x81
 80060d2:	4809      	ldr	r0, [pc, #36]	; (80060f8 <USBD_HID_GetHSCfgDesc+0x30>)
 80060d4:	f000 fc1b 	bl	800690e <USBD_GetEpDesc>
 80060d8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2207      	movs	r2, #7
 80060e4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2222      	movs	r2, #34	; 0x22
 80060ea:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80060ec:	4b02      	ldr	r3, [pc, #8]	; (80060f8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	200000b8 	.word	0x200000b8

080060fc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006104:	2181      	movs	r1, #129	; 0x81
 8006106:	4809      	ldr	r0, [pc, #36]	; (800612c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8006108:	f000 fc01 	bl	800690e <USBD_GetEpDesc>
 800610c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	220a      	movs	r2, #10
 8006118:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2222      	movs	r2, #34	; 0x22
 800611e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006120:	4b02      	ldr	r3, [pc, #8]	; (800612c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	200000b8 	.word	0x200000b8

08006130 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	460b      	mov	r3, r1
 800613a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	32b0      	adds	r2, #176	; 0xb0
 8006146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614a:	2200      	movs	r2, #0
 800614c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	220a      	movs	r2, #10
 8006168:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800616a:	4b03      	ldr	r3, [pc, #12]	; (8006178 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800616c:	4618      	mov	r0, r3
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	200000e8 	.word	0x200000e8

0800617c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	4613      	mov	r3, r2
 8006188:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006190:	2303      	movs	r3, #3
 8006192:	e01f      	b.n	80061d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	79fa      	ldrb	r2, [r7, #7]
 80061c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f001 fd7b 	bl	8007cc4 <USBD_LL_Init>
 80061ce:	4603      	mov	r3, r0
 80061d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e025      	b.n	8006240 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	32ae      	adds	r2, #174	; 0xae
 8006206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00f      	beq.n	8006230 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	32ae      	adds	r2, #174	; 0xae
 800621a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	f107 020e 	add.w	r2, r7, #14
 8006224:	4610      	mov	r0, r2
 8006226:	4798      	blx	r3
 8006228:	4602      	mov	r2, r0
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006236:	1c5a      	adds	r2, r3, #1
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f001 fd83 	bl	8007d5c <USBD_LL_Start>
 8006256:	4603      	mov	r3, r0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006268:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800626a:	4618      	mov	r0, r3
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	460b      	mov	r3, r1
 8006280:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800628c:	2b00      	cmp	r3, #0
 800628e:	d009      	beq.n	80062a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	78fa      	ldrb	r2, [r7, #3]
 800629a:	4611      	mov	r1, r2
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	4798      	blx	r3
 80062a0:	4603      	mov	r3, r0
 80062a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	460b      	mov	r3, r1
 80062b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80062ba:	2300      	movs	r3, #0
 80062bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	78fa      	ldrb	r2, [r7, #3]
 80062c8:	4611      	mov	r1, r2
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	4798      	blx	r3
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d001      	beq.n	80062d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80062d4:	2303      	movs	r3, #3
 80062d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f001 f908 	bl	800750a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006308:	461a      	mov	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006316:	f003 031f 	and.w	r3, r3, #31
 800631a:	2b02      	cmp	r3, #2
 800631c:	d01a      	beq.n	8006354 <USBD_LL_SetupStage+0x72>
 800631e:	2b02      	cmp	r3, #2
 8006320:	d822      	bhi.n	8006368 <USBD_LL_SetupStage+0x86>
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <USBD_LL_SetupStage+0x4a>
 8006326:	2b01      	cmp	r3, #1
 8006328:	d00a      	beq.n	8006340 <USBD_LL_SetupStage+0x5e>
 800632a:	e01d      	b.n	8006368 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fb5f 	bl	80069f8 <USBD_StdDevReq>
 800633a:	4603      	mov	r3, r0
 800633c:	73fb      	strb	r3, [r7, #15]
      break;
 800633e:	e020      	b.n	8006382 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006346:	4619      	mov	r1, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fbc7 	bl	8006adc <USBD_StdItfReq>
 800634e:	4603      	mov	r3, r0
 8006350:	73fb      	strb	r3, [r7, #15]
      break;
 8006352:	e016      	b.n	8006382 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800635a:	4619      	mov	r1, r3
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fc29 	bl	8006bb4 <USBD_StdEPReq>
 8006362:	4603      	mov	r3, r0
 8006364:	73fb      	strb	r3, [r7, #15]
      break;
 8006366:	e00c      	b.n	8006382 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800636e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006372:	b2db      	uxtb	r3, r3
 8006374:	4619      	mov	r1, r3
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f001 fd50 	bl	8007e1c <USBD_LL_StallEP>
 800637c:	4603      	mov	r3, r0
 800637e:	73fb      	strb	r3, [r7, #15]
      break;
 8006380:	bf00      	nop
  }

  return ret;
 8006382:	7bfb      	ldrb	r3, [r7, #15]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	460b      	mov	r3, r1
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800639e:	7afb      	ldrb	r3, [r7, #11]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d16e      	bne.n	8006482 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80063aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	f040 8098 	bne.w	80064e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d913      	bls.n	80063ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	1ad2      	subs	r2, r2, r3
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	68da      	ldr	r2, [r3, #12]
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	4293      	cmp	r3, r2
 80063dc:	bf28      	it	cs
 80063de:	4613      	movcs	r3, r2
 80063e0:	461a      	mov	r2, r3
 80063e2:	6879      	ldr	r1, [r7, #4]
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f001 f967 	bl	80076b8 <USBD_CtlContinueRx>
 80063ea:	e07d      	b.n	80064e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063f2:	f003 031f 	and.w	r3, r3, #31
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d014      	beq.n	8006424 <USBD_LL_DataOutStage+0x98>
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d81d      	bhi.n	800643a <USBD_LL_DataOutStage+0xae>
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <USBD_LL_DataOutStage+0x7c>
 8006402:	2b01      	cmp	r3, #1
 8006404:	d003      	beq.n	800640e <USBD_LL_DataOutStage+0x82>
 8006406:	e018      	b.n	800643a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006408:	2300      	movs	r3, #0
 800640a:	75bb      	strb	r3, [r7, #22]
            break;
 800640c:	e018      	b.n	8006440 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006414:	b2db      	uxtb	r3, r3
 8006416:	4619      	mov	r1, r3
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 fa5e 	bl	80068da <USBD_CoreFindIF>
 800641e:	4603      	mov	r3, r0
 8006420:	75bb      	strb	r3, [r7, #22]
            break;
 8006422:	e00d      	b.n	8006440 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800642a:	b2db      	uxtb	r3, r3
 800642c:	4619      	mov	r1, r3
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 fa60 	bl	80068f4 <USBD_CoreFindEP>
 8006434:	4603      	mov	r3, r0
 8006436:	75bb      	strb	r3, [r7, #22]
            break;
 8006438:	e002      	b.n	8006440 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	75bb      	strb	r3, [r7, #22]
            break;
 800643e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006440:	7dbb      	ldrb	r3, [r7, #22]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d119      	bne.n	800647a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b03      	cmp	r3, #3
 8006450:	d113      	bne.n	800647a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006452:	7dba      	ldrb	r2, [r7, #22]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	32ae      	adds	r2, #174	; 0xae
 8006458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00b      	beq.n	800647a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006462:	7dba      	ldrb	r2, [r7, #22]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800646a:	7dba      	ldrb	r2, [r7, #22]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	32ae      	adds	r2, #174	; 0xae
 8006470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f001 f92d 	bl	80076da <USBD_CtlSendStatus>
 8006480:	e032      	b.n	80064e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006482:	7afb      	ldrb	r3, [r7, #11]
 8006484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006488:	b2db      	uxtb	r3, r3
 800648a:	4619      	mov	r1, r3
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 fa31 	bl	80068f4 <USBD_CoreFindEP>
 8006492:	4603      	mov	r3, r0
 8006494:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006496:	7dbb      	ldrb	r3, [r7, #22]
 8006498:	2bff      	cmp	r3, #255	; 0xff
 800649a:	d025      	beq.n	80064e8 <USBD_LL_DataOutStage+0x15c>
 800649c:	7dbb      	ldrb	r3, [r7, #22]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d122      	bne.n	80064e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d117      	bne.n	80064de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80064ae:	7dba      	ldrb	r2, [r7, #22]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	32ae      	adds	r2, #174	; 0xae
 80064b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00f      	beq.n	80064de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80064be:	7dba      	ldrb	r2, [r7, #22]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80064c6:	7dba      	ldrb	r2, [r7, #22]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	32ae      	adds	r2, #174	; 0xae
 80064cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	7afa      	ldrb	r2, [r7, #11]
 80064d4:	4611      	mov	r1, r2
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	4798      	blx	r3
 80064da:	4603      	mov	r3, r0
 80064dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80064de:	7dfb      	ldrb	r3, [r7, #23]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80064e4:	7dfb      	ldrb	r3, [r7, #23]
 80064e6:	e000      	b.n	80064ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b086      	sub	sp, #24
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	60f8      	str	r0, [r7, #12]
 80064fa:	460b      	mov	r3, r1
 80064fc:	607a      	str	r2, [r7, #4]
 80064fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006500:	7afb      	ldrb	r3, [r7, #11]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d16f      	bne.n	80065e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	3314      	adds	r3, #20
 800650a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006512:	2b02      	cmp	r3, #2
 8006514:	d15a      	bne.n	80065cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	689a      	ldr	r2, [r3, #8]
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	429a      	cmp	r2, r3
 8006520:	d914      	bls.n	800654c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	689a      	ldr	r2, [r3, #8]
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	1ad2      	subs	r2, r2, r3
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	461a      	mov	r2, r3
 8006536:	6879      	ldr	r1, [r7, #4]
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f001 f8ac 	bl	8007696 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800653e:	2300      	movs	r3, #0
 8006540:	2200      	movs	r2, #0
 8006542:	2100      	movs	r1, #0
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f001 fd13 	bl	8007f70 <USBD_LL_PrepareReceive>
 800654a:	e03f      	b.n	80065cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	429a      	cmp	r2, r3
 8006556:	d11c      	bne.n	8006592 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006560:	429a      	cmp	r2, r3
 8006562:	d316      	bcc.n	8006592 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800656e:	429a      	cmp	r2, r3
 8006570:	d20f      	bcs.n	8006592 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006572:	2200      	movs	r2, #0
 8006574:	2100      	movs	r1, #0
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f001 f88d 	bl	8007696 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006584:	2300      	movs	r3, #0
 8006586:	2200      	movs	r2, #0
 8006588:	2100      	movs	r1, #0
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f001 fcf0 	bl	8007f70 <USBD_LL_PrepareReceive>
 8006590:	e01c      	b.n	80065cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b03      	cmp	r3, #3
 800659c:	d10f      	bne.n	80065be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d009      	beq.n	80065be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80065be:	2180      	movs	r1, #128	; 0x80
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f001 fc2b 	bl	8007e1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f001 f89a 	bl	8007700 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d03a      	beq.n	800664c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f7ff fe42 	bl	8006260 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80065e4:	e032      	b.n	800664c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80065e6:	7afb      	ldrb	r3, [r7, #11]
 80065e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	4619      	mov	r1, r3
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 f97f 	bl	80068f4 <USBD_CoreFindEP>
 80065f6:	4603      	mov	r3, r0
 80065f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065fa:	7dfb      	ldrb	r3, [r7, #23]
 80065fc:	2bff      	cmp	r3, #255	; 0xff
 80065fe:	d025      	beq.n	800664c <USBD_LL_DataInStage+0x15a>
 8006600:	7dfb      	ldrb	r3, [r7, #23]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d122      	bne.n	800664c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b03      	cmp	r3, #3
 8006610:	d11c      	bne.n	800664c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006612:	7dfa      	ldrb	r2, [r7, #23]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	32ae      	adds	r2, #174	; 0xae
 8006618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d014      	beq.n	800664c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006622:	7dfa      	ldrb	r2, [r7, #23]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800662a:	7dfa      	ldrb	r2, [r7, #23]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	32ae      	adds	r2, #174	; 0xae
 8006630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	7afa      	ldrb	r2, [r7, #11]
 8006638:	4611      	mov	r1, r2
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	4798      	blx	r3
 800663e:	4603      	mov	r3, r0
 8006640:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006642:	7dbb      	ldrb	r3, [r7, #22]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006648:	7dbb      	ldrb	r3, [r7, #22]
 800664a:	e000      	b.n	800664e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3718      	adds	r7, #24
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b084      	sub	sp, #16
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800668e:	2b00      	cmp	r3, #0
 8006690:	d014      	beq.n	80066bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00e      	beq.n	80066bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	6852      	ldr	r2, [r2, #4]
 80066aa:	b2d2      	uxtb	r2, r2
 80066ac:	4611      	mov	r1, r2
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	4798      	blx	r3
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80066b8:	2303      	movs	r3, #3
 80066ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066bc:	2340      	movs	r3, #64	; 0x40
 80066be:	2200      	movs	r2, #0
 80066c0:	2100      	movs	r1, #0
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f001 fb65 	bl	8007d92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2240      	movs	r2, #64	; 0x40
 80066d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066d8:	2340      	movs	r3, #64	; 0x40
 80066da:	2200      	movs	r2, #0
 80066dc:	2180      	movs	r1, #128	; 0x80
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f001 fb57 	bl	8007d92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2240      	movs	r2, #64	; 0x40
 80066ee:	621a      	str	r2, [r3, #32]

  return ret;
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	460b      	mov	r3, r1
 8006704:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	78fa      	ldrb	r2, [r7, #3]
 800670a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006728:	b2da      	uxtb	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2204      	movs	r2, #4
 8006734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b04      	cmp	r3, #4
 8006758:	d106      	bne.n	8006768 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006760:	b2da      	uxtb	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b082      	sub	sp, #8
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b03      	cmp	r3, #3
 8006788:	d110      	bne.n	80067ac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00b      	beq.n	80067ac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b082      	sub	sp, #8
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	460b      	mov	r3, r1
 80067c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	32ae      	adds	r2, #174	; 0xae
 80067cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e01c      	b.n	8006812 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d115      	bne.n	8006810 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	32ae      	adds	r2, #174	; 0xae
 80067ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00b      	beq.n	8006810 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	32ae      	adds	r2, #174	; 0xae
 8006802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	78fa      	ldrb	r2, [r7, #3]
 800680a:	4611      	mov	r1, r2
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b082      	sub	sp, #8
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	460b      	mov	r3, r1
 8006824:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	32ae      	adds	r2, #174	; 0xae
 8006830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006838:	2303      	movs	r3, #3
 800683a:	e01c      	b.n	8006876 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b03      	cmp	r3, #3
 8006846:	d115      	bne.n	8006874 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	32ae      	adds	r2, #174	; 0xae
 8006852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00b      	beq.n	8006874 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	32ae      	adds	r2, #174	; 0xae
 8006866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	78fa      	ldrb	r2, [r7, #3]
 800686e:	4611      	mov	r1, r2
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800689c:	2300      	movs	r3, #0
 800689e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00e      	beq.n	80068d0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	6852      	ldr	r2, [r2, #4]
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	4611      	mov	r1, r2
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	4798      	blx	r3
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80068cc:	2303      	movs	r3, #3
 80068ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
 80068e2:	460b      	mov	r3, r1
 80068e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80068e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006900:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006902:	4618      	mov	r0, r3
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b086      	sub	sp, #24
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	460b      	mov	r3, r1
 8006918:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006922:	2300      	movs	r3, #0
 8006924:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	885b      	ldrh	r3, [r3, #2]
 800692a:	b29a      	uxth	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	b29b      	uxth	r3, r3
 8006932:	429a      	cmp	r2, r3
 8006934:	d920      	bls.n	8006978 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	b29b      	uxth	r3, r3
 800693c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800693e:	e013      	b.n	8006968 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006940:	f107 030a 	add.w	r3, r7, #10
 8006944:	4619      	mov	r1, r3
 8006946:	6978      	ldr	r0, [r7, #20]
 8006948:	f000 f81b 	bl	8006982 <USBD_GetNextDesc>
 800694c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	785b      	ldrb	r3, [r3, #1]
 8006952:	2b05      	cmp	r3, #5
 8006954:	d108      	bne.n	8006968 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	789b      	ldrb	r3, [r3, #2]
 800695e:	78fa      	ldrb	r2, [r7, #3]
 8006960:	429a      	cmp	r2, r3
 8006962:	d008      	beq.n	8006976 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006964:	2300      	movs	r3, #0
 8006966:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	885b      	ldrh	r3, [r3, #2]
 800696c:	b29a      	uxth	r2, r3
 800696e:	897b      	ldrh	r3, [r7, #10]
 8006970:	429a      	cmp	r2, r3
 8006972:	d8e5      	bhi.n	8006940 <USBD_GetEpDesc+0x32>
 8006974:	e000      	b.n	8006978 <USBD_GetEpDesc+0x6a>
          break;
 8006976:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006978:	693b      	ldr	r3, [r7, #16]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006982:	b480      	push	{r7}
 8006984:	b085      	sub	sp, #20
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
 800698a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	881a      	ldrh	r2, [r3, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	b29b      	uxth	r3, r3
 800699a:	4413      	add	r3, r2
 800699c:	b29a      	uxth	r2, r3
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4413      	add	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80069ae:	68fb      	ldr	r3, [r7, #12]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	3301      	adds	r3, #1
 80069d2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80069da:	8a3b      	ldrh	r3, [r7, #16]
 80069dc:	021b      	lsls	r3, r3, #8
 80069de:	b21a      	sxth	r2, r3
 80069e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	b21b      	sxth	r3, r3
 80069e8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80069ea:	89fb      	ldrh	r3, [r7, #14]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	371c      	adds	r7, #28
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a0e:	2b40      	cmp	r3, #64	; 0x40
 8006a10:	d005      	beq.n	8006a1e <USBD_StdDevReq+0x26>
 8006a12:	2b40      	cmp	r3, #64	; 0x40
 8006a14:	d857      	bhi.n	8006ac6 <USBD_StdDevReq+0xce>
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00f      	beq.n	8006a3a <USBD_StdDevReq+0x42>
 8006a1a:	2b20      	cmp	r3, #32
 8006a1c:	d153      	bne.n	8006ac6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	32ae      	adds	r2, #174	; 0xae
 8006a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	6839      	ldr	r1, [r7, #0]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	4798      	blx	r3
 8006a34:	4603      	mov	r3, r0
 8006a36:	73fb      	strb	r3, [r7, #15]
      break;
 8006a38:	e04a      	b.n	8006ad0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	785b      	ldrb	r3, [r3, #1]
 8006a3e:	2b09      	cmp	r3, #9
 8006a40:	d83b      	bhi.n	8006aba <USBD_StdDevReq+0xc2>
 8006a42:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <USBD_StdDevReq+0x50>)
 8006a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a48:	08006a9d 	.word	0x08006a9d
 8006a4c:	08006ab1 	.word	0x08006ab1
 8006a50:	08006abb 	.word	0x08006abb
 8006a54:	08006aa7 	.word	0x08006aa7
 8006a58:	08006abb 	.word	0x08006abb
 8006a5c:	08006a7b 	.word	0x08006a7b
 8006a60:	08006a71 	.word	0x08006a71
 8006a64:	08006abb 	.word	0x08006abb
 8006a68:	08006a93 	.word	0x08006a93
 8006a6c:	08006a85 	.word	0x08006a85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fa3c 	bl	8006ef0 <USBD_GetDescriptor>
          break;
 8006a78:	e024      	b.n	8006ac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fba1 	bl	80071c4 <USBD_SetAddress>
          break;
 8006a82:	e01f      	b.n	8006ac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fbe0 	bl	800724c <USBD_SetConfig>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	73fb      	strb	r3, [r7, #15]
          break;
 8006a90:	e018      	b.n	8006ac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fc83 	bl	80073a0 <USBD_GetConfig>
          break;
 8006a9a:	e013      	b.n	8006ac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a9c:	6839      	ldr	r1, [r7, #0]
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fcb4 	bl	800740c <USBD_GetStatus>
          break;
 8006aa4:	e00e      	b.n	8006ac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006aa6:	6839      	ldr	r1, [r7, #0]
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fce3 	bl	8007474 <USBD_SetFeature>
          break;
 8006aae:	e009      	b.n	8006ac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fd07 	bl	80074c6 <USBD_ClrFeature>
          break;
 8006ab8:	e004      	b.n	8006ac4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fd5e 	bl	800757e <USBD_CtlError>
          break;
 8006ac2:	bf00      	nop
      }
      break;
 8006ac4:	e004      	b.n	8006ad0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fd58 	bl	800757e <USBD_CtlError>
      break;
 8006ace:	bf00      	nop
  }

  return ret;
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop

08006adc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006af2:	2b40      	cmp	r3, #64	; 0x40
 8006af4:	d005      	beq.n	8006b02 <USBD_StdItfReq+0x26>
 8006af6:	2b40      	cmp	r3, #64	; 0x40
 8006af8:	d852      	bhi.n	8006ba0 <USBD_StdItfReq+0xc4>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <USBD_StdItfReq+0x26>
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d14e      	bne.n	8006ba0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d840      	bhi.n	8006b92 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	889b      	ldrh	r3, [r3, #4]
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d836      	bhi.n	8006b88 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	889b      	ldrh	r3, [r3, #4]
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	4619      	mov	r1, r3
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7ff fed9 	bl	80068da <USBD_CoreFindIF>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b2c:	7bbb      	ldrb	r3, [r7, #14]
 8006b2e:	2bff      	cmp	r3, #255	; 0xff
 8006b30:	d01d      	beq.n	8006b6e <USBD_StdItfReq+0x92>
 8006b32:	7bbb      	ldrb	r3, [r7, #14]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d11a      	bne.n	8006b6e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006b38:	7bba      	ldrb	r2, [r7, #14]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	32ae      	adds	r2, #174	; 0xae
 8006b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00f      	beq.n	8006b68 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006b48:	7bba      	ldrb	r2, [r7, #14]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b50:	7bba      	ldrb	r2, [r7, #14]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	32ae      	adds	r2, #174	; 0xae
 8006b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	4798      	blx	r3
 8006b62:	4603      	mov	r3, r0
 8006b64:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b66:	e004      	b.n	8006b72 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b6c:	e001      	b.n	8006b72 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	88db      	ldrh	r3, [r3, #6]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d110      	bne.n	8006b9c <USBD_StdItfReq+0xc0>
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10d      	bne.n	8006b9c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fdaa 	bl	80076da <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b86:	e009      	b.n	8006b9c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fcf7 	bl	800757e <USBD_CtlError>
          break;
 8006b90:	e004      	b.n	8006b9c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fcf2 	bl	800757e <USBD_CtlError>
          break;
 8006b9a:	e000      	b.n	8006b9e <USBD_StdItfReq+0xc2>
          break;
 8006b9c:	bf00      	nop
      }
      break;
 8006b9e:	e004      	b.n	8006baa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fceb 	bl	800757e <USBD_CtlError>
      break;
 8006ba8:	bf00      	nop
  }

  return ret;
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	889b      	ldrh	r3, [r3, #4]
 8006bc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bd0:	2b40      	cmp	r3, #64	; 0x40
 8006bd2:	d007      	beq.n	8006be4 <USBD_StdEPReq+0x30>
 8006bd4:	2b40      	cmp	r3, #64	; 0x40
 8006bd6:	f200 817f 	bhi.w	8006ed8 <USBD_StdEPReq+0x324>
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d02a      	beq.n	8006c34 <USBD_StdEPReq+0x80>
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	f040 817a 	bne.w	8006ed8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006be4:	7bbb      	ldrb	r3, [r7, #14]
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7ff fe83 	bl	80068f4 <USBD_CoreFindEP>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bf2:	7b7b      	ldrb	r3, [r7, #13]
 8006bf4:	2bff      	cmp	r3, #255	; 0xff
 8006bf6:	f000 8174 	beq.w	8006ee2 <USBD_StdEPReq+0x32e>
 8006bfa:	7b7b      	ldrb	r3, [r7, #13]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f040 8170 	bne.w	8006ee2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006c02:	7b7a      	ldrb	r2, [r7, #13]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006c0a:	7b7a      	ldrb	r2, [r7, #13]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	32ae      	adds	r2, #174	; 0xae
 8006c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 8163 	beq.w	8006ee2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006c1c:	7b7a      	ldrb	r2, [r7, #13]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	32ae      	adds	r2, #174	; 0xae
 8006c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	4798      	blx	r3
 8006c2e:	4603      	mov	r3, r0
 8006c30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c32:	e156      	b.n	8006ee2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	785b      	ldrb	r3, [r3, #1]
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	d008      	beq.n	8006c4e <USBD_StdEPReq+0x9a>
 8006c3c:	2b03      	cmp	r3, #3
 8006c3e:	f300 8145 	bgt.w	8006ecc <USBD_StdEPReq+0x318>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 809b 	beq.w	8006d7e <USBD_StdEPReq+0x1ca>
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d03c      	beq.n	8006cc6 <USBD_StdEPReq+0x112>
 8006c4c:	e13e      	b.n	8006ecc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d002      	beq.n	8006c60 <USBD_StdEPReq+0xac>
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d016      	beq.n	8006c8c <USBD_StdEPReq+0xd8>
 8006c5e:	e02c      	b.n	8006cba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00d      	beq.n	8006c82 <USBD_StdEPReq+0xce>
 8006c66:	7bbb      	ldrb	r3, [r7, #14]
 8006c68:	2b80      	cmp	r3, #128	; 0x80
 8006c6a:	d00a      	beq.n	8006c82 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 f8d3 	bl	8007e1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c76:	2180      	movs	r1, #128	; 0x80
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 f8cf 	bl	8007e1c <USBD_LL_StallEP>
 8006c7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c80:	e020      	b.n	8006cc4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fc7a 	bl	800757e <USBD_CtlError>
              break;
 8006c8a:	e01b      	b.n	8006cc4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	885b      	ldrh	r3, [r3, #2]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10e      	bne.n	8006cb2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00b      	beq.n	8006cb2 <USBD_StdEPReq+0xfe>
 8006c9a:	7bbb      	ldrb	r3, [r7, #14]
 8006c9c:	2b80      	cmp	r3, #128	; 0x80
 8006c9e:	d008      	beq.n	8006cb2 <USBD_StdEPReq+0xfe>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	88db      	ldrh	r3, [r3, #6]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d104      	bne.n	8006cb2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ca8:	7bbb      	ldrb	r3, [r7, #14]
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 f8b5 	bl	8007e1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fd11 	bl	80076da <USBD_CtlSendStatus>

              break;
 8006cb8:	e004      	b.n	8006cc4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006cba:	6839      	ldr	r1, [r7, #0]
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fc5e 	bl	800757e <USBD_CtlError>
              break;
 8006cc2:	bf00      	nop
          }
          break;
 8006cc4:	e107      	b.n	8006ed6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d002      	beq.n	8006cd8 <USBD_StdEPReq+0x124>
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d016      	beq.n	8006d04 <USBD_StdEPReq+0x150>
 8006cd6:	e04b      	b.n	8006d70 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cd8:	7bbb      	ldrb	r3, [r7, #14]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00d      	beq.n	8006cfa <USBD_StdEPReq+0x146>
 8006cde:	7bbb      	ldrb	r3, [r7, #14]
 8006ce0:	2b80      	cmp	r3, #128	; 0x80
 8006ce2:	d00a      	beq.n	8006cfa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f001 f897 	bl	8007e1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cee:	2180      	movs	r1, #128	; 0x80
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f001 f893 	bl	8007e1c <USBD_LL_StallEP>
 8006cf6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006cf8:	e040      	b.n	8006d7c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006cfa:	6839      	ldr	r1, [r7, #0]
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fc3e 	bl	800757e <USBD_CtlError>
              break;
 8006d02:	e03b      	b.n	8006d7c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	885b      	ldrh	r3, [r3, #2]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d136      	bne.n	8006d7a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d0c:	7bbb      	ldrb	r3, [r7, #14]
 8006d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d004      	beq.n	8006d20 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d16:	7bbb      	ldrb	r3, [r7, #14]
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 f89d 	bl	8007e5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fcda 	bl	80076da <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006d26:	7bbb      	ldrb	r3, [r7, #14]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7ff fde2 	bl	80068f4 <USBD_CoreFindEP>
 8006d30:	4603      	mov	r3, r0
 8006d32:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d34:	7b7b      	ldrb	r3, [r7, #13]
 8006d36:	2bff      	cmp	r3, #255	; 0xff
 8006d38:	d01f      	beq.n	8006d7a <USBD_StdEPReq+0x1c6>
 8006d3a:	7b7b      	ldrb	r3, [r7, #13]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d11c      	bne.n	8006d7a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006d40:	7b7a      	ldrb	r2, [r7, #13]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006d48:	7b7a      	ldrb	r2, [r7, #13]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	32ae      	adds	r2, #174	; 0xae
 8006d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d010      	beq.n	8006d7a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d58:	7b7a      	ldrb	r2, [r7, #13]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	32ae      	adds	r2, #174	; 0xae
 8006d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	6839      	ldr	r1, [r7, #0]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	4798      	blx	r3
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006d6e:	e004      	b.n	8006d7a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fc03 	bl	800757e <USBD_CtlError>
              break;
 8006d78:	e000      	b.n	8006d7c <USBD_StdEPReq+0x1c8>
              break;
 8006d7a:	bf00      	nop
          }
          break;
 8006d7c:	e0ab      	b.n	8006ed6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d002      	beq.n	8006d90 <USBD_StdEPReq+0x1dc>
 8006d8a:	2b03      	cmp	r3, #3
 8006d8c:	d032      	beq.n	8006df4 <USBD_StdEPReq+0x240>
 8006d8e:	e097      	b.n	8006ec0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d007      	beq.n	8006da6 <USBD_StdEPReq+0x1f2>
 8006d96:	7bbb      	ldrb	r3, [r7, #14]
 8006d98:	2b80      	cmp	r3, #128	; 0x80
 8006d9a:	d004      	beq.n	8006da6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fbed 	bl	800757e <USBD_CtlError>
                break;
 8006da4:	e091      	b.n	8006eca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006da6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	da0b      	bge.n	8006dc6 <USBD_StdEPReq+0x212>
 8006dae:	7bbb      	ldrb	r3, [r7, #14]
 8006db0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006db4:	4613      	mov	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	3310      	adds	r3, #16
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	e00b      	b.n	8006dde <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006dc6:	7bbb      	ldrb	r3, [r7, #14]
 8006dc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dcc:	4613      	mov	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	4413      	add	r3, r2
 8006ddc:	3304      	adds	r3, #4
 8006dde:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	2202      	movs	r2, #2
 8006dea:	4619      	mov	r1, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fc37 	bl	8007660 <USBD_CtlSendData>
              break;
 8006df2:	e06a      	b.n	8006eca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006df4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	da11      	bge.n	8006e20 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006dfc:	7bbb      	ldrb	r3, [r7, #14]
 8006dfe:	f003 020f 	and.w	r2, r3, #15
 8006e02:	6879      	ldr	r1, [r7, #4]
 8006e04:	4613      	mov	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	440b      	add	r3, r1
 8006e0e:	3324      	adds	r3, #36	; 0x24
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d117      	bne.n	8006e46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fbb0 	bl	800757e <USBD_CtlError>
                  break;
 8006e1e:	e054      	b.n	8006eca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e20:	7bbb      	ldrb	r3, [r7, #14]
 8006e22:	f003 020f 	and.w	r2, r3, #15
 8006e26:	6879      	ldr	r1, [r7, #4]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	440b      	add	r3, r1
 8006e32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d104      	bne.n	8006e46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fb9d 	bl	800757e <USBD_CtlError>
                  break;
 8006e44:	e041      	b.n	8006eca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	da0b      	bge.n	8006e66 <USBD_StdEPReq+0x2b2>
 8006e4e:	7bbb      	ldrb	r3, [r7, #14]
 8006e50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e54:	4613      	mov	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	3310      	adds	r3, #16
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	4413      	add	r3, r2
 8006e62:	3304      	adds	r3, #4
 8006e64:	e00b      	b.n	8006e7e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e66:	7bbb      	ldrb	r3, [r7, #14]
 8006e68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d002      	beq.n	8006e8c <USBD_StdEPReq+0x2d8>
 8006e86:	7bbb      	ldrb	r3, [r7, #14]
 8006e88:	2b80      	cmp	r3, #128	; 0x80
 8006e8a:	d103      	bne.n	8006e94 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	e00e      	b.n	8006eb2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006e94:	7bbb      	ldrb	r3, [r7, #14]
 8006e96:	4619      	mov	r1, r3
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fffd 	bl	8007e98 <USBD_LL_IsStallEP>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d003      	beq.n	8006eac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	e002      	b.n	8006eb2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fbd1 	bl	8007660 <USBD_CtlSendData>
              break;
 8006ebe:	e004      	b.n	8006eca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fb5b 	bl	800757e <USBD_CtlError>
              break;
 8006ec8:	bf00      	nop
          }
          break;
 8006eca:	e004      	b.n	8006ed6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fb55 	bl	800757e <USBD_CtlError>
          break;
 8006ed4:	bf00      	nop
      }
      break;
 8006ed6:	e005      	b.n	8006ee4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fb4f 	bl	800757e <USBD_CtlError>
      break;
 8006ee0:	e000      	b.n	8006ee4 <USBD_StdEPReq+0x330>
      break;
 8006ee2:	bf00      	nop
  }

  return ret;
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
	...

08006ef0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	885b      	ldrh	r3, [r3, #2]
 8006f0a:	0a1b      	lsrs	r3, r3, #8
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	2b06      	cmp	r3, #6
 8006f12:	f200 8128 	bhi.w	8007166 <USBD_GetDescriptor+0x276>
 8006f16:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <USBD_GetDescriptor+0x2c>)
 8006f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1c:	08006f39 	.word	0x08006f39
 8006f20:	08006f51 	.word	0x08006f51
 8006f24:	08006f91 	.word	0x08006f91
 8006f28:	08007167 	.word	0x08007167
 8006f2c:	08007167 	.word	0x08007167
 8006f30:	08007107 	.word	0x08007107
 8006f34:	08007133 	.word	0x08007133
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	7c12      	ldrb	r2, [r2, #16]
 8006f44:	f107 0108 	add.w	r1, r7, #8
 8006f48:	4610      	mov	r0, r2
 8006f4a:	4798      	blx	r3
 8006f4c:	60f8      	str	r0, [r7, #12]
      break;
 8006f4e:	e112      	b.n	8007176 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	7c1b      	ldrb	r3, [r3, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10d      	bne.n	8006f74 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f60:	f107 0208 	add.w	r2, r7, #8
 8006f64:	4610      	mov	r0, r2
 8006f66:	4798      	blx	r3
 8006f68:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	2202      	movs	r2, #2
 8006f70:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f72:	e100      	b.n	8007176 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7c:	f107 0208 	add.w	r2, r7, #8
 8006f80:	4610      	mov	r0, r2
 8006f82:	4798      	blx	r3
 8006f84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	701a      	strb	r2, [r3, #0]
      break;
 8006f8e:	e0f2      	b.n	8007176 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	885b      	ldrh	r3, [r3, #2]
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b05      	cmp	r3, #5
 8006f98:	f200 80ac 	bhi.w	80070f4 <USBD_GetDescriptor+0x204>
 8006f9c:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <USBD_GetDescriptor+0xb4>)
 8006f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa2:	bf00      	nop
 8006fa4:	08006fbd 	.word	0x08006fbd
 8006fa8:	08006ff1 	.word	0x08006ff1
 8006fac:	08007025 	.word	0x08007025
 8006fb0:	08007059 	.word	0x08007059
 8006fb4:	0800708d 	.word	0x0800708d
 8006fb8:	080070c1 	.word	0x080070c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00b      	beq.n	8006fe0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	7c12      	ldrb	r2, [r2, #16]
 8006fd4:	f107 0108 	add.w	r1, r7, #8
 8006fd8:	4610      	mov	r0, r2
 8006fda:	4798      	blx	r3
 8006fdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fde:	e091      	b.n	8007104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 facb 	bl	800757e <USBD_CtlError>
            err++;
 8006fe8:	7afb      	ldrb	r3, [r7, #11]
 8006fea:	3301      	adds	r3, #1
 8006fec:	72fb      	strb	r3, [r7, #11]
          break;
 8006fee:	e089      	b.n	8007104 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00b      	beq.n	8007014 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	7c12      	ldrb	r2, [r2, #16]
 8007008:	f107 0108 	add.w	r1, r7, #8
 800700c:	4610      	mov	r0, r2
 800700e:	4798      	blx	r3
 8007010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007012:	e077      	b.n	8007104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fab1 	bl	800757e <USBD_CtlError>
            err++;
 800701c:	7afb      	ldrb	r3, [r7, #11]
 800701e:	3301      	adds	r3, #1
 8007020:	72fb      	strb	r3, [r7, #11]
          break;
 8007022:	e06f      	b.n	8007104 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00b      	beq.n	8007048 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	7c12      	ldrb	r2, [r2, #16]
 800703c:	f107 0108 	add.w	r1, r7, #8
 8007040:	4610      	mov	r0, r2
 8007042:	4798      	blx	r3
 8007044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007046:	e05d      	b.n	8007104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fa97 	bl	800757e <USBD_CtlError>
            err++;
 8007050:	7afb      	ldrb	r3, [r7, #11]
 8007052:	3301      	adds	r3, #1
 8007054:	72fb      	strb	r3, [r7, #11]
          break;
 8007056:	e055      	b.n	8007104 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00b      	beq.n	800707c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	7c12      	ldrb	r2, [r2, #16]
 8007070:	f107 0108 	add.w	r1, r7, #8
 8007074:	4610      	mov	r0, r2
 8007076:	4798      	blx	r3
 8007078:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800707a:	e043      	b.n	8007104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fa7d 	bl	800757e <USBD_CtlError>
            err++;
 8007084:	7afb      	ldrb	r3, [r7, #11]
 8007086:	3301      	adds	r3, #1
 8007088:	72fb      	strb	r3, [r7, #11]
          break;
 800708a:	e03b      	b.n	8007104 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00b      	beq.n	80070b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	7c12      	ldrb	r2, [r2, #16]
 80070a4:	f107 0108 	add.w	r1, r7, #8
 80070a8:	4610      	mov	r0, r2
 80070aa:	4798      	blx	r3
 80070ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070ae:	e029      	b.n	8007104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fa63 	bl	800757e <USBD_CtlError>
            err++;
 80070b8:	7afb      	ldrb	r3, [r7, #11]
 80070ba:	3301      	adds	r3, #1
 80070bc:	72fb      	strb	r3, [r7, #11]
          break;
 80070be:	e021      	b.n	8007104 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00b      	beq.n	80070e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	7c12      	ldrb	r2, [r2, #16]
 80070d8:	f107 0108 	add.w	r1, r7, #8
 80070dc:	4610      	mov	r0, r2
 80070de:	4798      	blx	r3
 80070e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070e2:	e00f      	b.n	8007104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070e4:	6839      	ldr	r1, [r7, #0]
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fa49 	bl	800757e <USBD_CtlError>
            err++;
 80070ec:	7afb      	ldrb	r3, [r7, #11]
 80070ee:	3301      	adds	r3, #1
 80070f0:	72fb      	strb	r3, [r7, #11]
          break;
 80070f2:	e007      	b.n	8007104 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fa41 	bl	800757e <USBD_CtlError>
          err++;
 80070fc:	7afb      	ldrb	r3, [r7, #11]
 80070fe:	3301      	adds	r3, #1
 8007100:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007102:	bf00      	nop
      }
      break;
 8007104:	e037      	b.n	8007176 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	7c1b      	ldrb	r3, [r3, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d109      	bne.n	8007122 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007116:	f107 0208 	add.w	r2, r7, #8
 800711a:	4610      	mov	r0, r2
 800711c:	4798      	blx	r3
 800711e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007120:	e029      	b.n	8007176 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fa2a 	bl	800757e <USBD_CtlError>
        err++;
 800712a:	7afb      	ldrb	r3, [r7, #11]
 800712c:	3301      	adds	r3, #1
 800712e:	72fb      	strb	r3, [r7, #11]
      break;
 8007130:	e021      	b.n	8007176 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	7c1b      	ldrb	r3, [r3, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10d      	bne.n	8007156 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007142:	f107 0208 	add.w	r2, r7, #8
 8007146:	4610      	mov	r0, r2
 8007148:	4798      	blx	r3
 800714a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3301      	adds	r3, #1
 8007150:	2207      	movs	r2, #7
 8007152:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007154:	e00f      	b.n	8007176 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007156:	6839      	ldr	r1, [r7, #0]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fa10 	bl	800757e <USBD_CtlError>
        err++;
 800715e:	7afb      	ldrb	r3, [r7, #11]
 8007160:	3301      	adds	r3, #1
 8007162:	72fb      	strb	r3, [r7, #11]
      break;
 8007164:	e007      	b.n	8007176 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fa08 	bl	800757e <USBD_CtlError>
      err++;
 800716e:	7afb      	ldrb	r3, [r7, #11]
 8007170:	3301      	adds	r3, #1
 8007172:	72fb      	strb	r3, [r7, #11]
      break;
 8007174:	bf00      	nop
  }

  if (err != 0U)
 8007176:	7afb      	ldrb	r3, [r7, #11]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d11e      	bne.n	80071ba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	88db      	ldrh	r3, [r3, #6]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d016      	beq.n	80071b2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007184:	893b      	ldrh	r3, [r7, #8]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00e      	beq.n	80071a8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	88da      	ldrh	r2, [r3, #6]
 800718e:	893b      	ldrh	r3, [r7, #8]
 8007190:	4293      	cmp	r3, r2
 8007192:	bf28      	it	cs
 8007194:	4613      	movcs	r3, r2
 8007196:	b29b      	uxth	r3, r3
 8007198:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800719a:	893b      	ldrh	r3, [r7, #8]
 800719c:	461a      	mov	r2, r3
 800719e:	68f9      	ldr	r1, [r7, #12]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fa5d 	bl	8007660 <USBD_CtlSendData>
 80071a6:	e009      	b.n	80071bc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f9e7 	bl	800757e <USBD_CtlError>
 80071b0:	e004      	b.n	80071bc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fa91 	bl	80076da <USBD_CtlSendStatus>
 80071b8:	e000      	b.n	80071bc <USBD_GetDescriptor+0x2cc>
    return;
 80071ba:	bf00      	nop
  }
}
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop

080071c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	889b      	ldrh	r3, [r3, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d131      	bne.n	800723a <USBD_SetAddress+0x76>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	88db      	ldrh	r3, [r3, #6]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d12d      	bne.n	800723a <USBD_SetAddress+0x76>
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	885b      	ldrh	r3, [r3, #2]
 80071e2:	2b7f      	cmp	r3, #127	; 0x7f
 80071e4:	d829      	bhi.n	800723a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	885b      	ldrh	r3, [r3, #2]
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d104      	bne.n	8007208 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f9bc 	bl	800757e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007206:	e01d      	b.n	8007244 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	7bfa      	ldrb	r2, [r7, #15]
 800720c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007210:	7bfb      	ldrb	r3, [r7, #15]
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fe6b 	bl	8007ef0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fa5d 	bl	80076da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007220:	7bfb      	ldrb	r3, [r7, #15]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d004      	beq.n	8007230 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2202      	movs	r2, #2
 800722a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800722e:	e009      	b.n	8007244 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007238:	e004      	b.n	8007244 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f99e 	bl	800757e <USBD_CtlError>
  }
}
 8007242:	bf00      	nop
 8007244:	bf00      	nop
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007256:	2300      	movs	r3, #0
 8007258:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	885b      	ldrh	r3, [r3, #2]
 800725e:	b2da      	uxtb	r2, r3
 8007260:	4b4e      	ldr	r3, [pc, #312]	; (800739c <USBD_SetConfig+0x150>)
 8007262:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007264:	4b4d      	ldr	r3, [pc, #308]	; (800739c <USBD_SetConfig+0x150>)
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d905      	bls.n	8007278 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f985 	bl	800757e <USBD_CtlError>
    return USBD_FAIL;
 8007274:	2303      	movs	r3, #3
 8007276:	e08c      	b.n	8007392 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b02      	cmp	r3, #2
 8007282:	d002      	beq.n	800728a <USBD_SetConfig+0x3e>
 8007284:	2b03      	cmp	r3, #3
 8007286:	d029      	beq.n	80072dc <USBD_SetConfig+0x90>
 8007288:	e075      	b.n	8007376 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800728a:	4b44      	ldr	r3, [pc, #272]	; (800739c <USBD_SetConfig+0x150>)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d020      	beq.n	80072d4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007292:	4b42      	ldr	r3, [pc, #264]	; (800739c <USBD_SetConfig+0x150>)
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	461a      	mov	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800729c:	4b3f      	ldr	r3, [pc, #252]	; (800739c <USBD_SetConfig+0x150>)
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7fe ffe7 	bl	8006276 <USBD_SetClassConfig>
 80072a8:	4603      	mov	r3, r0
 80072aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d008      	beq.n	80072c4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f962 	bl	800757e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2202      	movs	r2, #2
 80072be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072c2:	e065      	b.n	8007390 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fa08 	bl	80076da <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2203      	movs	r2, #3
 80072ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80072d2:	e05d      	b.n	8007390 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fa00 	bl	80076da <USBD_CtlSendStatus>
      break;
 80072da:	e059      	b.n	8007390 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80072dc:	4b2f      	ldr	r3, [pc, #188]	; (800739c <USBD_SetConfig+0x150>)
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d112      	bne.n	800730a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80072ec:	4b2b      	ldr	r3, [pc, #172]	; (800739c <USBD_SetConfig+0x150>)
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	461a      	mov	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072f6:	4b29      	ldr	r3, [pc, #164]	; (800739c <USBD_SetConfig+0x150>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7fe ffd6 	bl	80062ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f9e9 	bl	80076da <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007308:	e042      	b.n	8007390 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800730a:	4b24      	ldr	r3, [pc, #144]	; (800739c <USBD_SetConfig+0x150>)
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	461a      	mov	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	429a      	cmp	r2, r3
 8007316:	d02a      	beq.n	800736e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	b2db      	uxtb	r3, r3
 800731e:	4619      	mov	r1, r3
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7fe ffc4 	bl	80062ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007326:	4b1d      	ldr	r3, [pc, #116]	; (800739c <USBD_SetConfig+0x150>)
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007330:	4b1a      	ldr	r3, [pc, #104]	; (800739c <USBD_SetConfig+0x150>)
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	4619      	mov	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7fe ff9d 	bl	8006276 <USBD_SetClassConfig>
 800733c:	4603      	mov	r3, r0
 800733e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00f      	beq.n	8007366 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f918 	bl	800757e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	b2db      	uxtb	r3, r3
 8007354:	4619      	mov	r1, r3
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7fe ffa9 	bl	80062ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2202      	movs	r2, #2
 8007360:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007364:	e014      	b.n	8007390 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f9b7 	bl	80076da <USBD_CtlSendStatus>
      break;
 800736c:	e010      	b.n	8007390 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f9b3 	bl	80076da <USBD_CtlSendStatus>
      break;
 8007374:	e00c      	b.n	8007390 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f900 	bl	800757e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800737e:	4b07      	ldr	r3, [pc, #28]	; (800739c <USBD_SetConfig+0x150>)
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7fe ff92 	bl	80062ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800738a:	2303      	movs	r3, #3
 800738c:	73fb      	strb	r3, [r7, #15]
      break;
 800738e:	bf00      	nop
  }

  return ret;
 8007390:	7bfb      	ldrb	r3, [r7, #15]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20000788 	.word	0x20000788

080073a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	88db      	ldrh	r3, [r3, #6]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d004      	beq.n	80073bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f8e2 	bl	800757e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80073ba:	e023      	b.n	8007404 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	dc02      	bgt.n	80073ce <USBD_GetConfig+0x2e>
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	dc03      	bgt.n	80073d4 <USBD_GetConfig+0x34>
 80073cc:	e015      	b.n	80073fa <USBD_GetConfig+0x5a>
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d00b      	beq.n	80073ea <USBD_GetConfig+0x4a>
 80073d2:	e012      	b.n	80073fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	3308      	adds	r3, #8
 80073de:	2201      	movs	r2, #1
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f93c 	bl	8007660 <USBD_CtlSendData>
        break;
 80073e8:	e00c      	b.n	8007404 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3304      	adds	r3, #4
 80073ee:	2201      	movs	r2, #1
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f934 	bl	8007660 <USBD_CtlSendData>
        break;
 80073f8:	e004      	b.n	8007404 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f8be 	bl	800757e <USBD_CtlError>
        break;
 8007402:	bf00      	nop
}
 8007404:	bf00      	nop
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800741c:	b2db      	uxtb	r3, r3
 800741e:	3b01      	subs	r3, #1
 8007420:	2b02      	cmp	r3, #2
 8007422:	d81e      	bhi.n	8007462 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	88db      	ldrh	r3, [r3, #6]
 8007428:	2b02      	cmp	r3, #2
 800742a:	d004      	beq.n	8007436 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f8a5 	bl	800757e <USBD_CtlError>
        break;
 8007434:	e01a      	b.n	800746c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007442:	2b00      	cmp	r3, #0
 8007444:	d005      	beq.n	8007452 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f043 0202 	orr.w	r2, r3, #2
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	330c      	adds	r3, #12
 8007456:	2202      	movs	r2, #2
 8007458:	4619      	mov	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f900 	bl	8007660 <USBD_CtlSendData>
      break;
 8007460:	e004      	b.n	800746c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f88a 	bl	800757e <USBD_CtlError>
      break;
 800746a:	bf00      	nop
  }
}
 800746c:	bf00      	nop
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	885b      	ldrh	r3, [r3, #2]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d107      	bne.n	8007496 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f923 	bl	80076da <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007494:	e013      	b.n	80074be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	885b      	ldrh	r3, [r3, #2]
 800749a:	2b02      	cmp	r3, #2
 800749c:	d10b      	bne.n	80074b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	889b      	ldrh	r3, [r3, #4]
 80074a2:	0a1b      	lsrs	r3, r3, #8
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f913 	bl	80076da <USBD_CtlSendStatus>
}
 80074b4:	e003      	b.n	80074be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f860 	bl	800757e <USBD_CtlError>
}
 80074be:	bf00      	nop
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b082      	sub	sp, #8
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	3b01      	subs	r3, #1
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d80b      	bhi.n	80074f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	885b      	ldrh	r3, [r3, #2]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d10c      	bne.n	8007500 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f8f3 	bl	80076da <USBD_CtlSendStatus>
      }
      break;
 80074f4:	e004      	b.n	8007500 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f840 	bl	800757e <USBD_CtlError>
      break;
 80074fe:	e000      	b.n	8007502 <USBD_ClrFeature+0x3c>
      break;
 8007500:	bf00      	nop
  }
}
 8007502:	bf00      	nop
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	781a      	ldrb	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	3301      	adds	r3, #1
 8007524:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	781a      	ldrb	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	3301      	adds	r3, #1
 8007532:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f7ff fa41 	bl	80069bc <SWAPBYTE>
 800753a:	4603      	mov	r3, r0
 800753c:	461a      	mov	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	3301      	adds	r3, #1
 8007546:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	3301      	adds	r3, #1
 800754c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f7ff fa34 	bl	80069bc <SWAPBYTE>
 8007554:	4603      	mov	r3, r0
 8007556:	461a      	mov	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	3301      	adds	r3, #1
 8007560:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	3301      	adds	r3, #1
 8007566:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f7ff fa27 	bl	80069bc <SWAPBYTE>
 800756e:	4603      	mov	r3, r0
 8007570:	461a      	mov	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	80da      	strh	r2, [r3, #6]
}
 8007576:	bf00      	nop
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b082      	sub	sp, #8
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007588:	2180      	movs	r1, #128	; 0x80
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fc46 	bl	8007e1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007590:	2100      	movs	r1, #0
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fc42 	bl	8007e1c <USBD_LL_StallEP>
}
 8007598:	bf00      	nop
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80075ac:	2300      	movs	r3, #0
 80075ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d036      	beq.n	8007624 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80075ba:	6938      	ldr	r0, [r7, #16]
 80075bc:	f000 f836 	bl	800762c <USBD_GetLen>
 80075c0:	4603      	mov	r3, r0
 80075c2:	3301      	adds	r3, #1
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	005b      	lsls	r3, r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	4413      	add	r3, r2
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	7812      	ldrb	r2, [r2, #0]
 80075d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80075da:	7dfb      	ldrb	r3, [r7, #23]
 80075dc:	3301      	adds	r3, #1
 80075de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80075e0:	7dfb      	ldrb	r3, [r7, #23]
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	4413      	add	r3, r2
 80075e6:	2203      	movs	r2, #3
 80075e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80075ea:	7dfb      	ldrb	r3, [r7, #23]
 80075ec:	3301      	adds	r3, #1
 80075ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80075f0:	e013      	b.n	800761a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80075f2:	7dfb      	ldrb	r3, [r7, #23]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	4413      	add	r3, r2
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	7812      	ldrb	r2, [r2, #0]
 80075fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	3301      	adds	r3, #1
 8007602:	613b      	str	r3, [r7, #16]
    idx++;
 8007604:	7dfb      	ldrb	r3, [r7, #23]
 8007606:	3301      	adds	r3, #1
 8007608:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800760a:	7dfb      	ldrb	r3, [r7, #23]
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	4413      	add	r3, r2
 8007610:	2200      	movs	r2, #0
 8007612:	701a      	strb	r2, [r3, #0]
    idx++;
 8007614:	7dfb      	ldrb	r3, [r7, #23]
 8007616:	3301      	adds	r3, #1
 8007618:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1e7      	bne.n	80075f2 <USBD_GetString+0x52>
 8007622:	e000      	b.n	8007626 <USBD_GetString+0x86>
    return;
 8007624:	bf00      	nop
  }
}
 8007626:	3718      	adds	r7, #24
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800763c:	e005      	b.n	800764a <USBD_GetLen+0x1e>
  {
    len++;
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	3301      	adds	r3, #1
 8007642:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	3301      	adds	r3, #1
 8007648:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1f5      	bne.n	800763e <USBD_GetLen+0x12>
  }

  return len;
 8007652:	7bfb      	ldrb	r3, [r7, #15]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2202      	movs	r2, #2
 8007670:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	2100      	movs	r1, #0
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 fc51 	bl	8007f2e <USBD_LL_Transmit>

  return USBD_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b084      	sub	sp, #16
 800769a:	af00      	add	r7, sp, #0
 800769c:	60f8      	str	r0, [r7, #12]
 800769e:	60b9      	str	r1, [r7, #8]
 80076a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	2100      	movs	r1, #0
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 fc40 	bl	8007f2e <USBD_LL_Transmit>

  return USBD_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	2100      	movs	r1, #0
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 fc50 	bl	8007f70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b082      	sub	sp, #8
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2204      	movs	r2, #4
 80076e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80076ea:	2300      	movs	r3, #0
 80076ec:	2200      	movs	r2, #0
 80076ee:	2100      	movs	r1, #0
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fc1c 	bl	8007f2e <USBD_LL_Transmit>

  return USBD_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2205      	movs	r2, #5
 800770c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007710:	2300      	movs	r3, #0
 8007712:	2200      	movs	r2, #0
 8007714:	2100      	movs	r1, #0
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fc2a 	bl	8007f70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800772c:	2200      	movs	r2, #0
 800772e:	490e      	ldr	r1, [pc, #56]	; (8007768 <MX_USB_DEVICE_Init+0x40>)
 8007730:	480e      	ldr	r0, [pc, #56]	; (800776c <MX_USB_DEVICE_Init+0x44>)
 8007732:	f7fe fd23 	bl	800617c <USBD_Init>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800773c:	f7f9 fcb0 	bl	80010a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007740:	490b      	ldr	r1, [pc, #44]	; (8007770 <MX_USB_DEVICE_Init+0x48>)
 8007742:	480a      	ldr	r0, [pc, #40]	; (800776c <MX_USB_DEVICE_Init+0x44>)
 8007744:	f7fe fd4a 	bl	80061dc <USBD_RegisterClass>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800774e:	f7f9 fca7 	bl	80010a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007752:	4806      	ldr	r0, [pc, #24]	; (800776c <MX_USB_DEVICE_Init+0x44>)
 8007754:	f7fe fd78 	bl	8006248 <USBD_Start>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800775e:	f7f9 fc9f 	bl	80010a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007762:	bf00      	nop
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	20000140 	.word	0x20000140
 800776c:	2000078c 	.word	0x2000078c
 8007770:	20000080 	.word	0x20000080

08007774 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	4603      	mov	r3, r0
 800777c:	6039      	str	r1, [r7, #0]
 800777e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2212      	movs	r2, #18
 8007784:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007786:	4b03      	ldr	r3, [pc, #12]	; (8007794 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007788:	4618      	mov	r0, r3
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	2000015c 	.word	0x2000015c

08007798 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	4603      	mov	r3, r0
 80077a0:	6039      	str	r1, [r7, #0]
 80077a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2204      	movs	r2, #4
 80077a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80077aa:	4b03      	ldr	r3, [pc, #12]	; (80077b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	20000170 	.word	0x20000170

080077bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	4603      	mov	r3, r0
 80077c4:	6039      	str	r1, [r7, #0]
 80077c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077c8:	79fb      	ldrb	r3, [r7, #7]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d105      	bne.n	80077da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	4907      	ldr	r1, [pc, #28]	; (80077f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80077d2:	4808      	ldr	r0, [pc, #32]	; (80077f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80077d4:	f7ff fee4 	bl	80075a0 <USBD_GetString>
 80077d8:	e004      	b.n	80077e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	4904      	ldr	r1, [pc, #16]	; (80077f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80077de:	4805      	ldr	r0, [pc, #20]	; (80077f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80077e0:	f7ff fede 	bl	80075a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077e4:	4b02      	ldr	r3, [pc, #8]	; (80077f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	20000a68 	.word	0x20000a68
 80077f4:	080080ac 	.word	0x080080ac

080077f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	4603      	mov	r3, r0
 8007800:	6039      	str	r1, [r7, #0]
 8007802:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	4904      	ldr	r1, [pc, #16]	; (8007818 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007808:	4804      	ldr	r0, [pc, #16]	; (800781c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800780a:	f7ff fec9 	bl	80075a0 <USBD_GetString>
  return USBD_StrDesc;
 800780e:	4b02      	ldr	r3, [pc, #8]	; (8007818 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007810:	4618      	mov	r0, r3
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	20000a68 	.word	0x20000a68
 800781c:	080080b8 	.word	0x080080b8

08007820 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	4603      	mov	r3, r0
 8007828:	6039      	str	r1, [r7, #0]
 800782a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	221a      	movs	r2, #26
 8007830:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007832:	f000 f843 	bl	80078bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007836:	4b02      	ldr	r3, [pc, #8]	; (8007840 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007838:	4618      	mov	r0, r3
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	20000174 	.word	0x20000174

08007844 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	4603      	mov	r3, r0
 800784c:	6039      	str	r1, [r7, #0]
 800784e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007850:	79fb      	ldrb	r3, [r7, #7]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d105      	bne.n	8007862 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	4907      	ldr	r1, [pc, #28]	; (8007878 <USBD_FS_ConfigStrDescriptor+0x34>)
 800785a:	4808      	ldr	r0, [pc, #32]	; (800787c <USBD_FS_ConfigStrDescriptor+0x38>)
 800785c:	f7ff fea0 	bl	80075a0 <USBD_GetString>
 8007860:	e004      	b.n	800786c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007862:	683a      	ldr	r2, [r7, #0]
 8007864:	4904      	ldr	r1, [pc, #16]	; (8007878 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007866:	4805      	ldr	r0, [pc, #20]	; (800787c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007868:	f7ff fe9a 	bl	80075a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800786c:	4b02      	ldr	r3, [pc, #8]	; (8007878 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800786e:	4618      	mov	r0, r3
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	20000a68 	.word	0x20000a68
 800787c:	080080cc 	.word	0x080080cc

08007880 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	4603      	mov	r3, r0
 8007888:	6039      	str	r1, [r7, #0]
 800788a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800788c:	79fb      	ldrb	r3, [r7, #7]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d105      	bne.n	800789e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	4907      	ldr	r1, [pc, #28]	; (80078b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007896:	4808      	ldr	r0, [pc, #32]	; (80078b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007898:	f7ff fe82 	bl	80075a0 <USBD_GetString>
 800789c:	e004      	b.n	80078a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	4904      	ldr	r1, [pc, #16]	; (80078b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078a2:	4805      	ldr	r0, [pc, #20]	; (80078b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078a4:	f7ff fe7c 	bl	80075a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078a8:	4b02      	ldr	r3, [pc, #8]	; (80078b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20000a68 	.word	0x20000a68
 80078b8:	080080d8 	.word	0x080080d8

080078bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80078c2:	4b0f      	ldr	r3, [pc, #60]	; (8007900 <Get_SerialNum+0x44>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80078c8:	4b0e      	ldr	r3, [pc, #56]	; (8007904 <Get_SerialNum+0x48>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80078ce:	4b0e      	ldr	r3, [pc, #56]	; (8007908 <Get_SerialNum+0x4c>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4413      	add	r3, r2
 80078da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d009      	beq.n	80078f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80078e2:	2208      	movs	r2, #8
 80078e4:	4909      	ldr	r1, [pc, #36]	; (800790c <Get_SerialNum+0x50>)
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 f814 	bl	8007914 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80078ec:	2204      	movs	r2, #4
 80078ee:	4908      	ldr	r1, [pc, #32]	; (8007910 <Get_SerialNum+0x54>)
 80078f0:	68b8      	ldr	r0, [r7, #8]
 80078f2:	f000 f80f 	bl	8007914 <IntToUnicode>
  }
}
 80078f6:	bf00      	nop
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	1fff7a10 	.word	0x1fff7a10
 8007904:	1fff7a14 	.word	0x1fff7a14
 8007908:	1fff7a18 	.word	0x1fff7a18
 800790c:	20000176 	.word	0x20000176
 8007910:	20000186 	.word	0x20000186

08007914 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007914:	b480      	push	{r7}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	4613      	mov	r3, r2
 8007920:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007922:	2300      	movs	r3, #0
 8007924:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007926:	2300      	movs	r3, #0
 8007928:	75fb      	strb	r3, [r7, #23]
 800792a:	e027      	b.n	800797c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	0f1b      	lsrs	r3, r3, #28
 8007930:	2b09      	cmp	r3, #9
 8007932:	d80b      	bhi.n	800794c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	0f1b      	lsrs	r3, r3, #28
 8007938:	b2da      	uxtb	r2, r3
 800793a:	7dfb      	ldrb	r3, [r7, #23]
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	4619      	mov	r1, r3
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	440b      	add	r3, r1
 8007944:	3230      	adds	r2, #48	; 0x30
 8007946:	b2d2      	uxtb	r2, r2
 8007948:	701a      	strb	r2, [r3, #0]
 800794a:	e00a      	b.n	8007962 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	0f1b      	lsrs	r3, r3, #28
 8007950:	b2da      	uxtb	r2, r3
 8007952:	7dfb      	ldrb	r3, [r7, #23]
 8007954:	005b      	lsls	r3, r3, #1
 8007956:	4619      	mov	r1, r3
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	440b      	add	r3, r1
 800795c:	3237      	adds	r2, #55	; 0x37
 800795e:	b2d2      	uxtb	r2, r2
 8007960:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	011b      	lsls	r3, r3, #4
 8007966:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007968:	7dfb      	ldrb	r3, [r7, #23]
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	3301      	adds	r3, #1
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	4413      	add	r3, r2
 8007972:	2200      	movs	r2, #0
 8007974:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007976:	7dfb      	ldrb	r3, [r7, #23]
 8007978:	3301      	adds	r3, #1
 800797a:	75fb      	strb	r3, [r7, #23]
 800797c:	7dfa      	ldrb	r2, [r7, #23]
 800797e:	79fb      	ldrb	r3, [r7, #7]
 8007980:	429a      	cmp	r2, r3
 8007982:	d3d3      	bcc.n	800792c <IntToUnicode+0x18>
  }
}
 8007984:	bf00      	nop
 8007986:	bf00      	nop
 8007988:	371c      	adds	r7, #28
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
	...

08007994 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08c      	sub	sp, #48	; 0x30
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800799c:	f107 031c 	add.w	r3, r7, #28
 80079a0:	2200      	movs	r2, #0
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	605a      	str	r2, [r3, #4]
 80079a6:	609a      	str	r2, [r3, #8]
 80079a8:	60da      	str	r2, [r3, #12]
 80079aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079b4:	d148      	bne.n	8007a48 <HAL_PCD_MspInit+0xb4>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079b6:	2300      	movs	r3, #0
 80079b8:	61bb      	str	r3, [r7, #24]
 80079ba:	4b45      	ldr	r3, [pc, #276]	; (8007ad0 <HAL_PCD_MspInit+0x13c>)
 80079bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079be:	4a44      	ldr	r2, [pc, #272]	; (8007ad0 <HAL_PCD_MspInit+0x13c>)
 80079c0:	f043 0301 	orr.w	r3, r3, #1
 80079c4:	6313      	str	r3, [r2, #48]	; 0x30
 80079c6:	4b42      	ldr	r3, [pc, #264]	; (8007ad0 <HAL_PCD_MspInit+0x13c>)
 80079c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	61bb      	str	r3, [r7, #24]
 80079d0:	69bb      	ldr	r3, [r7, #24]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80079d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80079d8:	2300      	movs	r3, #0
 80079da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079dc:	2300      	movs	r3, #0
 80079de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079e0:	f107 031c 	add.w	r3, r7, #28
 80079e4:	4619      	mov	r1, r3
 80079e6:	483b      	ldr	r0, [pc, #236]	; (8007ad4 <HAL_PCD_MspInit+0x140>)
 80079e8:	f7fa f854 	bl	8001a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80079ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80079f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079f2:	2302      	movs	r3, #2
 80079f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079f6:	2300      	movs	r3, #0
 80079f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079fa:	2303      	movs	r3, #3
 80079fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80079fe:	230a      	movs	r3, #10
 8007a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a02:	f107 031c 	add.w	r3, r7, #28
 8007a06:	4619      	mov	r1, r3
 8007a08:	4832      	ldr	r0, [pc, #200]	; (8007ad4 <HAL_PCD_MspInit+0x140>)
 8007a0a:	f7fa f843 	bl	8001a94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a0e:	4b30      	ldr	r3, [pc, #192]	; (8007ad0 <HAL_PCD_MspInit+0x13c>)
 8007a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a12:	4a2f      	ldr	r2, [pc, #188]	; (8007ad0 <HAL_PCD_MspInit+0x13c>)
 8007a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a18:	6353      	str	r3, [r2, #52]	; 0x34
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	617b      	str	r3, [r7, #20]
 8007a1e:	4b2c      	ldr	r3, [pc, #176]	; (8007ad0 <HAL_PCD_MspInit+0x13c>)
 8007a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a22:	4a2b      	ldr	r2, [pc, #172]	; (8007ad0 <HAL_PCD_MspInit+0x13c>)
 8007a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a28:	6453      	str	r3, [r2, #68]	; 0x44
 8007a2a:	4b29      	ldr	r3, [pc, #164]	; (8007ad0 <HAL_PCD_MspInit+0x13c>)
 8007a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a32:	617b      	str	r3, [r7, #20]
 8007a34:	697b      	ldr	r3, [r7, #20]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a36:	2200      	movs	r2, #0
 8007a38:	2100      	movs	r1, #0
 8007a3a:	2043      	movs	r0, #67	; 0x43
 8007a3c:	f7f9 fff3 	bl	8001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a40:	2043      	movs	r0, #67	; 0x43
 8007a42:	f7fa f80c 	bl	8001a5e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8007a46:	e03e      	b.n	8007ac6 <HAL_PCD_MspInit+0x132>
  else if(pcdHandle->Instance==USB_OTG_HS)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a22      	ldr	r2, [pc, #136]	; (8007ad8 <HAL_PCD_MspInit+0x144>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d139      	bne.n	8007ac6 <HAL_PCD_MspInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a52:	2300      	movs	r3, #0
 8007a54:	613b      	str	r3, [r7, #16]
 8007a56:	4b1e      	ldr	r3, [pc, #120]	; (8007ad0 <HAL_PCD_MspInit+0x13c>)
 8007a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5a:	4a1d      	ldr	r2, [pc, #116]	; (8007ad0 <HAL_PCD_MspInit+0x13c>)
 8007a5c:	f043 0302 	orr.w	r3, r3, #2
 8007a60:	6313      	str	r3, [r2, #48]	; 0x30
 8007a62:	4b1b      	ldr	r3, [pc, #108]	; (8007ad0 <HAL_PCD_MspInit+0x13c>)
 8007a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a66:	f003 0302 	and.w	r3, r3, #2
 8007a6a:	613b      	str	r3, [r7, #16]
 8007a6c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a74:	2300      	movs	r3, #0
 8007a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a7c:	f107 031c 	add.w	r3, r7, #28
 8007a80:	4619      	mov	r1, r3
 8007a82:	4816      	ldr	r0, [pc, #88]	; (8007adc <HAL_PCD_MspInit+0x148>)
 8007a84:	f7fa f806 	bl	8001a94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007a88:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a8e:	2302      	movs	r3, #2
 8007a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a92:	2300      	movs	r3, #0
 8007a94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a96:	2303      	movs	r3, #3
 8007a98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8007a9a:	230c      	movs	r3, #12
 8007a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a9e:	f107 031c 	add.w	r3, r7, #28
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	480d      	ldr	r0, [pc, #52]	; (8007adc <HAL_PCD_MspInit+0x148>)
 8007aa6:	f7f9 fff5 	bl	8001a94 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8007aaa:	2300      	movs	r3, #0
 8007aac:	60fb      	str	r3, [r7, #12]
 8007aae:	4b08      	ldr	r3, [pc, #32]	; (8007ad0 <HAL_PCD_MspInit+0x13c>)
 8007ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab2:	4a07      	ldr	r2, [pc, #28]	; (8007ad0 <HAL_PCD_MspInit+0x13c>)
 8007ab4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8007aba:	4b05      	ldr	r3, [pc, #20]	; (8007ad0 <HAL_PCD_MspInit+0x13c>)
 8007abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ac2:	60fb      	str	r3, [r7, #12]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
}
 8007ac6:	bf00      	nop
 8007ac8:	3730      	adds	r7, #48	; 0x30
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	40023800 	.word	0x40023800
 8007ad4:	40020000 	.word	0x40020000
 8007ad8:	40040000 	.word	0x40040000
 8007adc:	40020400 	.word	0x40020400

08007ae0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007af4:	4619      	mov	r1, r3
 8007af6:	4610      	mov	r0, r2
 8007af8:	f7fe fbf3 	bl	80062e2 <USBD_LL_SetupStage>
}
 8007afc:	bf00      	nop
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007b16:	78fa      	ldrb	r2, [r7, #3]
 8007b18:	6879      	ldr	r1, [r7, #4]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	00db      	lsls	r3, r3, #3
 8007b1e:	4413      	add	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	440b      	add	r3, r1
 8007b24:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	f7fe fc2d 	bl	800638c <USBD_LL_DataOutStage>
}
 8007b32:	bf00      	nop
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	460b      	mov	r3, r1
 8007b44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007b4c:	78fa      	ldrb	r2, [r7, #3]
 8007b4e:	6879      	ldr	r1, [r7, #4]
 8007b50:	4613      	mov	r3, r2
 8007b52:	00db      	lsls	r3, r3, #3
 8007b54:	4413      	add	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	440b      	add	r3, r1
 8007b5a:	334c      	adds	r3, #76	; 0x4c
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	78fb      	ldrb	r3, [r7, #3]
 8007b60:	4619      	mov	r1, r3
 8007b62:	f7fe fcc6 	bl	80064f2 <USBD_LL_DataInStage>
}
 8007b66:	bf00      	nop
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b082      	sub	sp, #8
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7fe fdfa 	bl	8006776 <USBD_LL_SOF>
}
 8007b82:	bf00      	nop
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b084      	sub	sp, #16
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b92:	2301      	movs	r3, #1
 8007b94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d102      	bne.n	8007ba4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]
 8007ba2:	e008      	b.n	8007bb6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d102      	bne.n	8007bb2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007bac:	2301      	movs	r3, #1
 8007bae:	73fb      	strb	r3, [r7, #15]
 8007bb0:	e001      	b.n	8007bb6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007bb2:	f7f9 fa75 	bl	80010a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bbc:	7bfa      	ldrb	r2, [r7, #15]
 8007bbe:	4611      	mov	r1, r2
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fe fd9a 	bl	80066fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7fe fd42 	bl	8006656 <USBD_LL_Reset>
}
 8007bd2:	bf00      	nop
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
	...

08007bdc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe fd95 	bl	800671a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	6812      	ldr	r2, [r2, #0]
 8007bfe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c02:	f043 0301 	orr.w	r3, r3, #1
 8007c06:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a1b      	ldr	r3, [r3, #32]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d005      	beq.n	8007c1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c10:	4b04      	ldr	r3, [pc, #16]	; (8007c24 <HAL_PCD_SuspendCallback+0x48>)
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	4a03      	ldr	r2, [pc, #12]	; (8007c24 <HAL_PCD_SuspendCallback+0x48>)
 8007c16:	f043 0306 	orr.w	r3, r3, #6
 8007c1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c1c:	bf00      	nop
 8007c1e:	3708      	adds	r7, #8
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	e000ed00 	.word	0xe000ed00

08007c28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fe fd85 	bl	8006746 <USBD_LL_Resume>
}
 8007c3c:	bf00      	nop
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c56:	78fa      	ldrb	r2, [r7, #3]
 8007c58:	4611      	mov	r1, r2
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fe fddd 	bl	800681a <USBD_LL_IsoOUTIncomplete>
}
 8007c60:	bf00      	nop
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c7a:	78fa      	ldrb	r2, [r7, #3]
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fe fd99 	bl	80067b6 <USBD_LL_IsoINIncomplete>
}
 8007c84:	bf00      	nop
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fe fdef 	bl	800687e <USBD_LL_DevConnected>
}
 8007ca0:	bf00      	nop
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe fdec 	bl	8006894 <USBD_LL_DevDisconnected>
}
 8007cbc:	bf00      	nop
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d13c      	bne.n	8007d4e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007cd4:	4a20      	ldr	r2, [pc, #128]	; (8007d58 <USBD_LL_Init+0x94>)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a1e      	ldr	r2, [pc, #120]	; (8007d58 <USBD_LL_Init+0x94>)
 8007ce0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ce4:	4b1c      	ldr	r3, [pc, #112]	; (8007d58 <USBD_LL_Init+0x94>)
 8007ce6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007cea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007cec:	4b1a      	ldr	r3, [pc, #104]	; (8007d58 <USBD_LL_Init+0x94>)
 8007cee:	2204      	movs	r2, #4
 8007cf0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007cf2:	4b19      	ldr	r3, [pc, #100]	; (8007d58 <USBD_LL_Init+0x94>)
 8007cf4:	2202      	movs	r2, #2
 8007cf6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007cf8:	4b17      	ldr	r3, [pc, #92]	; (8007d58 <USBD_LL_Init+0x94>)
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007cfe:	4b16      	ldr	r3, [pc, #88]	; (8007d58 <USBD_LL_Init+0x94>)
 8007d00:	2202      	movs	r2, #2
 8007d02:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d04:	4b14      	ldr	r3, [pc, #80]	; (8007d58 <USBD_LL_Init+0x94>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007d0a:	4b13      	ldr	r3, [pc, #76]	; (8007d58 <USBD_LL_Init+0x94>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007d10:	4b11      	ldr	r3, [pc, #68]	; (8007d58 <USBD_LL_Init+0x94>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007d16:	4b10      	ldr	r3, [pc, #64]	; (8007d58 <USBD_LL_Init+0x94>)
 8007d18:	2201      	movs	r2, #1
 8007d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007d1c:	4b0e      	ldr	r3, [pc, #56]	; (8007d58 <USBD_LL_Init+0x94>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007d22:	480d      	ldr	r0, [pc, #52]	; (8007d58 <USBD_LL_Init+0x94>)
 8007d24:	f7fa f980 	bl	8002028 <HAL_PCD_Init>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d001      	beq.n	8007d32 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007d2e:	f7f9 f9b7 	bl	80010a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007d32:	2180      	movs	r1, #128	; 0x80
 8007d34:	4808      	ldr	r0, [pc, #32]	; (8007d58 <USBD_LL_Init+0x94>)
 8007d36:	f7fb fbc0 	bl	80034ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007d3a:	2240      	movs	r2, #64	; 0x40
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	4806      	ldr	r0, [pc, #24]	; (8007d58 <USBD_LL_Init+0x94>)
 8007d40:	f7fb fb74 	bl	800342c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007d44:	2280      	movs	r2, #128	; 0x80
 8007d46:	2101      	movs	r1, #1
 8007d48:	4803      	ldr	r0, [pc, #12]	; (8007d58 <USBD_LL_Init+0x94>)
 8007d4a:	f7fb fb6f 	bl	800342c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	20000c68 	.word	0x20000c68

08007d5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fa fa75 	bl	8002262 <HAL_PCD_Start>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f000 f930 	bl	8007fe4 <USBD_Get_USB_Status>
 8007d84:	4603      	mov	r3, r0
 8007d86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b084      	sub	sp, #16
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	4608      	mov	r0, r1
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	461a      	mov	r2, r3
 8007da0:	4603      	mov	r3, r0
 8007da2:	70fb      	strb	r3, [r7, #3]
 8007da4:	460b      	mov	r3, r1
 8007da6:	70bb      	strb	r3, [r7, #2]
 8007da8:	4613      	mov	r3, r2
 8007daa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dac:	2300      	movs	r3, #0
 8007dae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007dba:	78bb      	ldrb	r3, [r7, #2]
 8007dbc:	883a      	ldrh	r2, [r7, #0]
 8007dbe:	78f9      	ldrb	r1, [r7, #3]
 8007dc0:	f7fa ff46 	bl	8002c50 <HAL_PCD_EP_Open>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 f90a 	bl	8007fe4 <USBD_Get_USB_Status>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b084      	sub	sp, #16
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	460b      	mov	r3, r1
 8007de8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007df8:	78fa      	ldrb	r2, [r7, #3]
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7fa ff8f 	bl	8002d20 <HAL_PCD_EP_Close>
 8007e02:	4603      	mov	r3, r0
 8007e04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 f8eb 	bl	8007fe4 <USBD_Get_USB_Status>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e12:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e36:	78fa      	ldrb	r2, [r7, #3]
 8007e38:	4611      	mov	r1, r2
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fb f84f 	bl	8002ede <HAL_PCD_EP_SetStall>
 8007e40:	4603      	mov	r3, r0
 8007e42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 f8cc 	bl	8007fe4 <USBD_Get_USB_Status>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b084      	sub	sp, #16
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	460b      	mov	r3, r1
 8007e64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e74:	78fa      	ldrb	r2, [r7, #3]
 8007e76:	4611      	mov	r1, r2
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7fb f894 	bl	8002fa6 <HAL_PCD_EP_ClrStall>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f000 f8ad 	bl	8007fe4 <USBD_Get_USB_Status>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007eaa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007eac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	da0b      	bge.n	8007ecc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007eb4:	78fb      	ldrb	r3, [r7, #3]
 8007eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007eba:	68f9      	ldr	r1, [r7, #12]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	4413      	add	r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	440b      	add	r3, r1
 8007ec6:	333e      	adds	r3, #62	; 0x3e
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	e00b      	b.n	8007ee4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ecc:	78fb      	ldrb	r3, [r7, #3]
 8007ece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ed2:	68f9      	ldr	r1, [r7, #12]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	00db      	lsls	r3, r3, #3
 8007ed8:	4413      	add	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	440b      	add	r3, r1
 8007ede:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007ee2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007efc:	2300      	movs	r3, #0
 8007efe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f0a:	78fa      	ldrb	r2, [r7, #3]
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fa fe79 	bl	8002c06 <HAL_PCD_SetAddress>
 8007f14:	4603      	mov	r3, r0
 8007f16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 f862 	bl	8007fe4 <USBD_Get_USB_Status>
 8007f20:	4603      	mov	r3, r0
 8007f22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f24:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b086      	sub	sp, #24
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	60f8      	str	r0, [r7, #12]
 8007f36:	607a      	str	r2, [r7, #4]
 8007f38:	603b      	str	r3, [r7, #0]
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007f4c:	7af9      	ldrb	r1, [r7, #11]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	f7fa ff7a 	bl	8002e4a <HAL_PCD_EP_Transmit>
 8007f56:	4603      	mov	r3, r0
 8007f58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f5a:	7dfb      	ldrb	r3, [r7, #23]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 f841 	bl	8007fe4 <USBD_Get_USB_Status>
 8007f62:	4603      	mov	r3, r0
 8007f64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f66:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	607a      	str	r2, [r7, #4]
 8007f7a:	603b      	str	r3, [r7, #0]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f84:	2300      	movs	r3, #0
 8007f86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007f8e:	7af9      	ldrb	r1, [r7, #11]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	f7fa ff0e 	bl	8002db4 <HAL_PCD_EP_Receive>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f9c:	7dfb      	ldrb	r3, [r7, #23]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 f820 	bl	8007fe4 <USBD_Get_USB_Status>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fa8:	7dbb      	ldrb	r3, [r7, #22]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007fbc:	4b03      	ldr	r3, [pc, #12]	; (8007fcc <USBD_static_malloc+0x18>)
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	20001174 	.word	0x20001174

08007fd0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]

}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	4603      	mov	r3, r0
 8007fec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007ff2:	79fb      	ldrb	r3, [r7, #7]
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	d817      	bhi.n	8008028 <USBD_Get_USB_Status+0x44>
 8007ff8:	a201      	add	r2, pc, #4	; (adr r2, 8008000 <USBD_Get_USB_Status+0x1c>)
 8007ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffe:	bf00      	nop
 8008000:	08008011 	.word	0x08008011
 8008004:	08008017 	.word	0x08008017
 8008008:	0800801d 	.word	0x0800801d
 800800c:	08008023 	.word	0x08008023
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008010:	2300      	movs	r3, #0
 8008012:	73fb      	strb	r3, [r7, #15]
    break;
 8008014:	e00b      	b.n	800802e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008016:	2303      	movs	r3, #3
 8008018:	73fb      	strb	r3, [r7, #15]
    break;
 800801a:	e008      	b.n	800802e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800801c:	2301      	movs	r3, #1
 800801e:	73fb      	strb	r3, [r7, #15]
    break;
 8008020:	e005      	b.n	800802e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008022:	2303      	movs	r3, #3
 8008024:	73fb      	strb	r3, [r7, #15]
    break;
 8008026:	e002      	b.n	800802e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008028:	2303      	movs	r3, #3
 800802a:	73fb      	strb	r3, [r7, #15]
    break;
 800802c:	bf00      	nop
  }
  return usb_status;
 800802e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3714      	adds	r7, #20
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <__libc_init_array>:
 800803c:	b570      	push	{r4, r5, r6, lr}
 800803e:	4d0d      	ldr	r5, [pc, #52]	; (8008074 <__libc_init_array+0x38>)
 8008040:	4c0d      	ldr	r4, [pc, #52]	; (8008078 <__libc_init_array+0x3c>)
 8008042:	1b64      	subs	r4, r4, r5
 8008044:	10a4      	asrs	r4, r4, #2
 8008046:	2600      	movs	r6, #0
 8008048:	42a6      	cmp	r6, r4
 800804a:	d109      	bne.n	8008060 <__libc_init_array+0x24>
 800804c:	4d0b      	ldr	r5, [pc, #44]	; (800807c <__libc_init_array+0x40>)
 800804e:	4c0c      	ldr	r4, [pc, #48]	; (8008080 <__libc_init_array+0x44>)
 8008050:	f000 f820 	bl	8008094 <_init>
 8008054:	1b64      	subs	r4, r4, r5
 8008056:	10a4      	asrs	r4, r4, #2
 8008058:	2600      	movs	r6, #0
 800805a:	42a6      	cmp	r6, r4
 800805c:	d105      	bne.n	800806a <__libc_init_array+0x2e>
 800805e:	bd70      	pop	{r4, r5, r6, pc}
 8008060:	f855 3b04 	ldr.w	r3, [r5], #4
 8008064:	4798      	blx	r3
 8008066:	3601      	adds	r6, #1
 8008068:	e7ee      	b.n	8008048 <__libc_init_array+0xc>
 800806a:	f855 3b04 	ldr.w	r3, [r5], #4
 800806e:	4798      	blx	r3
 8008070:	3601      	adds	r6, #1
 8008072:	e7f2      	b.n	800805a <__libc_init_array+0x1e>
 8008074:	08008100 	.word	0x08008100
 8008078:	08008100 	.word	0x08008100
 800807c:	08008100 	.word	0x08008100
 8008080:	08008104 	.word	0x08008104

08008084 <memset>:
 8008084:	4402      	add	r2, r0
 8008086:	4603      	mov	r3, r0
 8008088:	4293      	cmp	r3, r2
 800808a:	d100      	bne.n	800808e <memset+0xa>
 800808c:	4770      	bx	lr
 800808e:	f803 1b01 	strb.w	r1, [r3], #1
 8008092:	e7f9      	b.n	8008088 <memset+0x4>

08008094 <_init>:
 8008094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008096:	bf00      	nop
 8008098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800809a:	bc08      	pop	{r3}
 800809c:	469e      	mov	lr, r3
 800809e:	4770      	bx	lr

080080a0 <_fini>:
 80080a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a2:	bf00      	nop
 80080a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080a6:	bc08      	pop	{r3}
 80080a8:	469e      	mov	lr, r3
 80080aa:	4770      	bx	lr
